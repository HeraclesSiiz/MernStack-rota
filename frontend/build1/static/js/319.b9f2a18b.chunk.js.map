{"version":3,"file":"static/js/319.b9f2a18b.chunk.js","mappings":"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","sources":["pages/dtr.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport {\r\n  MDBContainer,\r\n  MDBRow,\r\n  MDBCol,\r\n  MDBBtn,\r\n  MDBBtnGroup,\r\n} from \"mdb-react-ui-kit\";\r\nimport \"../css/App.css\";\r\nimport { IoMdDownload } from \"react-icons/io\";\r\nimport { CSVLink } from \"react-csv\";\r\nimport { connect } from \"react-redux\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport Autocomplete from \"react-autocomplete\";\r\n\r\nclass DTR extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    let date = new Date();\r\n    let year = date.getFullYear();\r\n    let month =\r\n      date.getMonth() + 1 > 9\r\n        ? date.getMonth() + 1\r\n        : \"0\" + (date.getMonth() + 1);\r\n    let day = new Date(year, month, 0).getDate();\r\n\r\n    this.state = {\r\n      type: 0,\r\n      from: year + \"-\" + month + \"-\" + \"01\",\r\n      to: year + \"-\" + month + \"-\" + day,\r\n      selNurse: 0,\r\n      selNurseValue: \"\",\r\n      selPatient: 0,\r\n      selPatientValue: \"\",\r\n    };\r\n  }\r\n  setDate = (target, e) => {\r\n    this.setState({\r\n      ...this.state,\r\n      [target]: e.target.value,\r\n    });\r\n  };\r\n  onChangeNurse = (e) => {\r\n    this.setState({\r\n      ...this.state,\r\n      selNurse: 0,\r\n      selNurseValue: e.target.value,\r\n    });\r\n  };\r\n  OnSelectNurse = (val, item) => {\r\n    this.setState({\r\n      ...this.state,\r\n      selNurse: item.key,\r\n      selNurseValue: val,\r\n    });\r\n  };\r\n\r\n  onChangePatient = (e) => {\r\n    // console.log(e.target);\r\n    this.setState({\r\n      ...this.state,\r\n      selPatient: 0,\r\n      selPatientValue: e.target.value,\r\n    });\r\n  };\r\n\r\n  onSelectPatient = (val, item) => {\r\n    this.setState({\r\n      ...this.state,\r\n      selPatient: item.key,\r\n      selPatientValue: val,\r\n    });\r\n  };\r\n\r\n  componentDidMount() {}\r\n\r\n  render() {\r\n    const { basic } = this.props;\r\n    const { from, to, selNurse, selNurseValue, selPatient, selPatientValue } =\r\n      this.state;\r\n\r\n    let totalColumns = [];\r\n    let totalDatas = [];\r\n\r\n    totalColumns.push(\r\n      {\r\n        name: \"Date\",\r\n        center: true,\r\n        wrap: true,\r\n        sortable: true,\r\n        selector: (row) => row.date,\r\n      },\r\n      {\r\n        name: \"Patient\",\r\n        center: true,\r\n        wrap: true,\r\n        width: \"20vw%\",\r\n        sortable: true,\r\n        selector: (row) => row.patient,\r\n      },\r\n      {\r\n        name: \"Duty Start\",\r\n        center: true,\r\n        wrap: true,\r\n        width: \"20vw\",\r\n        sortable: true,\r\n        selector: (row) => row.duty_start,\r\n      },\r\n      {\r\n        name: \"Duty End\",\r\n        center: true,\r\n        wrap: true,\r\n        width: \"20vw\",\r\n        sortable: true,\r\n        selector: (row) => row.duty_end,\r\n      },\r\n      {\r\n        name: \"Hour\",\r\n        center: true,\r\n        wrap: true,\r\n        sortable: true,\r\n        selector: (row) => row.hour,\r\n      }\r\n    );\r\n\r\n    //show data per individual\r\n    let dates = [];\r\n    for (\r\n      var d = new Date(from);\r\n      d <= new Date(to);\r\n      d.setDate(d.getDate() + 1)\r\n    ) {\r\n      let year = d.getFullYear();\r\n      let month =\r\n        d.getMonth() + 1 > 9 ? d.getMonth() + 1 : \"0\" + (d.getMonth() + 1);\r\n      let day = d.getDate() > 9 ? d.getDate() : \"0\" + d.getDate();\r\n      let dateFormat = year + \"-\" + month + \"-\" + day;\r\n      dates.push(dateFormat);\r\n    }\r\n\r\n    let nurseList = [];\r\n    let nurseAutoList = [];\r\n\r\n    basic.nurses.map((nurse) => {\r\n      nurseList[nurse._id] = nurse.name;\r\n      if (nurse.name.includes(selNurseValue)) {\r\n        nurseAutoList.push({\r\n          label: nurse.name,\r\n          key: nurse._id,\r\n        });\r\n      }\r\n    });\r\n\r\n    let patientList = [];\r\n    let patientAutoList = [];\r\n\r\n    basic.patients.map((patient) => {\r\n      patientList[patient._id] = patient.name;\r\n      if (patient.name.includes(selPatientValue)) {\r\n        patientAutoList.push({\r\n          label: patient.name,\r\n          key: patient._id,\r\n        });\r\n      }\r\n    });\r\n\r\n    let leavedays = [];\r\n    let thour = 0;\r\n    let headers = [\r\n      { label: \"Date\", key: \"date\" },\r\n      { label: \"Patient\", key: \"patient\" },\r\n      { label: \"Duty Start\", key: \"duty_start\" },\r\n      { label: \"Duty End\", key: \"duty_end\" },\r\n      { label: \"Hour\", key: \"hour\" },\r\n    ];\r\n\r\n    basic.nurses.map((nurse) => {\r\n      if (nurse._id == selNurse) {\r\n        let leaves = nurse.leave ? nurse.leave : [];\r\n\r\n        for (let leave of leaves) {\r\n          let leavefrom = new Date(leave.from);\r\n          let leaveto = new Date(leave.to);\r\n          for (let betweenDay = leavefrom; betweenDay <= leaveto; ) {\r\n            let between = betweenDay.toISOString().slice(0, 10);\r\n            if (between >= from && between <= to) {\r\n              leavedays.push(between);\r\n            }\r\n            betweenDay.setDate(betweenDay.getDate() + 1);\r\n          }\r\n        }\r\n\r\n        nurse.rota.map((rota) => {\r\n          if (rota.date >= from && rota.date <= to) {\r\n            if (selPatient == 0) {\r\n              thour += rota.hour;\r\n              let row = {\r\n                date: rota.date,\r\n                patient: patientList[rota.patient_id],\r\n                duty_start: rota.duty_start,\r\n                duty_end: rota.duty_end,\r\n                hour: rota.hour,\r\n              };\r\n              totalDatas.push(row);\r\n            } else {\r\n              if (rota.patient_id == selPatient) {\r\n                thour += rota.hour;\r\n                let row = {\r\n                  date: rota.date,\r\n                  patient: patientList[rota.patient_id],\r\n                  duty_start: rota.duty_start,\r\n                  duty_end: rota.duty_end,\r\n                  hour: rota.hour,\r\n                };\r\n                totalDatas.push(row);\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    if (selNurse != 0) {\r\n      let total = {\r\n        date: \"Total\",\r\n        hour: thour,\r\n      };\r\n      totalDatas.push(total);\r\n    }\r\n    totalDatas.sort((a, b) => (a.date > b.date ? 1 : b.date > a.date ? -1 : 0));\r\n\r\n    return (\r\n      <MDBContainer>\r\n        <div className=\"pt-5 text-center text-dark\">\r\n          <h1 className=\"mt-3\">DAILY TIME RECORD (DTR)</h1>\r\n        </div>\r\n        <MDBRow>\r\n          <MDBCol>\r\n            <div className=\"row lex align-items-center justify-content-center\">\r\n              <MDBCol className=\"autocomplete ncard\">\r\n                <Autocomplete\r\n                  getItemValue={(item) => item.label}\r\n                  items={nurseAutoList}\r\n                  inputProps={{ placeholder: \"Select Nurses\" }}\r\n                  renderItem={(item, isHighlighted) => (\r\n                    <div\r\n                      style={{\r\n                        background: isHighlighted ? \"#2E86C1\" : \"white\",\r\n                        color: isHighlighted ? \"white\" : \"black\",\r\n                        borderRadius: \"1px\",\r\n                        backgroundColor: \"white\",\r\n                        fontSize: \"15px\",\r\n                        fontFamily: \"Arial\",\r\n                      }}\r\n                    >\r\n                      {item.label}\r\n                    </div>\r\n                  )}\r\n                  value={selNurseValue}\r\n                  onChange={(e) => this.onChangeNurse(e)}\r\n                  onSelect={(val, item) => this.OnSelectNurse(val, item)}\r\n                />\r\n              </MDBCol>\r\n              <MDBCol className=\"autocomplete ncard\">\r\n                <Autocomplete\r\n                  getItemValue={(item) => item.label}\r\n                  items={patientAutoList}\r\n                  inputProps={{ placeholder: \"Select Patients\" }}\r\n                  renderItem={(item, isHighlighted) => (\r\n                    <div\r\n                      style={{\r\n                        background: isHighlighted ? \"#2E86C1\" : \"white\",\r\n                        color: isHighlighted ? \"white\" : \"black\",\r\n                        borderRadius: \"1px\",\r\n                        backgroundColor: \"white\",\r\n                        fontSize: \"15px\",\r\n                        fontFamily: \"Arial\",\r\n                      }}\r\n                    >\r\n                      {item.label}\r\n                    </div>\r\n                  )}\r\n                  value={selPatientValue}\r\n                  onChange={(e) => this.onChangePatient(e)}\r\n                  onSelect={(val, item) => this.onSelectPatient(val, item)}\r\n                />\r\n              </MDBCol>\r\n              <MDBCol>\r\n                <Form.Group>\r\n                  <Form.Control\r\n                    type=\"date\"\r\n                    value={from}\r\n                    max={to}\r\n                    onChange={(e) => this.setDate(\"from\", e)}\r\n                  />\r\n                </Form.Group>\r\n              </MDBCol>\r\n              <MDBCol>\r\n                <Form.Group>\r\n                  <Form.Control\r\n                    type=\"date\"\r\n                    value={to}\r\n                    min={from}\r\n                    onChange={(e) => this.setDate(\"to\", e)}\r\n                  />\r\n                </Form.Group>\r\n              </MDBCol>\r\n              <MDBCol>\r\n                <CSVLink\r\n                  headers={headers}\r\n                  data={totalDatas}\r\n                  filename={\"dtr.csv\"}\r\n                  className=\"btn btn-success \"\r\n                  target=\"_blank\"\r\n                >\r\n                  <IoMdDownload />\r\n                  Export\r\n                </CSVLink>\r\n              </MDBCol>\r\n            </div>\r\n            <div className=\"p-2\">\r\n              <DataTable\r\n                columns={totalColumns}\r\n                data={totalDatas}\r\n                striped\r\n                fixedHeader\r\n                fixedHeaderScrollHeight={\"60vh\"}\r\n              />\r\n            </div>\r\n          </MDBCol>\r\n        </MDBRow>\r\n      </MDBContainer>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (BasicData) => ({\r\n  basic: BasicData.BasicData,\r\n});\r\nexport default connect(mapStateToProps, null)(DTR);\r\n"],"names":["DTR","props","setDate","target","e","setState","state","value","onChangeNurse","selNurse","selNurseValue","OnSelectNurse","val","item","key","onChangePatient","selPatient","selPatientValue","onSelectPatient","date","Date","year","getFullYear","month","getMonth","day","getDate","type","from","to","basic","this","totalColumns","totalDatas","push","name","center","wrap","sortable","selector","row","width","patient","duty_start","duty_end","hour","dates","d","dateFormat","nurseList","nurseAutoList","nurses","map","nurse","_id","includes","label","patientList","patientAutoList","patients","leavedays","thour","leaves","leave","leavefrom","leaveto","betweenDay","between","toISOString","slice","rota","patient_id","total","sort","a","b","className","getItemValue","items","inputProps","placeholder","renderItem","isHighlighted","style","background","color","borderRadius","backgroundColor","fontSize","fontFamily","onChange","onSelect","max","min","CSVLink","headers","data","filename","columns","striped","fixedHeader","fixedHeaderScrollHeight","Component","connect","BasicData"],"sourceRoot":""}