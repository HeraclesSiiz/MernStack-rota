{"version":3,"file":"static/js/982.a7b60df3.chunk.js","mappings":"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","sources":["pages/revenue.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport { MDBCol, MDBContainer, MDBRow, MDBBtn } from \"mdb-react-ui-kit\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport toastr from \"toastr\";\r\nimport \"toastr/build/toastr.min.css\";\r\nimport { read, utils } from \"xlsx\";\r\nimport axios from \"../config/server.config\";\r\nimport { pAllUpd } from \"../store/Actions/BasicAction\";\r\nimport history from \"../history\";\r\n\r\nclass Revenue extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let date = new Date();\r\n    let year = date.getFullYear();\r\n\r\n    this.state = {\r\n      selYear: year,\r\n      file: \"\",\r\n    };\r\n  }\r\n  componentDidMount() {}\r\n\r\n  onImportPatients = (e) => {\r\n    const files = e.target.files;\r\n    if (files.length) {\r\n      const file = files[0];\r\n      this.setState({\r\n        ...this.state,\r\n        file: file,\r\n      });\r\n    }\r\n  };\r\n  submit = () => {\r\n    var _self = this;\r\n    if (this.state.file) {\r\n      const reader = new FileReader();\r\n      reader.onload = (event) => {\r\n        const wb = read(event.target.result);\r\n        const sheets = wb.SheetNames;\r\n        let revenueSheet = sheets.indexOf(\"Revenue\");\r\n        if (revenueSheet != -1) {\r\n          const rows = utils.sheet_to_json(wb.Sheets[sheets[revenueSheet]]);\r\n          axios\r\n            .post(\"patient/import\", {\r\n              importData: rows,\r\n            })\r\n            .then(function (response) {\r\n              let notFound = response.data.notFound;\r\n              let data = response.data;\r\n              if (notFound.length != 0) {\r\n                toastr.warning(\r\n                  \"Not Found These Patients:\" + notFound.join(\",\")\r\n                );\r\n              }\r\n              _self.props.getImportData(data);\r\n            })\r\n            .catch(function (error) {});\r\n        }\r\n      };\r\n      reader.readAsArrayBuffer(this.state.file);\r\n    } else {\r\n      toastr.info(\"Please select import file!\");\r\n    }\r\n  };\r\n  onChangeYear = (e) => {\r\n    this.setState({\r\n      ...this.state,\r\n      selYear: e.target.value,\r\n    });\r\n  };\r\n  getTotals(data, key) {\r\n    let total = 0;\r\n    data.forEach((item) => {\r\n      total += item[key] ? item[key] : 0;\r\n    });\r\n    return total;\r\n  }\r\n\r\n  swap(json) {\r\n    let ret = [];\r\n    for (var key in json) {\r\n      ret[json[key]] = key;\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  render() {\r\n    const { selYear } = this.state;\r\n    const { basic } = this.props;\r\n    const { user } = this.props.basic;\r\n    \r\n    if(!user.role && user.role === 0){\r\n      history.push(\"/\");\r\n      history.go(\"/\");\r\n    }\r\n\r\n    let monthNames = basic.monthNames;\r\n    let monthNumbers = this.swap(monthNames);\r\n\r\n    let revenueColumns = [];\r\n    revenueColumns.push({\r\n      name: \"Revenue\",\r\n      center: true,\r\n      wrap: true,\r\n      selector: (row) => row.patient,\r\n    });\r\n    for (let month in monthNames) {\r\n      revenueColumns.push({\r\n        name: month,\r\n        center: true,\r\n        wrap: true,\r\n        width: \"75px\",\r\n        selector: (row) => (row[month] ? row[month].toLocaleString(\"en\") : \"\"),\r\n      });\r\n    }\r\n    revenueColumns.push({\r\n      name: \"Total\",\r\n      center: true,\r\n      wrap: true,\r\n      selector: (row) => (row.total ? row.total.toLocaleString(\"en\") : \"\"),\r\n    });\r\n\r\n    let revenueDatas = [];\r\n\r\n    basic.patients.map((patient) => {\r\n      let row = [];\r\n      let total = 0;\r\n      row[\"patient\"] = patient.name;\r\n      if (patient.revenue != undefined) {\r\n        for (let month in patient.revenue) {\r\n          if (month.slice(4, 6) == selYear % 100) {\r\n            let monthName = month.slice(0, 3);\r\n            row[monthName] = patient.revenue[month];\r\n            total += patient.revenue[month];\r\n          }\r\n        }\r\n      }\r\n      row[\"total\"] = total;\r\n      revenueDatas.push(row);\r\n    });\r\n\r\n    let total = {\r\n      patient: \"Total\",\r\n    };\r\n    for (let month in monthNames) {\r\n      total[month] = this.getTotals(revenueDatas, month);\r\n    }\r\n    total[\"total\"] = this.getTotals(revenueDatas, \"total\");\r\n    revenueDatas.push(total);\r\n\r\n    const conditionalRowStyles = [\r\n      {\r\n        when: (row) => row.patient == \"total\",\r\n        style: (row) => ({\r\n          backgroundColor: \"rgb(160,160,160)\",\r\n        }),\r\n      },\r\n    ];\r\n    revenueDatas.sort((a, b) =>\r\n      a.name > b.name ? 1 : b.name > a.name ? -1 : 0\r\n    );\r\n\r\n    return (\r\n      <MDBContainer>\r\n        <div className=\"pt-5 text-center text-dark\">\r\n          <h1 className=\"mt-3\">REVENUE</h1>\r\n        </div>\r\n        <MDBRow className=\" align-items-center justify-content-center\">\r\n          <MDBCol md=\"2\">\r\n            <Form.Group>\r\n              <Form.Control\r\n                type=\"number\"\r\n                value={selYear}\r\n                placeholder=\"Year\"\r\n                onChange={(e) => this.onChangeYear(e)}\r\n              />\r\n            </Form.Group>\r\n          </MDBCol>\r\n          <MDBCol md=\"3\">\r\n            <Form.Group controlId=\"ImageInput\">\r\n              <Form.Control\r\n                type=\"file\"\r\n                accept=\".xlsx\"\r\n                onChange={(e) => this.onImportPatients(e, this)}\r\n              />\r\n            </Form.Group>\r\n          </MDBCol>\r\n          <MDBCol md=\"2\">\r\n            <MDBBtn\r\n              outline\r\n              rounded\r\n              color=\"success\"\r\n              onClick={() => this.submit()}\r\n            >\r\n              SUBMIT\r\n            </MDBBtn>\r\n          </MDBCol>\r\n        </MDBRow>\r\n        <MDBRow className=\"mt-2\">\r\n          <DataTable\r\n            columns={revenueColumns}\r\n            data={revenueDatas}\r\n            fixedHeader\r\n            striped\r\n            conditionalRowStyles={conditionalRowStyles}\r\n            fixedHeaderScrollHeight={\"60vh\"}\r\n            pagination\r\n          />\r\n        </MDBRow>\r\n      </MDBContainer>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  getImportData: (data) => dispatch(pAllUpd(data)),\r\n});\r\n\r\nconst mapStateToProps = (BasicData) => ({\r\n  basic: BasicData.BasicData,\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Revenue);\r\n"],"names":["Revenue","props","onImportPatients","e","files","target","length","file","setState","state","submit","_self","reader","FileReader","onload","event","wb","read","result","sheets","SheetNames","revenueSheet","indexOf","rows","utils","Sheets","axios","importData","then","response","notFound","data","toastr","join","getImportData","catch","error","readAsArrayBuffer","onChangeYear","selYear","value","year","Date","getFullYear","key","total","forEach","item","json","ret","this","basic","user","role","history","monthNames","revenueColumns","swap","push","name","center","wrap","selector","row","patient","month","width","toLocaleString","revenueDatas","patients","map","undefined","revenue","slice","getTotals","sort","a","b","className","md","type","placeholder","onChange","controlId","accept","outline","rounded","color","onClick","columns","fixedHeader","striped","conditionalRowStyles","when","style","backgroundColor","fixedHeaderScrollHeight","pagination","Component","connect","BasicData","dispatch","pAllUpd"],"sourceRoot":""}