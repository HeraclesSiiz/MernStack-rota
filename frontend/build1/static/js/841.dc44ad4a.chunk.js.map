{"version":3,"file":"static/js/841.dc44ad4a.chunk.js","mappings":"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","sources":["pages/working.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport { MDBCol, MDBContainer, MDBRow } from \"mdb-react-ui-kit\";\r\nimport { IoMdDownload } from \"react-icons/io\";\r\nimport { CSVLink } from \"react-csv\";\r\nimport { Form } from \"react-bootstrap\";\r\n\r\nclass WorkingDays extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let date = new Date();\r\n    let year = date.getFullYear();\r\n\r\n    this.state = {\r\n      selYear: year,\r\n    };\r\n  }\r\n  onChangeYear = (e) => {\r\n    this.setState({\r\n      ...this.state,\r\n      selYear: e.target.value,\r\n    });\r\n  };\r\n  swap(json) {\r\n    let ret = [];\r\n    for (var key in json) {\r\n      ret[json[key]] = key;\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  render() {\r\n    const { selYear } = this.state;\r\n    const { basic } = this.props;\r\n\r\n    const workingColumns = [\r\n      {\r\n        name: \"Month\",\r\n        center: true,\r\n        wrap: true,\r\n        width: \"100px\",\r\n        selector: (row) => row.month,\r\n      },\r\n      {\r\n        name: \"Days\",\r\n        center: true,\r\n        wrap: true,\r\n        width: \"100px\",\r\n        selector: (row) => row.days,\r\n      },\r\n      {\r\n        name: \"Sundays\",\r\n        center: true,\r\n        selector: (row) => row.sundays,\r\n      },\r\n      {\r\n        name: \"Holidays\",\r\n        center: true,\r\n        wrap: true,\r\n        width: \"100px\",\r\n        selector: (row) => row.holidays,\r\n      },\r\n      {\r\n        name: \"Net Working Days\",\r\n        center: true,\r\n        selector: (row) => row.workingdays,\r\n      },\r\n      {\r\n        name: \"daily Hours\",\r\n        center: true,\r\n        wrap: true,\r\n        selector: (row) => row.hours,\r\n      },\r\n      {\r\n        name: \"Total Hours available\",\r\n        center: true,\r\n        wrap: true,\r\n        selector: (row) => row.totalhours,\r\n      },\r\n    ];\r\n\r\n    let monthNames = basic.monthNames;\r\n    let monthNumbers = this.swap(monthNames);\r\n\r\n    let workingDatas = [];\r\n\r\n    let holidays = basic.holidays;\r\n    let headers = [\r\n      { label: \"Month\", key: \"month\" },\r\n      { label: \"Days\", key: \"days\" },\r\n      { label: \"Sundays\", key: \"sundays\" },\r\n      { label: \"Holidays\", key: \"holidays\" },\r\n      { label: \"Net Working Days\", key: \"workingdays\" },\r\n      { label: \"daily Hours\", key: \"hours\" },\r\n      { label: \"Total Hours available\", key: \"totalhours\" },\r\n    ];\r\n\r\n    let holidaysPerMonth = [];\r\n    let sundaysPerMonth = [];\r\n    //get holidays per month\r\n    holidays.map((holiday) => {\r\n      let key = monthNumbers[holiday.slice(0, 2)];\r\n      if (holidaysPerMonth[key] == undefined) {\r\n        holidaysPerMonth[key] = [];\r\n      }\r\n      holidaysPerMonth[key].push(selYear + \"-\" + holiday);\r\n    });\r\n    //get sundays per month\r\n    for (let selMonth in monthNumbers) {\r\n      let daysInMonth = new Date(selYear, selMonth, 0).getDate();\r\n      let date = selYear + \"-\" + selMonth + \"-01\";\r\n      let firstDate = new Date(date).getDay();\r\n      if (firstDate == 0) {\r\n        firstDate = 1;\r\n      } else {\r\n        firstDate = 7 - firstDate + 1;\r\n      }\r\n      for (let selDay = firstDate; selDay < daysInMonth; selDay += 7) {\r\n        let day = selDay > 9 ? selDay : \"0\" + selDay;\r\n\r\n        let key = monthNumbers[selMonth];\r\n        if (sundaysPerMonth[key] == undefined) {\r\n          sundaysPerMonth[key] = [];\r\n        }\r\n        sundaysPerMonth[key].push(selYear + \"-\" + selMonth + \"-\" + day);\r\n      }\r\n    }\r\n    //datatable set\r\n    for (let selMonth in monthNames) {\r\n      let daysInMonth = new Date(selYear, monthNames[selMonth], 0).getDate();\r\n      if (holidaysPerMonth[selMonth] == undefined) {\r\n        holidaysPerMonth[selMonth] = [];\r\n      }\r\n      if (sundaysPerMonth[selMonth] == undefined) {\r\n        sundaysPerMonth[selMonth] = [];\r\n      }\r\n\r\n      let offDays = [\r\n        ...holidaysPerMonth[selMonth],\r\n        ...sundaysPerMonth[selMonth],\r\n      ];\r\n      offDays = [...new Set(offDays)];\r\n      let row = {\r\n        month: selMonth,\r\n        days: daysInMonth,\r\n        sundays: sundaysPerMonth[selMonth].length,\r\n        holidays: holidaysPerMonth[selMonth].length,\r\n        workingdays: daysInMonth - offDays.length,\r\n        hours: 8,\r\n        totalhours: 8 * (daysInMonth - offDays.length),\r\n      };\r\n\r\n      workingDatas.push(row);\r\n    }\r\n\r\n    return (\r\n      <MDBContainer>\r\n        <div className=\"pt-5 text-center text-dark\">\r\n          <h1 className=\"mt-3\">WORKING DAYS</h1>\r\n        </div>\r\n        <MDBRow className=\" align-items-center justify-content-center\">\r\n          <MDBCol md=\"2\">\r\n            <Form.Group>\r\n              <Form.Control\r\n                type=\"number\"\r\n                value={selYear}\r\n                placeholder=\"Year\"\r\n                onChange={(e) => this.onChangeYear(e)}\r\n              />\r\n            </Form.Group>\r\n          </MDBCol>\r\n          <MDBCol md=\"2\">\r\n            <CSVLink\r\n              headers={headers}\r\n              data={workingDatas}\r\n              filename={\"working.csv\"}\r\n              className=\"btn btn-success \"\r\n              target=\"_blank\"\r\n            >\r\n              <IoMdDownload />\r\n              Export\r\n            </CSVLink>\r\n          </MDBCol>\r\n        </MDBRow>\r\n\r\n        <MDBRow className=\"mt-2 workingTable\">\r\n          <DataTable\r\n            columns={workingColumns}\r\n            data={workingDatas}\r\n            fixedHeader\r\n            fixedHeaderScrollHeight={\"120vh\"}\r\n            striped\r\n          />\r\n        </MDBRow>\r\n      </MDBContainer>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (BasicData) => ({\r\n  basic: BasicData.BasicData,\r\n});\r\nexport default connect(mapStateToProps, null)(WorkingDays);\r\n"],"names":["WorkingDays","props","onChangeYear","e","setState","state","selYear","target","value","year","Date","getFullYear","json","ret","key","this","basic","monthNames","monthNumbers","swap","workingDatas","holidays","holidaysPerMonth","sundaysPerMonth","selMonth","map","holiday","slice","undefined","push","daysInMonth","getDate","firstDate","getDay","selDay","day","offDays","Set","row","month","days","sundays","length","workingdays","hours","totalhours","className","md","type","placeholder","onChange","CSVLink","headers","label","data","filename","columns","name","center","wrap","width","selector","fixedHeader","fixedHeaderScrollHeight","striped","Component","connect","BasicData"],"sourceRoot":""}