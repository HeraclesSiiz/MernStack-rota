{"version":3,"file":"static/js/900.cbb6866e.chunk.js","mappings":"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","sources":["pages/dashboard.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./../css/App.css\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  MDBCol,\r\n  MDBContainer,\r\n  MDBRow,\r\n  MDBCard,\r\n  MDBCardBody,\r\n  MDBCardImage,\r\n  MDBCardTitle,\r\n  MDBProgress,\r\n  MDBProgressBar,\r\n} from \"mdb-react-ui-kit\";\r\nimport { Form } from \"react-bootstrap\";\r\n\r\nimport { CChart } from \"@coreui/react-chartjs\";\r\n\r\nclass DashBoard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let date = new Date();\r\n    let year = date.getFullYear();\r\n    let month =\r\n      date.getMonth() + 1 > 9\r\n        ? date.getMonth() + 1\r\n        : \"0\" + (date.getMonth() + 1);\r\n\r\n    this.state = {\r\n      selYear: year,\r\n      selMonth: month,\r\n    };\r\n  }\r\n  componentDidMount() {}\r\n\r\n  onChangeYear = (e) => {\r\n    this.setState({\r\n      ...this.state,\r\n      selYear: e.target.value,\r\n    });\r\n  };\r\n\r\n  onChangeMonth = (e) => {\r\n    this.setState({\r\n      ...this.state,\r\n      selMonth: e.target.value,\r\n    });\r\n  };\r\n\r\n  swap(json) {\r\n    let ret = [];\r\n    for (var key in json) {\r\n      ret[json[key]] = key;\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  render() {\r\n    const { selYear, selMonth } = this.state;\r\n    const { basic } = this.props;\r\n\r\n    let nurseDatas = [\r\n      {\r\n        members: 0,\r\n        available: 0,\r\n        assigned: 0,\r\n        overtime: 0,\r\n        utilization: 0,\r\n      },\r\n      {\r\n        members: 0,\r\n        available: 0,\r\n        assigned: 0,\r\n        overtime: 0,\r\n        utilization: 0,\r\n      },\r\n      {\r\n        members: 0,\r\n        available: 0,\r\n        assigned: 0,\r\n        overtime: 0,\r\n        utilization: 0,\r\n      },\r\n    ];\r\n\r\n    let monthNames = basic.monthNames;\r\n    let monthNumbers = this.swap(monthNames);\r\n\r\n    let Mon = Object.keys(monthNames);\r\n    let NoMon = Object.values(monthNames);\r\n\r\n    const MonthSelect = Mon.map((month, index) => (\r\n      <option key={index} value={NoMon[index]}>{month}</option>\r\n    ));\r\n\r\n    let daysInMonth = new Date(selYear, selMonth, 0).getDate();\r\n    let from = selYear + \"-\" + selMonth + \"-01\";\r\n    let to = selYear + \"-\" + selMonth + \"-\" + daysInMonth;\r\n\r\n    //get holidays per month\r\n    let holidays = basic.holidays;\r\n    let holidaysInMonth = [];\r\n    let holidaysPerMonth = [];\r\n\r\n    holidays.map((holiday) => {\r\n      let key = monthNumbers[holiday.slice(0, 2)];\r\n      if (holidaysPerMonth[key] == undefined) {\r\n        holidaysPerMonth[key] = [];\r\n      }\r\n      holidaysPerMonth[key].push(selYear + \"-\" + holiday);\r\n\r\n      if (parseInt(holiday.slice(0, 2)) == selMonth) {\r\n        holidaysInMonth.push(selYear + \"-\" + holiday);\r\n      }\r\n    });\r\n\r\n    //get sundays in month\r\n    let SundaysInMonth = [];\r\n\r\n    let date = selYear + \"-\" + selMonth + \"-01\";\r\n    let firstDate = new Date(date).getDay();\r\n    if (firstDate == 0) {\r\n      firstDate = 7;\r\n    }\r\n    for (let selDay = firstDate; selDay < daysInMonth; selDay += 7) {\r\n      let day = selDay > 9 ? selDay : \"0\" + selDay;\r\n      SundaysInMonth.push(selYear + \"-\" + selMonth + \"-\" + day);\r\n    }\r\n\r\n    //get sundays per month\r\n    let sundaysPerMonth = [];\r\n    for (let loopMonth in monthNumbers) {\r\n      let daysInMonth = new Date(selYear, loopMonth, 0).getDate();\r\n      let date = selYear + \"-\" + loopMonth + \"-01\";\r\n      let firstDate = new Date(date).getDay();\r\n      if (firstDate == 0) {\r\n        firstDate = 1;\r\n      } else {\r\n        firstDate = 7 - firstDate + 1;\r\n      }\r\n      for (let selDay = firstDate; selDay < daysInMonth; selDay += 7) {\r\n        let day = selDay > 9 ? selDay : \"0\" + selDay;\r\n        let key = monthNumbers[loopMonth];\r\n        if (sundaysPerMonth[key] == undefined) {\r\n          sundaysPerMonth[key] = [];\r\n        }\r\n        sundaysPerMonth[key].push(selYear + \"-\" + loopMonth + \"-\" + day);\r\n      }\r\n    }\r\n\r\n    //get payroll\r\n    let payrollPerMonth = [];\r\n    let payrollPerPatient = [];\r\n    let payrollHourly = [];\r\n\r\n    //get average duty hour\r\n    let rotaHourPerMonth = [];\r\n    let rotaHourPerDay = [];\r\n\r\n    rotaHourPerMonth[0] = [];\r\n    rotaHourPerMonth[1] = [];\r\n    rotaHourPerMonth[2] = [];\r\n    rotaHourPerDay[0] = [];\r\n    rotaHourPerDay[1] = [];\r\n    rotaHourPerDay[2] = [];\r\n\r\n    basic.nurses.map((nurse) => {\r\n      let salary =\r\n        nurse.basic_allowances +\r\n        nurse.housing_allowances +\r\n        nurse.other_allowances;\r\n      let nurseLevel = nurse.level;\r\n\r\n      nurseDatas[nurseLevel].members++;\r\n      nurseDatas[2].members++;\r\n\r\n      let rotas = nurse.rota;\r\n      let rotaPerMonth = [];\r\n      let rotaHolidayPerMonth = [];\r\n\r\n      rotas.map((rota) => {\r\n        if (rota.date >= from && rota.date <= to) {\r\n          nurseDatas[nurseLevel].assigned += rota.hour * 1;\r\n          nurseDatas[2].assigned += rota.hour * 1;\r\n        }\r\n        if (rota.date.startsWith(selYear)) {\r\n          let monthnum = parseInt(rota.date.slice(5, 7));\r\n          let month = monthNumbers[[rota.date.slice(5, 7)]];\r\n          let day = parseInt(rota.date.slice(8, 10));\r\n          if (rotaPerMonth[month] == undefined) {\r\n            rotaPerMonth[month] = rota.hour;\r\n          } else {\r\n            rotaPerMonth[month] += rota.hour;\r\n          }\r\n\r\n          if (rotaHourPerMonth[nurseLevel][monthnum] == undefined) {\r\n            rotaHourPerMonth[nurseLevel][monthnum] = rota.hour;\r\n          } else {\r\n            rotaHourPerMonth[nurseLevel][monthnum] += rota.hour;\r\n          }\r\n          if (rotaHourPerMonth[2][monthnum] == undefined) {\r\n            rotaHourPerMonth[2][monthnum] = rota.hour;\r\n          } else {\r\n            rotaHourPerMonth[2][monthnum] += rota.hour;\r\n          }\r\n\r\n          if (rota.date.startsWith(selYear + \"-\" + selMonth)) {\r\n            if (rotaHourPerDay[nurseLevel][day] == undefined) {\r\n              rotaHourPerDay[nurseLevel][day] = rota.hour;\r\n            } else {\r\n              rotaHourPerDay[nurseLevel][day] += rota.hour;\r\n            }\r\n            if (rotaHourPerDay[2][day] == undefined) {\r\n              rotaHourPerDay[2][day] = rota.hour;\r\n            } else {\r\n              rotaHourPerDay[2][day] += rota.hour;\r\n            }\r\n          }\r\n\r\n          if (\r\n            holidaysPerMonth[month] != undefined &&\r\n            holidaysPerMonth[month].includes(rota.date)\r\n          ) {\r\n            if (rotaHolidayPerMonth[month] == undefined) {\r\n              rotaHolidayPerMonth[month] = rota.hour;\r\n            } else {\r\n              rotaHolidayPerMonth[month] += rota.hour;\r\n            }\r\n          }\r\n\r\n          if (rota.date.slice(5, 7) == selMonth) {\r\n            if (payrollPerPatient[rota.patient_id] == undefined) {\r\n              payrollPerPatient[rota.patient_id] = [];\r\n            }\r\n            if (payrollPerPatient[rota.patient_id][nurse._id] == undefined) {\r\n              payrollPerPatient[rota.patient_id][nurse._id] = rota.hour;\r\n            } else {\r\n              payrollPerPatient[rota.patient_id][nurse._id] += rota.hour;\r\n            }\r\n          }\r\n        }\r\n      });\r\n\r\n      //get leavedays per month\r\n      let leaves = nurse.leave;\r\n      let leavedaysPerMonth = [];\r\n\r\n      for (let leave of leaves) {\r\n        let from = new Date(leave.from);\r\n        let to = new Date(leave.to);\r\n        for (let betweenDay = from; betweenDay <= to; ) {\r\n          let year = betweenDay.getFullYear();\r\n          let month =\r\n            betweenDay.getMonth() + 1 > 9\r\n              ? betweenDay.getMonth() + 1\r\n              : \"0\" + (betweenDay.getMonth() + 1);\r\n          let day =\r\n            betweenDay.getDate() > 9\r\n              ? betweenDay.getDate()\r\n              : \"0\" + betweenDay.getDate();\r\n          if (year == selYear && month == selMonth) {\r\n            leavedaysPerMonth.push(year + \"-\" + month + \"-\" + day);\r\n          }\r\n          if (year == selYear) {\r\n            let key = monthNumbers[month];\r\n            if (leavedaysPerMonth[key] == undefined) {\r\n              leavedaysPerMonth[key] = [];\r\n            }\r\n            leavedaysPerMonth[key].push(year + \"-\" + month + \"-\" + day);\r\n          }\r\n\r\n          betweenDay.setDate(betweenDay.getDate() + 1);\r\n        }\r\n      }\r\n\r\n      let offdays = [\r\n        ...leavedaysPerMonth,\r\n        ...holidaysInMonth,\r\n        ...SundaysInMonth,\r\n      ];\r\n      offdays = [...new Set(offdays)];\r\n      nurseDatas[nurseLevel].available += (daysInMonth - offdays.length) * 8;\r\n      nurseDatas[2].available += (daysInMonth - offdays.length) * 8;\r\n\r\n      //datatable set\r\n      let offDaysPerMonth = [];\r\n      let dutyHoursPerMonth = [];\r\n      for (let loopMonth in monthNames) {\r\n        let daysInMonth = new Date(selYear, monthNames[loopMonth], 0).getDate();\r\n        if (leavedaysPerMonth[loopMonth] == undefined) {\r\n          leavedaysPerMonth[loopMonth] = [];\r\n        }\r\n        if (holidaysPerMonth[loopMonth] == undefined) {\r\n          holidaysPerMonth[loopMonth] = [];\r\n        }\r\n        if (sundaysPerMonth[loopMonth] == undefined) {\r\n          sundaysPerMonth[loopMonth] = [];\r\n        }\r\n\r\n        offDaysPerMonth[loopMonth] = [\r\n          ...leavedaysPerMonth[loopMonth],\r\n          ...holidaysPerMonth[loopMonth],\r\n          ...sundaysPerMonth[loopMonth],\r\n        ];\r\n        offDaysPerMonth[loopMonth] = [...new Set(offDaysPerMonth[loopMonth])];\r\n        dutyHoursPerMonth[loopMonth] =\r\n          (daysInMonth - offDaysPerMonth[loopMonth].length) * 8;\r\n\r\n        if (rotaPerMonth[loopMonth] == undefined) {\r\n          rotaPerMonth[loopMonth] = 0;\r\n        }\r\n        if (rotaHolidayPerMonth[loopMonth] == undefined) {\r\n          rotaHolidayPerMonth[loopMonth] = 0;\r\n        }\r\n        if (payrollPerMonth[loopMonth] == undefined) {\r\n          payrollPerMonth[loopMonth] = 0;\r\n        }\r\n\r\n        if (rotaPerMonth[loopMonth]) {\r\n          let basicPerDay = parseFloat((nurse.basic_allowances * 15) / 365 / 8);\r\n          let holidayPerDay = parseFloat(\r\n            (nurse.basic_allowances * 18) / 365 / 8\r\n          );\r\n          let reducePerDay = parseFloat((salary * 12) / 365);\r\n\r\n          if (\r\n            dutyHoursPerMonth[loopMonth] < rotaPerMonth[loopMonth]\r\n            //  && rotaPerMonth[loopMonth] >= 192\r\n          ) {\r\n            let overtime =\r\n              rotaPerMonth[loopMonth] - dutyHoursPerMonth[loopMonth];\r\n            let holidayovertime = 0;\r\n\r\n            if (rotaHolidayPerMonth[loopMonth] != undefined) {\r\n              if (overtime <= rotaHolidayPerMonth[loopMonth]) {\r\n                holidayovertime = overtime;\r\n                overtime = 0;\r\n              } else {\r\n                overtime -= rotaHolidayPerMonth[loopMonth];\r\n                holidayovertime = rotaHolidayPerMonth[loopMonth];\r\n              }\r\n            }\r\n            salary += parseInt(\r\n              basicPerDay * overtime + holidayPerDay * holidayovertime\r\n            );\r\n          }\r\n\r\n          if (selYear == parseInt(nurse.date.slice(0, 4))) {\r\n            let joined = nurse.date;\r\n            if (monthNames[loopMonth] < joined.slice(5, 7)) {\r\n              salary = 0;\r\n            } else if (monthNames[loopMonth] == joined.slice(5, 7)) {\r\n              salary =\r\n                salary -\r\n                parseInt(reducePerDay * (parseInt(joined.slice(8, 10)) - 1));\r\n            }\r\n          } else if (selYear < parseInt(nurse.date.slice(0, 4))) {\r\n            salary = 0;\r\n          }\r\n          payrollPerMonth[loopMonth] += salary;\r\n          if (monthNames[loopMonth] == selMonth) {\r\n            payrollHourly[nurse._id] = parseFloat(\r\n              salary / rotaPerMonth[loopMonth]\r\n            );\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    nurseDatas.map((nurseData) => {\r\n      nurseData.overtime = nurseData.assigned * 1 - nurseData.available * 1;\r\n      if (nurseData.available * 1 == 0) {\r\n        nurseData.utilization = 0;\r\n      } else {\r\n        nurseData.utilization = parseInt(\r\n          ((nurseData.assigned * 1) / nurseData.available) * 1 * 100\r\n        );\r\n      }\r\n    });\r\n\r\n    let revenue = [];\r\n    basic.patients.map((patient) => {\r\n      for (let month in patient.revenue) {\r\n        if (month.slice(4, 6) == selYear % 100) {\r\n          let m = month.slice(0, 3);\r\n          revenue[m] == undefined\r\n            ? (revenue[m] = patient.revenue[month])\r\n            : (revenue[m] += patient.revenue[month]);\r\n        }\r\n      }\r\n    });\r\n\r\n    let pnlDatas = [],\r\n      revenueDatas = [],\r\n      payrollDatas = [];\r\n    for (let month in monthNames) {\r\n      if (revenue[month] == undefined) {\r\n        revenue[month] = 0;\r\n      }\r\n      if (payrollPerMonth[month] == undefined) {\r\n        payrollPerMonth[month] = 0;\r\n      }\r\n\r\n      revenueDatas.push(revenue[month]);\r\n      payrollDatas.push(payrollPerMonth[month]);\r\n      pnlDatas.push(revenue[month] - payrollPerMonth[month]);\r\n    }\r\n\r\n    let days = [];\r\n    for (let j = 0; j < 3; j++) {\r\n      for (let i = 1; i <= daysInMonth; i++) {\r\n        if (j == 0) {\r\n          days.push(i);\r\n        }\r\n        if (rotaHourPerDay[j][i] == undefined) {\r\n          rotaHourPerDay[j][i] = 0;\r\n        }\r\n        rotaHourPerDay[j][i] = parseFloat(\r\n          rotaHourPerDay[j][i] / nurseDatas[j].members\r\n        ).toFixed(2);\r\n      }\r\n      for (let i = 1; i <= 12; i++) {\r\n        if (rotaHourPerMonth[j][i] == undefined) {\r\n          rotaHourPerMonth[j][i] = 0;\r\n        }\r\n        rotaHourPerMonth[j][i] = parseFloat(\r\n          rotaHourPerMonth[j][i] / nurseDatas[j].members\r\n        ).toFixed(2);\r\n      }\r\n      rotaHourPerDay[j].splice(0, 1);\r\n      rotaHourPerMonth[j].splice(0, 1);\r\n    }\r\n\r\n    return (\r\n      <MDBContainer>\r\n        <MDBRow className=\"pt-5 mt-3 align-items-center justify-content-center\">\r\n          <MDBCol md=\"2\">\r\n            <Form.Group>\r\n              <Form.Control\r\n                type=\"number\"\r\n                value={selYear}\r\n                placeholder=\"Year\"\r\n                min={2022}\r\n                max={new Date().getFullYear() + 1}\r\n                onChange={(e) => this.onChangeYear(e)}\r\n              />\r\n            </Form.Group>\r\n          </MDBCol>\r\n          <MDBCol md=\"2\">\r\n            <Form.Group>\r\n              <Form.Select\r\n                aria-label=\"select\"\r\n                value={selMonth}\r\n                onChange={(e) => this.onChangeMonth(e)}\r\n              >\r\n                {MonthSelect}\r\n              </Form.Select>\r\n            </Form.Group>\r\n          </MDBCol>\r\n        </MDBRow>\r\n\r\n        <MDBRow className=\"mt-3\">\r\n          <MDBCol>\r\n            <MDBCard>\r\n              <MDBCardImage\r\n                src=\"https://884863.smushcdn.com/2024606/wp-content/uploads/2006/10/outfit_nurse_clothes_attire_work.jpg?lossy=1&strip=1&webp=1\"\r\n                alt=\"...\"\r\n                position=\"top\"\r\n              />\r\n              <MDBCardBody>\r\n                <MDBCardTitle>Members</MDBCardTitle>\r\n                <MDBProgress className=\"mb-1\" height=\"15\">\r\n                  <MDBProgressBar width=\"100\" valuemin={0} valuemax={100}>\r\n                    {nurseDatas[2].members}\r\n                  </MDBProgressBar>\r\n                </MDBProgress>\r\n                <MDBProgress height=\"15\">\r\n                  <MDBProgressBar\r\n                    bgColor=\"success\"\r\n                    width={\r\n                      nurseDatas[2].members == 0\r\n                        ? 0\r\n                        : (nurseDatas[0].members / nurseDatas[2].members) * 100\r\n                    }\r\n                    valuemin={0}\r\n                    valuemax={100}\r\n                  >\r\n                    {nurseDatas[0].members}\r\n                  </MDBProgressBar>\r\n                  <MDBProgressBar\r\n                    bgColor=\"info\"\r\n                    width={\r\n                      nurseDatas[2].members == 0\r\n                        ? 0\r\n                        : (nurseDatas[1].members / nurseDatas[2].members) * 100\r\n                    }\r\n                    valuemin={0}\r\n                    valuemax={100}\r\n                  >\r\n                    {nurseDatas[1].members}\r\n                  </MDBProgressBar>\r\n                </MDBProgress>\r\n              </MDBCardBody>\r\n            </MDBCard>\r\n          </MDBCol>\r\n          <MDBCol>\r\n            <MDBCard>\r\n              <MDBCardImage\r\n                src=\"https://upload.wikimedia.org/wikipedia/commons/c/cd/180726-time-al-1252.webp\"\r\n                alt=\"...\"\r\n                position=\"top\"\r\n              />\r\n              <MDBCardBody>\r\n                <MDBCardTitle>Available</MDBCardTitle>\r\n                <MDBProgress className=\"mb-1\" height=\"15\">\r\n                  <MDBProgressBar width=\"100\" valuemin={0} valuemax={100}>\r\n                    {nurseDatas[2].available}\r\n                  </MDBProgressBar>\r\n                </MDBProgress>\r\n                <MDBProgress height=\"15\">\r\n                  <MDBProgressBar\r\n                    bgColor=\"success\"\r\n                    width={\r\n                      nurseDatas[2].available == 0\r\n                        ? 0\r\n                        : (nurseDatas[0].available / nurseDatas[2].available) *\r\n                          100\r\n                    }\r\n                    valuemin={0}\r\n                    valuemax={100}\r\n                  >\r\n                    {nurseDatas[0].available}\r\n                  </MDBProgressBar>\r\n                  <MDBProgressBar\r\n                    bgColor=\"info\"\r\n                    width={\r\n                      nurseDatas[2].available == 0\r\n                        ? 0\r\n                        : (nurseDatas[1].available / nurseDatas[2].available) *\r\n                          100\r\n                    }\r\n                    valuemin={0}\r\n                    valuemax={100}\r\n                  >\r\n                    {nurseDatas[1].available}\r\n                  </MDBProgressBar>\r\n                </MDBProgress>\r\n              </MDBCardBody>\r\n            </MDBCard>\r\n          </MDBCol>\r\n          <MDBCol>\r\n            <MDBCard>\r\n              <MDBCardImage\r\n                src=\"https://www.gannett-cdn.com/authoring/2019/02/08/NOKL/ghnewsok-OK-5622432-19aacf4d.jpeg?width=649&height=432&fit=crop&format=pjpg&auto=webp\"\r\n                alt=\"...\"\r\n                position=\"top\"\r\n              />\r\n              <MDBCardBody>\r\n                <MDBCardTitle>Assigned</MDBCardTitle>\r\n                <MDBProgress className=\"mb-1\" height=\"15\">\r\n                  <MDBProgressBar width=\"100\" valuemin={0} valuemax={100}>\r\n                    {nurseDatas[2].assigned}\r\n                  </MDBProgressBar>\r\n                </MDBProgress>\r\n                <MDBProgress height=\"15\">\r\n                  <MDBProgressBar\r\n                    bgColor=\"success\"\r\n                    width={\r\n                      nurseDatas[2].assigned == 0\r\n                        ? 0\r\n                        : (nurseDatas[0].assigned / nurseDatas[2].assigned) *\r\n                          100\r\n                    }\r\n                    valuemin={0}\r\n                    valuemax={100}\r\n                  >\r\n                    {nurseDatas[0].assigned}\r\n                  </MDBProgressBar>\r\n                  <MDBProgressBar\r\n                    bgColor=\"info\"\r\n                    width={\r\n                      nurseDatas[2].assigned == 0\r\n                        ? 0\r\n                        : (nurseDatas[1].assigned / nurseDatas[2].assigned) *\r\n                          100\r\n                    }\r\n                    valuemin={0}\r\n                    valuemax={100}\r\n                  >\r\n                    {nurseDatas[1].assigned}\r\n                  </MDBProgressBar>\r\n                </MDBProgress>\r\n              </MDBCardBody>\r\n            </MDBCard>\r\n          </MDBCol>\r\n          <MDBCol>\r\n            <MDBCard>\r\n              <MDBCardImage\r\n                src=\"https://blog.axcethr.com/hubfs/flsa-overtime-basics-for-employers%20(1).webp\"\r\n                alt=\"...\"\r\n                position=\"top\"\r\n              />\r\n              <MDBCardBody>\r\n                <MDBCardTitle>Overtime</MDBCardTitle>\r\n                <MDBProgress className=\"mb-1\" height=\"15\">\r\n                  <MDBProgressBar width=\"100\" valuemin={0} valuemax={100}>\r\n                    {nurseDatas[2].overtime}\r\n                  </MDBProgressBar>\r\n                </MDBProgress>\r\n                <MDBProgress height=\"15\">\r\n                  <MDBProgressBar\r\n                    bgColor=\"success\"\r\n                    width={\r\n                      nurseDatas[2].overtime == 0\r\n                        ? 0\r\n                        : (nurseDatas[0].overtime / nurseDatas[2].overtime) *\r\n                          100\r\n                    }\r\n                    valuemin={0}\r\n                    valuemax={100}\r\n                  >\r\n                    {nurseDatas[0].overtime}\r\n                  </MDBProgressBar>\r\n                  <MDBProgressBar\r\n                    bgColor=\"info\"\r\n                    width={\r\n                      nurseDatas[2].overtime == 0\r\n                        ? 0\r\n                        : (nurseDatas[1].overtime / nurseDatas[2].overtime) *\r\n                          100\r\n                    }\r\n                    valuemin={0}\r\n                    valuemax={100}\r\n                  >\r\n                    {nurseDatas[1].overtime}\r\n                  </MDBProgressBar>\r\n                </MDBProgress>\r\n              </MDBCardBody>\r\n            </MDBCard>\r\n          </MDBCol>\r\n          <MDBCol>\r\n            <MDBCard>\r\n              <MDBCardImage\r\n                src=\"https://russianvagabond.com/wp-content/uploads/2020/03/Webp.net-resizeimage-207.jpg\"\r\n                alt=\"...\"\r\n                position=\"top\"\r\n              />\r\n              <MDBCardBody>\r\n                <MDBCardTitle>Utilization</MDBCardTitle>\r\n                <MDBProgress className=\"mb-1\" height=\"15\">\r\n                  <MDBProgressBar\r\n                    width={nurseDatas[2].utilization}\r\n                    valuemin={0}\r\n                    valuemax={100}\r\n                  >\r\n                    {nurseDatas[2].utilization + \"%\"}\r\n                  </MDBProgressBar>\r\n                </MDBProgress>\r\n                <MDBRow>\r\n                  <MDBCol>\r\n                    <MDBProgress>\r\n                      <MDBProgressBar\r\n                        bgColor=\"success\"\r\n                        width={nurseDatas[0].utilization}\r\n                        valuemin={0}\r\n                        valuemax={100}\r\n                      >\r\n                        {nurseDatas[0].utilization + \"%\"}\r\n                      </MDBProgressBar>\r\n                    </MDBProgress>\r\n                  </MDBCol>\r\n                  <MDBCol>\r\n                    <MDBProgress>\r\n                      <MDBProgressBar\r\n                        bgColor=\"info\"\r\n                        width={nurseDatas[1].utilization}\r\n                        valuemin={0}\r\n                        valuemax={100}\r\n                      >\r\n                        {nurseDatas[1].utilization + \"%\"}\r\n                      </MDBProgressBar>\r\n                    </MDBProgress>\r\n                  </MDBCol>\r\n                </MDBRow>\r\n              </MDBCardBody>\r\n            </MDBCard>\r\n          </MDBCol>\r\n        </MDBRow>\r\n\r\n        <MDBRow className=\"mt-2\">\r\n          <MDBCol>\r\n            <MDBProgress height=\"15\">\r\n              <MDBProgressBar\r\n                bgColor=\"primary\"\r\n                width=\"100\"\r\n                valuemin={0}\r\n                valuemax={100}\r\n              >\r\n                Total/Average\r\n              </MDBProgressBar>\r\n            </MDBProgress>\r\n          </MDBCol>\r\n          <MDBCol>\r\n            <MDBProgress height=\"15\">\r\n              <MDBProgressBar\r\n                bgColor=\"success\"\r\n                width=\"100\"\r\n                valuemin={0}\r\n                valuemax={100}\r\n              >\r\n                Registered\r\n              </MDBProgressBar>\r\n            </MDBProgress>\r\n          </MDBCol>\r\n          <MDBCol>\r\n            <MDBProgress height=\"15\">\r\n              <MDBProgressBar\r\n                bgColor=\"info\"\r\n                width=\"100\"\r\n                valuemin={0}\r\n                valuemax={100}\r\n              >\r\n                Assistant\r\n              </MDBProgressBar>\r\n            </MDBProgress>\r\n          </MDBCol>\r\n        </MDBRow>\r\n        <MDBRow>\r\n          <MDBCol>\r\n            <CChart\r\n              type=\"line\"\r\n              data={{\r\n                labels: Mon,\r\n                datasets: [\r\n                  {\r\n                    label: \"Average\",\r\n                    backgroundColor: \"#00f\",\r\n                    borderColor: \"#00f\",\r\n                    pointBackgroundColor: \"#00f\",\r\n                    pointBorderColor: \"#f00\",\r\n                    data: rotaHourPerMonth[2],\r\n                  },\r\n                  {\r\n                    label: \"Registered\",\r\n                    backgroundColor: \"#0f0\",\r\n                    borderColor: \"#0f0\",\r\n                    pointBackgroundColor: \"#0f0\",\r\n                    pointBorderColor: \"#f00\",\r\n                    data: rotaHourPerMonth[0],\r\n                  },\r\n                  {\r\n                    label: \"Assistant\",\r\n                    backgroundColor: \"#0dcaf0\",\r\n                    borderColor: \"#0dcaf0\",\r\n                    pointBackgroundColor: \"#0dcaf0\",\r\n                    pointBorderColor: \"#f00\",\r\n                    data: rotaHourPerMonth[1],\r\n                  },\r\n                ],\r\n              }}\r\n              options={{\r\n                maintainAspectRatio: true,\r\n                plugins: {\r\n                  legend: {\r\n                    display: true,\r\n                  },\r\n                },\r\n                elements: {\r\n                  line: {\r\n                    tension: 0.5,\r\n                  },\r\n                  point: {\r\n                    radius: 3,\r\n                    hitRadius: 10,\r\n                    hoverRadius: 5,\r\n                    hoverBorderWidth: 3,\r\n                  },\r\n                },\r\n              }}\r\n            />\r\n          </MDBCol>\r\n          <MDBCol>\r\n            <CChart\r\n              type=\"line\"\r\n              data={{\r\n                labels: Mon,\r\n                datasets: [\r\n                  {\r\n                    label: \"Revenue\",\r\n                    backgroundColor: \"#00f\",\r\n                    borderColor: \"#00f\",\r\n                    pointBackgroundColor: \"#00f\",\r\n                    pointBorderColor: \"#f00\",\r\n                    data: revenueDatas,\r\n                  },\r\n                  {\r\n                    label: \"Payroll\",\r\n                    backgroundColor: \"#0f0\",\r\n                    borderColor: \"#0f0\",\r\n                    pointBackgroundColor: \"#0f0\",\r\n                    pointBorderColor: \"#f00\",\r\n                    data: payrollDatas,\r\n                  },\r\n                  {\r\n                    label: \"PNL\",\r\n                    backgroundColor: \"#0dcaf0\",\r\n                    borderColor: \"#0dcaf0\",\r\n                    pointBackgroundColor: \"#0dcaf0\",\r\n                    pointBorderColor: \"#f00\",\r\n                    data: pnlDatas,\r\n                  },\r\n                ],\r\n              }}\r\n              options={{\r\n                maintainAspectRatio: true,\r\n                plugins: {\r\n                  legend: {\r\n                    display: true,\r\n                  },\r\n                },\r\n                elements: {\r\n                  line: {\r\n                    tension: 0.5,\r\n                  },\r\n                  point: {\r\n                    radius: 3,\r\n                    hitRadius: 10,\r\n                    hoverRadius: 5,\r\n                    hoverBorderWidth: 3,\r\n                  },\r\n                },\r\n              }}\r\n            />\r\n          </MDBCol>\r\n        </MDBRow>\r\n        {/* <CChart\r\n          type=\"bar\"\r\n          data={{\r\n            labels: days,\r\n            datasets: [\r\n              {\r\n                label: \"Average\",\r\n                backgroundColor: \"#00f\",\r\n                borderColor: \"#00f\",\r\n                pointBackgroundColor: \"#00f\",\r\n                pointBorderColor: \"#f00\",\r\n                data: rotaHourPerDay[2],\r\n              },\r\n              {\r\n                label: \"Registered\",\r\n                backgroundColor: \"#0f0\",\r\n                borderColor: \"#0f0\",\r\n                pointBackgroundColor: \"#0f0\",\r\n                pointBorderColor: \"#f00\",\r\n                data: rotaHourPerDay[0],\r\n              },\r\n              {\r\n                label: \"Assistant\",\r\n                backgroundColor: \"#0dcaf0\",\r\n                borderColor: \"#0dcaf0\",\r\n                pointBackgroundColor: \"#0dcaf0\",\r\n                pointBorderColor: \"#f00\",\r\n                data: rotaHourPerDay[1],\r\n              },\r\n            ],\r\n          }}\r\n          options={{\r\n            maintainAspectRatio: true,\r\n            plugins: {\r\n              legend: {\r\n                display: true,\r\n              },\r\n            },\r\n            elements: {\r\n              line: {\r\n                tension: 0.5,\r\n              },\r\n              point: {\r\n                radius: 3,\r\n                hitRadius: 10,\r\n                hoverRadius: 5,\r\n                hoverBorderWidth: 3,\r\n              },\r\n            },\r\n          }}\r\n        /> */}\r\n        {/* <CWidgetStatsB\r\n              className=\"mb-3\"\r\n              color=\"primary\"\r\n              inverse\r\n              progress={{ color: 'white',value: 75 }}\r\n              text=\"Widget helper text\"\r\n              title=\"Widget title\"\r\n              value=\"89.9%\"\r\n            /> */}\r\n\r\n        {/* <MDBRow className='mt-2'>\r\n            <MDBCol>\r\n              <MDBCard background='primary' className='text-white text-center mb-3'>\r\n                <MDBCardBody className='m-auto'>\r\n                  <NavLink to=\"basic\">Registeration</NavLink>\r\n                </MDBCardBody>\r\n              </MDBCard>\r\n            </MDBCol>\r\n            <MDBCol>\r\n              <MDBCard background='success' className='text-white mb-3'>\r\n                <MDBCardBody className='m-auto'>\r\n                  <NavLink to=\"working\">Working Days</NavLink>\r\n                </MDBCardBody>\r\n              </MDBCard>\r\n            </MDBCol>\r\n            <MDBCol>\r\n              <MDBCard background='success' className='text-white mb-3'>\r\n                <MDBCardBody className='m-auto'>\r\n                  <NavLink to=\"leave\">Leave Days</NavLink>\r\n                </MDBCardBody>\r\n              </MDBCard>\r\n            </MDBCol>\r\n            <MDBCol>\r\n              <MDBCard background='danger' className='text-white mb-3'>\r\n                <MDBCardBody className='m-auto'>\r\n                  <NavLink to=\"roaster\">Duty Roaster</NavLink>\r\n                </MDBCardBody>\r\n              </MDBCard>\r\n            </MDBCol>\r\n          </MDBRow>\r\n          <MDBRow className=\"mt-2\">\r\n            <MDBCol>\r\n              <MDBCard background='primary' className='text-white mb-3'>\r\n                <MDBCardBody className='m-auto'>\r\n                  <NavLink to=\"total\">Daily Time Record</NavLink>\r\n                </MDBCardBody>\r\n              </MDBCard>\r\n            </MDBCol>\r\n            <MDBCol>\r\n              <MDBCard background='warning' className='text-white mb-3'>\r\n                <MDBCardBody className='m-auto'>\r\n                  <NavLink to=\"payroll\">Payroll</NavLink>\r\n                </MDBCardBody>\r\n              </MDBCard>\r\n            </MDBCol>\r\n            <MDBCol>\r\n              <MDBCard background='warning' className='text-white mb-3'>\r\n                <MDBCardBody className='m-auto'>\r\n                  <NavLink to=\"revenue\">Revenue</NavLink>\r\n                </MDBCardBody>\r\n              </MDBCard>\r\n            </MDBCol>\r\n            <MDBCol>\r\n              <MDBCard background='danger' className='text-white text-center mb-3'>\r\n                <MDBCardBody className='m-auto'>\r\n                  <NavLink to=\"pnl\">PNL</NavLink>\r\n                </MDBCardBody>\r\n              </MDBCard>\r\n            </MDBCol>\r\n          </MDBRow> */}\r\n      </MDBContainer>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (BasicData) => ({\r\n  basic: BasicData.BasicData,\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(DashBoard);\r\n"],"names":["DashBoard","props","onChangeYear","e","setState","state","selYear","target","value","onChangeMonth","selMonth","date","Date","year","getFullYear","month","getMonth","json","ret","key","this","basic","nurseDatas","members","available","assigned","overtime","utilization","monthNames","monthNumbers","swap","Mon","Object","keys","NoMon","values","MonthSelect","map","index","daysInMonth","getDate","from","to","holidays","holidaysInMonth","holidaysPerMonth","holiday","slice","undefined","push","parseInt","SundaysInMonth","firstDate","getDay","selDay","day","sundaysPerMonth","loopMonth","payrollPerMonth","payrollPerPatient","payrollHourly","rotaHourPerMonth","rotaHourPerDay","nurses","nurse","salary","basic_allowances","housing_allowances","other_allowances","nurseLevel","level","rotas","rota","rotaPerMonth","rotaHolidayPerMonth","hour","startsWith","monthnum","includes","patient_id","_id","leaves","leave","leavedaysPerMonth","betweenDay","setDate","offdays","Set","length","offDaysPerMonth","dutyHoursPerMonth","basicPerDay","parseFloat","holidayPerDay","reducePerDay","holidayovertime","joined","nurseData","revenue","patients","patient","m","pnlDatas","revenueDatas","payrollDatas","days","j","i","toFixed","splice","className","md","type","placeholder","min","max","onChange","src","alt","position","height","width","valuemin","valuemax","bgColor","data","labels","datasets","label","backgroundColor","borderColor","pointBackgroundColor","pointBorderColor","options","maintainAspectRatio","plugins","legend","display","elements","line","tension","point","radius","hitRadius","hoverRadius","hoverBorderWidth","Component","connect","BasicData"],"sourceRoot":""}