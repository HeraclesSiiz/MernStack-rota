{"version":3,"file":"static/js/928.5e102734.chunk.js","mappings":"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","sources":["pages/payroll.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport {connect} from 'react-redux'\r\nimport DataTable from 'react-data-table-component';\r\nimport {\r\n  MDBCol,MDBContainer,MDBRow\r\n} from 'mdb-react-ui-kit';\r\nimport {IoMdDownload} from 'react-icons/io'\r\nimport { CSVLink } from \"react-csv\";\r\nimport {Form,OverlayTrigger,Tooltip} from 'react-bootstrap';\r\n\r\nclass PayRoll extends Component {\r\n  constructor(props) {\r\n      super(props);\r\n\r\n      let date = new Date();\r\n      let year = date.getFullYear();\r\n      \r\n      this.state = {\r\n        selYear:year,\r\n        selMonth:'00',\r\n        selDesignation:-1\r\n      };\r\n  }\r\n  componentDidMount() {\r\n  }\r\n\r\n  onChangeYear = (e) =>{\r\n    this.setState({\r\n      ...this.state,\r\n      selYear:e.target.value,\r\n    });\r\n  }\r\n  onChangeMonth = (e) =>{\r\n    this.setState({\r\n      ...this.state,\r\n      selMonth:e.target.value,\r\n    });\r\n  }\r\n  onChangeDesignation = (e) =>{\r\n    this.setState({\r\n      ...this.state,\r\n      selDesignation:e.target.value,\r\n    });\r\n  }\r\n  swap(json){\r\n    let ret = [];\r\n    for(var key in json){\r\n      ret[json[key]] = key;\r\n    }\r\n    return ret;\r\n  }\r\n  \r\n  getTotals(data, key){\r\n    let total = 0;\r\n    data.forEach(item => {\r\n      total += item[key];\r\n    });\r\n    return total;\r\n  }\r\n\r\n  render() {\r\n    const {selYear,selMonth,selDesignation} = this.state;\r\n    const {basic} =this.props;\r\n\r\n    let monthNames = basic.monthNames;\r\n    let monthNumbers = this.swap(monthNames);\r\n    let Mon = Object.keys(monthNames);\r\n    let NoMon = Object.values(monthNames);   \r\n    const MonthSelect = Mon.map((month,index) =>\r\n      <option value={NoMon[index]}>{month}</option>\r\n    );\r\n     \r\n    let payrollColumns = [];\r\n\r\n    if(selMonth != \"00\"){\r\n      payrollColumns.push({\r\n        name: \"ID\",\r\n        center:true,\r\n        wrap:true,\r\n        width:'80px',\r\n        selector: (row) => row['code'],\r\n      },{\r\n        name: \"Name\",\r\n        center:true,\r\n        wrap:true,\r\n        width:'120px',\r\n        selector: (row) => row['name'],\r\n      },{\r\n        name: \"Designation\",\r\n        center:true,\r\n        wrap:true,\r\n        width:'120px',\r\n        selector: (row) => row['designation'],\r\n      },{\r\n        name: \"Month(d)\",\r\n        center:true,\r\n        wrap:true,\r\n        width:'80px',\r\n        selector: (row) => row['monthdays'],\r\n      },{\r\n        name: \"Worked(d)\",\r\n        center:true,\r\n        wrap:true,\r\n        width:'80px',\r\n        selector: (row) => row['workeddays'],\r\n      },{\r\n        name: \"Worked(h)\",\r\n        center:true,\r\n        wrap:true,\r\n        width:'80px',\r\n        selector: (row) => row['totalhoursworked'],\r\n      },{\r\n        name: \"NormalOver(h)\",\r\n        center:true,\r\n        wrap:true,\r\n        width:'120px',\r\n        selector: (row) => row['normalovertimehours'],\r\n      },{\r\n        name: \"HolidayOver(h)\",\r\n        center:true,\r\n        wrap:true,\r\n        width:'120px',\r\n        selector: (row) => row['holidayovertimehours'],\r\n      },{\r\n        name: \"GrossSalary\",\r\n        center:true,\r\n        wrap:true,\r\n        width:'120px',\r\n        selector: (row) => row['grosssalary'],\r\n      },{\r\n        name: \"NormalOvertime\",\r\n        center:true,\r\n        wrap:true,\r\n        width:'120px',\r\n        selector: (row) => row['normalovertime'],\r\n      },{\r\n        name: \"HolidayOvertime\",\r\n        center:true,\r\n        wrap:true,\r\n        width:'150px',\r\n        selector: (row) => row['holidayovertime'],\r\n      });\r\n    }else{\r\n      payrollColumns.push({\r\n        name: \"Nurse\",\r\n        center:true,\r\n        wrap:true,\r\n        selector: (row) => row['nurse'],\r\n      });\r\n      payrollColumns.push({\r\n        name: \"Designation\",\r\n        center:true,\r\n        wrap:true,\r\n        selector: (row) => row['designation'],\r\n      });\r\n      for(let month in monthNames){      \r\n        payrollColumns.push({\r\n          name:month,\r\n          center:true,\r\n          wrap:true,\r\n          width:'70px',\r\n          cell: (row) =>\r\n          <OverlayTrigger\r\n            key={row._id}\r\n            placement=\"top\"\r\n            overlay={\r\n              <Tooltip  className=\"display-linebreak\" style={{position:'fixed'}} >\r\n                {row[month+\"comment\"]}\r\n              </Tooltip>\r\n            }\r\n          >\r\n            <p className=\"payroll hover\">{row[month]?row[month].toLocaleString('en'):0}</p>\r\n          </OverlayTrigger>\r\n        });\r\n      }\r\n    }\r\n\r\n    payrollColumns.push({\r\n      name: \"Total\",\r\n      center:true,\r\n      wrap:true,\r\n      width:'80px',\r\n      selector: (row) => row['total']?row['total'].toLocaleString('en'):0,\r\n    });\r\n\r\n    let payrollDatas = [];\r\n    let headers = [];\r\n    //get holidays per month\r\n    let holidays = basic.holidays;\r\n    let holidaysPerMonth = [];\r\n    holidays.map(holiday =>{\r\n      let key = monthNumbers[holiday.slice(0,2)];\r\n      if(holidaysPerMonth[key] == undefined){holidaysPerMonth[key] = [];}\r\n      holidaysPerMonth[key].push(selYear+'-'+holiday);\r\n    });\r\n    //get sundays per month\r\n    let sundaysPerMonth = [];\r\n    for(let selMonth in monthNumbers){\r\n      let daysInMonth = new Date(selYear, selMonth, 0).getDate();\r\n      let date = selYear+'-'+selMonth+'-01';\r\n      let firstDate = new Date(date).getDay();\r\n      if(firstDate == 0){firstDate = 1}else{firstDate = 7-firstDate+1}\r\n      for(let selDay = firstDate;selDay < daysInMonth;selDay+=7){\r\n        let day = selDay > 9?selDay:'0'+selDay;\r\n        let key = monthNumbers[selMonth];\r\n        if(sundaysPerMonth[key] == undefined){sundaysPerMonth[key] = [];}\r\n        sundaysPerMonth[key].push(selYear+'-'+selMonth+'-'+day);\r\n      }\r\n    }\r\n    \r\n    if(selYear <= new Date().getFullYear()){\r\n      basic.nurses.map((nurse) =>{\r\n        let basicPerDay = parseFloat(nurse.basic_allowances*15/365/8);\r\n        let holidayPerDay = parseFloat(nurse.basic_allowances*18/365/8);\r\n        let reducePerDay;\r\n\r\n        if(selDesignation == \"-1\" || parseInt(nurse.level) == selDesignation){\r\n          let salary = nurse.basic_allowances+nurse.housing_allowances+nurse.other_allowances;\r\n          reducePerDay = parseFloat(salary*12/365);\r\n          let comment = \"basic:\"+nurse.basic_allowances+\"\\nhousing:\"+nurse.housing_allowances+\"\\nother:\"+nurse.other_allowances;\r\n    \r\n          //leave days\r\n          let leaves = nurse.leave?nurse.leave:[];\r\n          let leavedaysPerMonth = [];\r\n          for(let leave of leaves){\r\n            let from = new Date(leave.from);\r\n            let to = new Date(leave.to);\r\n            for(let betweenDay = from;betweenDay <= to;){\r\n              let year = betweenDay.getFullYear();\r\n              let month = betweenDay.getMonth()+1>9?betweenDay.getMonth()+1:'0'+(betweenDay.getMonth()+1);\r\n              let day = betweenDay.getDate()>9?betweenDay.getDate():'0'+betweenDay.getDate();\r\n              if(year == selYear){\r\n                let key = monthNumbers[month];\r\n                if(leavedaysPerMonth[key] == undefined){leavedaysPerMonth[key] = [];}\r\n                leavedaysPerMonth[key].push(year+'-'+month+'-'+day);\r\n              }\r\n              betweenDay.setDate(betweenDay.getDate() + 1);\r\n            }\r\n          }\r\n          //rota hours per month\r\n          let rotas = nurse.rota;\r\n          let rotaPerMonth = [],rotaHolidayPerMonth = [];\r\n          let workeddays = [],totalhoursworked = 0;\r\n         \r\n          //rota calculate\r\n          rotas.map(rota =>{\r\n            if(rota.date.startsWith(selYear)){\r\n              let month = monthNumbers[[rota.date.slice(5,7)]];\r\n              if(monthNames[month] == selMonth){workeddays.push(rota.date);totalhoursworked += rota.hour;}\r\n              \r\n              if(rotaPerMonth[month] == undefined){\r\n                rotaPerMonth[month] = rota.hour;\r\n              }else{\r\n                rotaPerMonth[month] += rota.hour;\r\n              }\r\n              if(holidaysPerMonth[month] && holidaysPerMonth[month].includes(rota.date)){\r\n                if(rotaHolidayPerMonth[month] == undefined){\r\n                  rotaHolidayPerMonth[month] = rota.hour;\r\n                }else{\r\n                  rotaHolidayPerMonth[month] += rota.hour;\r\n                }\r\n              }\r\n            }\r\n          });\r\n       \r\n          //datatable set\r\n          let payrollPerMonth = [],payrollCommentPerMonth = [],offDaysPerMonth = [],dutyHoursPerMonth = [];\r\n          let monthdays,normalovertimehours,holidayovertimehours,grosssalary,normalovertime,holidayovertime,totalsalary;\r\n\r\n          for(let loopMonth in monthNames){         \r\n            let daysInMonth = new Date(selYear, monthNames[loopMonth], 0).getDate();\r\n            if(monthNames[loopMonth] == selMonth){monthdays = daysInMonth;}\r\n\r\n            if(leavedaysPerMonth[loopMonth] == undefined){leavedaysPerMonth[loopMonth] = [];}\r\n            if(holidaysPerMonth[loopMonth] == undefined){holidaysPerMonth[loopMonth] = [];}\r\n            if(sundaysPerMonth[loopMonth] == undefined){sundaysPerMonth[loopMonth] = [];}\r\n            \r\n            offDaysPerMonth[loopMonth] = [...leavedaysPerMonth[loopMonth],...holidaysPerMonth[loopMonth],...sundaysPerMonth[loopMonth]];\r\n            offDaysPerMonth[loopMonth] = [...new Set(offDaysPerMonth[loopMonth])];\r\n            dutyHoursPerMonth[loopMonth] = (daysInMonth-offDaysPerMonth[loopMonth].length)*8;\r\n            if(rotaPerMonth[loopMonth] == undefined){rotaPerMonth[loopMonth] = 0;}\r\n            //extra salary calculate\r\n            if(dutyHoursPerMonth[loopMonth] < rotaPerMonth[loopMonth]\r\n              //  && rotaPerMonth[loopMonth] >= 192\r\n              ){\r\n              let overtime = rotaPerMonth[loopMonth] - dutyHoursPerMonth[loopMonth];\r\n              let hovertime = 0;\r\n\r\n              if(rotaHolidayPerMonth[loopMonth] != undefined){\r\n                if(overtime <= rotaHolidayPerMonth[loopMonth]){\r\n                  hovertime = overtime;\r\n                  overtime = 0;\r\n                }else{\r\n                  overtime -= rotaHolidayPerMonth[loopMonth];\r\n                  hovertime = rotaHolidayPerMonth[loopMonth];\r\n                }\r\n              }\r\n              \r\n              payrollPerMonth[loopMonth] = salary+parseInt(basicPerDay*overtime+holidayPerDay*hovertime);\r\n              payrollCommentPerMonth[loopMonth] = comment+\"\\novertime:\"+overtime+\"hours\"+\"\\nholiday overtime:\"+hovertime+\"hours\";\r\n              \r\n              if(monthNames[loopMonth] == selMonth){\r\n                normalovertimehours = overtime;\r\n                holidayovertimehours = hovertime;\r\n                normalovertime = basicPerDay*overtime;\r\n                holidayovertime = holidayPerDay*hovertime;\r\n                grosssalary = salary;\r\n                totalsalary = payrollPerMonth[loopMonth]\r\n              }\r\n            //commmon salary\r\n            }else{\r\n              payrollPerMonth[loopMonth] = salary;\r\n              payrollCommentPerMonth[loopMonth] = comment;\r\n\r\n              if(selYear == parseInt(nurse.date.slice(0,4))){\r\n                let joined = nurse.date;\r\n                if(monthNames[loopMonth] < joined.slice(5,7)){\r\n                  payrollPerMonth[loopMonth] = 0;\r\n                }else if(monthNames[loopMonth] == joined.slice(5,7)){\r\n                  payrollPerMonth[loopMonth] = salary - parseInt(reducePerDay*(parseInt(joined.slice(8,10)-1)));\r\n                }\r\n              }else if(selYear < parseInt(nurse.date.slice(0,4))){\r\n                payrollPerMonth[loopMonth] = 0;\r\n              }\r\n            \r\n              if(monthNames[loopMonth] == selMonth){\r\n                normalovertimehours = 0;\r\n                holidayovertimehours = 0;\r\n                normalovertime = 0;\r\n                holidayovertime = 0;\r\n                grosssalary = salary;\r\n                totalsalary = payrollPerMonth[loopMonth];\r\n              }\r\n            }\r\n          }   \r\n          \r\n          let row = {};\r\n          row.nurse = nurse.name;\r\n          row.designation = nurse.level==0?\"Registered\":\"Assistant\";\r\n          //all data\r\n          if(selMonth == \"00\"){           \r\n            let grandTotal = 0;\r\n            for(let month in monthNames){\r\n              if(selYear == new Date().getFullYear()){\r\n                if(parseInt(monthNames[month]) <= new Date().getMonth()+1){\r\n                  row[month] = payrollPerMonth[month];\r\n                  row[month+'comment'] = payrollCommentPerMonth[month];\r\n                  grandTotal += row[month];\r\n                }else{\r\n                  row[month] = 0;\r\n                }\r\n              }else if(selYear < new Date().getFullYear()){\r\n                row[month] = payrollPerMonth[month];\r\n                row[month+'comment'] = payrollCommentPerMonth[month];\r\n                grandTotal += row[month];\r\n              }\r\n            }\r\n            row.total = grandTotal;\r\n            payrollDatas.push(row);\r\n          //detail month data\r\n          }else{\r\n            workeddays = [...new Set(workeddays)];\r\n\r\n            row.code = nurse.code;\r\n            row.name = nurse.name;\r\n            row.designation = nurse.level==0?\"Registered\":\"Assistant\";\r\n            row.monthdays = monthdays;\r\n            row.workeddays = workeddays.length;\r\n            row.totalhoursworked = totalhoursworked;\r\n            row.normalovertimehours = normalovertimehours;\r\n            row.holidayovertimehours = holidayovertimehours;\r\n            row.grosssalary = grosssalary;\r\n            row.normalovertime = parseInt(normalovertime);  \r\n            row.holidayovertime = parseInt(holidayovertime);\r\n            row.total = totalsalary;\r\n            \r\n            payrollDatas.push(row);\r\n          }\r\n        }\r\n      });\r\n      let total = {\r\n        nurse:'Total',\r\n        code:'Total',\r\n      }\r\n      // payrollDatas.push(total);\r\n      if(selMonth != \"00\"){    headers = [\r\n        { label: \"ID\", key: \"code\" },\r\n        { label: \"Name\", key: \"name\" },\r\n        { label: \"Designation\", key: \"designation\" },\r\n        { label: \"Worked Days\", key: \"workeddays\" },\r\n        { label: \"Worked Hours\", key: \"totalhoursworked\" },\r\n        { label: \"NormalOver(h)\", key: \"normalovertimehours\" },\r\n        { label: \"HolidayOver(h)\", key: \"holidayovertimehours\" },\r\n        { label: \"GrossSalary\", key: \"grosssalary\" },\r\n        { label: \"NormalOvertime\", key: \"normalovertime\" },\r\n        { label: \"HolidayOvertime\", key: \"holidayovertime\" },\r\n        { label: \"Total\", key: \"total\" }\r\n      ];\r\n        for(let month in monthNames){      \r\n        }\r\n      } else {    \r\n        for(let month in monthNames){   \r\n          total[month] = this.getTotals(payrollDatas,month); \r\n          total['total'] = this.getTotals(payrollDatas,'total'); \r\n          headers = [\r\n            { label: \"Nurse\", key: \"nurse\" },\r\n            { label: \"Designation\", key: \"designation\" },\r\n            { label: \"Jan\", key: \"Jan\" },\r\n            { label: \"Feb\", key: \"Feb\" },\r\n            { label: \"Mar\", key: \"Mar\" },\r\n            { label: \"Apr\", key: \"Apr\" },\r\n            { label: \"May\", key: \"May\" },\r\n            { label: \"Jun\", key: \"Jun\" },\r\n            { label: \"Jul\", key: \"Jul\" },\r\n            { label: \"Aug\", key: \"Aug\" },\r\n            { label: \"Sep\", key: \"Sep\" },\r\n            { label: \"Oct\", key: \"Oct\" },\r\n            { label: \"Nov\", key: \"Nov\" },\r\n            { label: \"Dec\", key: \"Dec\" },\r\n            { label: \"Total\", key: \"total\" }\r\n          ];\r\n          \r\n        }\r\n      }\r\n    }\r\n    \r\n    const conditionalRowStyles = [\r\n      {\r\n        when: (row) => row.designation == 'Total',\r\n        style: row => ({\r\n          backgroundColor: 'rgb(160,160,160)',         \r\n        }),\r\n      }\r\n    ];\r\n  \r\n    return (\r\n      <MDBContainer>\r\n          <div className=\"pt-5 text-center text-dark\">\r\n            <h1 className=\"mt-3\">PAY ROLL</h1>\r\n          </div>\r\n          <MDBRow className=\" align-items-center justify-content-center\">\r\n            <MDBCol md=\"2\">\r\n              <Form.Select aria-label=\"select\" value={selDesignation} onChange = {(e) =>this.onChangeDesignation(e)}>\r\n                <option value=\"-1\">All</option>\r\n                <option value=\"0\">Registered</option>\r\n                <option value=\"1\">Assistant</option>\r\n              </Form.Select>\r\n            </MDBCol>\r\n            <MDBCol md=\"2\">\r\n              <Form.Group>\r\n                <Form.Control type=\"number\" value={selYear} placeholder=\"Year\" onChange = {(e) =>this.onChangeYear(e)}/>\r\n              </Form.Group>\r\n            </MDBCol>\r\n            <MDBCol md=\"2\">\r\n              <Form.Select aria-label=\"select\" value={selMonth} onChange = {(e) =>this.onChangeMonth(e)}>\r\n                <option value=\"00\">Month</option>\r\n                {\r\n                  MonthSelect\r\n                }\r\n              </Form.Select>\r\n              </MDBCol>\r\n              <MDBCol md=\"2\" >\r\n              <CSVLink\r\n                data={payrollDatas}\r\n                headers={headers}\r\n                filename={\"payroll.csv\"}\r\n                className=\"btn btn-success \"\r\n                target=\"_blank\"\r\n                >\r\n                <IoMdDownload />Export \r\n              </CSVLink>\r\n           </MDBCol>         \r\n          </MDBRow>\r\n          <MDBRow className='mt-2'>   \r\n            <DataTable\r\n                columns={payrollColumns} \r\n                data={payrollDatas}\r\n                fixedHeader\r\n                striped\r\n                conditionalRowStyles={conditionalRowStyles}\r\n                fixedHeaderScrollHeight={'60vh'}\r\n                pagination\r\n            />\r\n          </MDBRow>\r\n      </MDBContainer>\r\n    );\r\n  };\r\n}\r\n\r\nconst mapStateToProps = (BasicData) => ({\r\n  basic:BasicData.BasicData\r\n});\r\nexport default connect(mapStateToProps,null)(PayRoll)"],"names":["PayRoll","props","onChangeYear","e","setState","state","selYear","target","value","onChangeMonth","selMonth","onChangeDesignation","selDesignation","year","Date","getFullYear","json","ret","key","data","total","forEach","item","this","basic","monthNames","monthNumbers","swap","Mon","Object","keys","NoMon","values","MonthSelect","map","month","index","payrollColumns","push","name","center","wrap","width","selector","row","cell","placement","overlay","className","style","position","toLocaleString","_id","payrollDatas","headers","holidays","holidaysPerMonth","holiday","slice","undefined","sundaysPerMonth","daysInMonth","getDate","firstDate","getDay","selDay","day","nurses","nurse","reducePerDay","basicPerDay","parseFloat","basic_allowances","holidayPerDay","parseInt","level","salary","housing_allowances","other_allowances","comment","leaves","leave","leavedaysPerMonth","from","to","betweenDay","getMonth","setDate","rotas","rota","rotaPerMonth","rotaHolidayPerMonth","workeddays","totalhoursworked","date","startsWith","hour","includes","monthdays","normalovertimehours","holidayovertimehours","grosssalary","normalovertime","holidayovertime","totalsalary","payrollPerMonth","payrollCommentPerMonth","offDaysPerMonth","dutyHoursPerMonth","loopMonth","Set","length","overtime","hovertime","joined","designation","grandTotal","code","label","getTotals","md","onChange","type","placeholder","CSVLink","filename","columns","fixedHeader","striped","conditionalRowStyles","when","backgroundColor","fixedHeaderScrollHeight","pagination","Component","connect","BasicData"],"sourceRoot":""}