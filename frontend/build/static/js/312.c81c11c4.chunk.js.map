{"version":3,"file":"static/js/312.c81c11c4.chunk.js","mappings":"wQAQMA,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GACJ,WAAYC,GAAQ,IAAD,mBACf,cAAMA,IAcZC,aAAe,SAACC,GAChB,EAAKC,UAAL,kBACK,EAAKC,OADV,IAEEC,QAAQH,EAAEI,OAAOC,QAElB,EApBoB,EAsBrBC,iBAAmB,SAACN,GAChB,EAAKC,UAAL,kBACK,EAAKC,OADV,IAEEK,SAASP,EAAEI,OAAOC,QAGvB,EA5BoB,EA8BrBG,cAAgB,SAACR,GACjB,EAAKC,UAAL,kBACK,EAAKC,OADV,IAEEO,SAAST,EAAEI,OAAOC,QAEnB,EAnCoB,EAqCnBK,eAAiB,SAACV,GAChB,EAAKC,UAAL,kBACK,EAAKC,OADV,IAEES,YAAY,EAAKT,MAAMS,aAE1B,EAvCD,IAAIC,EAAO,IAAIC,KACXC,EAAOF,EAAKG,cACZC,EAAQJ,EAAKK,WAAW,EAAE,EAAEL,EAAKK,WAAW,EAAE,KAAKL,EAAKK,WAAW,GALpD,OAQnB,EAAKf,MAAQ,CACXC,QAAQW,EACRL,SAASO,EACTL,YAAW,GAXM,CAapB,CAwaE,OAxaF,iCA+BC,SAAUO,EAAMC,GACd,IAAIC,EAAQ,EAIZ,OAHAF,EAAKG,SAAQ,SAAAC,GACXF,GAASE,EAAKH,EACf,IACMC,CACR,8BACD,SAAcG,GACZ,IAAIC,EAAa,EAKjB,OAJGD,EAAIE,UAAU,IACfD,EAAcD,EAAIE,UAAUF,EAAIG,QAAS,KAE3CH,EAAIC,WAAaA,EAAWG,QAAQ,GAAG,IAChCJ,EAAIC,UACZ,qBAED,SAAKI,GACH,IAAIC,EAAM,GACV,IAAI,IAAIV,KAAOS,EACbC,EAAID,EAAKT,IAAQA,EAEnB,OAAOU,CACR,uBAED,WAAU,IAAD,OACP,EAAgDC,KAAK5B,MAA9CC,EAAP,EAAOA,QAAQM,EAAf,EAAeA,SAASE,EAAxB,EAAwBA,WACjBoB,GADP,EAAoCxB,SACrBuB,KAAKhC,MAAbiC,OAEHC,EAAaD,EAAMC,WACnBC,EAAeH,KAAKI,KAAKF,GAEzBG,EAAMC,OAAOC,KAAKL,GAClBM,EAAQF,OAAOG,OAAOP,GAEpBQ,EAAcL,EAAIM,KAAI,SAACzB,EAAM0B,GAAP,OAC1B,mBAAQrC,MAAOiC,EAAMI,GAArB,SAA8B1B,GADJ,IAIxB2B,EAAa,GACbC,EAAW,GAEZjC,EACDgC,EAAWE,KAAK,CACdC,KAAM,UACNC,QAAO,EACPC,MAAK,EACLC,UAAS,EACTC,YAAY,EACZC,SAAU,SAAC5B,GAAD,OAASA,EAAI6B,OAAb,GACV,CACAN,KAAM,QACNC,QAAO,EACPC,MAAK,EACLC,UAAS,EACTE,SAAU,SAAC5B,GAAD,OAASA,EAAI8B,KAAb,IAGZV,EAAWE,KAAK,CACdC,KAAM,QACNC,QAAO,EACPC,MAAK,EACLG,SAAU,SAAC5B,GAAD,OAASA,EAAIP,KAAb,IAGd2B,EAAWE,KAAK,CACdC,KAAM,UACNC,QAAO,EACPC,MAAK,EACLG,SAAU,SAAC5B,GAAD,OAASA,EAAIG,QAAQH,EAAIG,QAAQ4B,eAAe,MAAM,CAAtD,GACV,CACAR,KAAM,UACNC,QAAO,EACPC,MAAK,EACLG,SAAU,SAAC5B,GAAD,OAASA,EAAIgC,QAAQhC,EAAIgC,QAAQD,eAAe,MAAM,CAAtD,GACV,CACAR,KAAM,cACNC,QAAO,EACPC,MAAK,EACLG,SAAU,SAAC5B,GAAD,OAASA,EAAIiC,IAAIjC,EAAIiC,IAAIF,eAAe,MAAM,CAA9C,GAEZ,CACER,KAAM,aACNC,QAAO,EACPC,MAAK,EACLG,SAAU,SAAC5B,GAAD,OAAS,EAAKkC,cAAclC,EAA5B,IAKV,IAAImC,EAAW3B,EAAM2B,SACjBC,EAAmB,GACvBD,EAASjB,KAAI,SAAAmB,GACX,IAAIzC,EAAMc,EAAa2B,EAAQC,MAAM,EAAE,SACXC,GAAzBH,EAAiBxC,KAAmBwC,EAAiBxC,GAAO,IAC/DwC,EAAiBxC,GAAK0B,KAAK1C,EAAQ,IAAIyD,EACxC,IAED,IAAIG,EAAkB,GACtB,IAAI,IAAIC,KAAa/B,EAKnB,IAJA,IAAIgC,EAAc,IAAIpD,KAAKV,EAAS6D,EAAW,GAAGE,UAE9CC,EAAY,IAAItD,KADTV,EAAQ,IAAI6D,EAAU,OACFI,SAEvBC,EADWF,EAAH,GAAbA,EAA4B,EAAmB,EAAEA,EAAU,EACnCE,EAASJ,EAAYI,GAAQ,EAAE,CACxD,IAAIC,EAAMD,EAAS,EAAEA,EAAO,IAAIA,EAC5BlD,EAAMc,EAAa+B,QACIF,GAAxBC,EAAgB5C,KAAmB4C,EAAgB5C,GAAO,IAC7D4C,EAAgB5C,GAAK0B,KAAK1C,EAAQ,IAAI6D,EAAU,IAAIM,EACrD,CAGH,IAAIC,EAAkB,GAClBC,EAAoB,GACpBC,EAAgB,GAChBC,EAAU,GAqHhB,GAnHE3C,EAAM4C,OAAOlC,KAAI,SAACmC,GAChB,IADyB,EACrBC,EAASD,EAAME,iBAAiBF,EAAMG,mBAAmBH,EAAMI,iBAG/DC,EAASL,EAAMM,MAAMN,EAAMM,MAAM,GACjCC,EAAoB,GALC,UAMRF,GANQ,IAMzB,IAAI,EAAJ,qBAGE,IAHuB,IAAjBC,EAAgB,QAClBE,EAAO,IAAIvE,KAAKqE,EAAME,MACtBC,EAAK,IAAIxE,KAAKqE,EAAMG,IAChBC,EAAaF,EAAKE,GAAcD,GAAI,CAC1C,IAAIvE,EAAOwE,EAAWvE,cAClBC,EAAQsE,EAAWrE,WAAW,EAAE,EAAEqE,EAAWrE,WAAW,EAAE,KAAKqE,EAAWrE,WAAW,GACrFqD,EAAMgB,EAAWpB,UAAU,EAAEoB,EAAWpB,UAAU,IAAIoB,EAAWpB,UACrE,GAAGpD,GAAQX,EAAQ,CACjB,IAAIgB,EAAMc,EAAajB,QACM8C,GAA1BqB,EAAkBhE,KAAmBgE,EAAkBhE,GAAO,IACjEgE,EAAkBhE,GAAK0B,KAAK/B,EAAK,IAAIE,EAAM,IAAIsD,EAChD,CACDgB,EAAWC,QAAQD,EAAWpB,UAAY,EAC3C,CAnBsB,+BAsBzB,IAAIsB,EAAQZ,EAAMa,KACdC,EAAe,GACfC,EAAsB,GAC1BH,EAAM/C,KAAI,SAAAgD,GACR,GAAGA,EAAK7E,KAAKgF,WAAWzF,GAAS,CAC/B,IAAIa,EAAQiB,EAAa,CAACwD,EAAK7E,KAAKiD,MAAM,EAAE,UAClBC,GAAvB4B,EAAa1E,GACd0E,EAAa1E,GAASyE,EAAKI,KAE3BH,EAAa1E,IAAUyE,EAAKI,KAE3BlC,EAAiB3C,IAAU2C,EAAiB3C,GAAO8E,SAASL,EAAK7E,aACjCkD,GAA9B6B,EAAoB3E,GACrB2E,EAAoB3E,GAASyE,EAAKI,KAElCF,EAAoB3E,IAAUyE,EAAKI,MAIpCJ,EAAK7E,KAAKiD,MAAM,EAAE,IAAMpD,SACgBqD,GAAtCU,EAAkBiB,EAAKM,cAA0BvB,EAAkBiB,EAAKM,YAAc,SACrCjC,GAAjDU,EAAkBiB,EAAKM,YAAYnB,EAAMoB,KAC1CxB,EAAkBiB,EAAKM,YAAYnB,EAAMoB,KAAOP,EAAKI,KAErDrB,EAAkBiB,EAAKM,YAAYnB,EAAMoB,MAAQP,EAAKI,KAG3D,CACF,IAGD,IAAII,EAAkB,GAClBC,EAAoB,GAExB,IAAI,IAAIlC,KAAahC,EAAW,CAC9B,IAAIiC,EAAc,IAAIpD,KAAKV,EAAS6B,EAAWgC,GAAY,GAAGE,UAa9D,QAZmCJ,GAAhCqB,EAAkBnB,KAAyBmB,EAAkBnB,GAAa,SAC3CF,GAA/BH,EAAiBK,KAAyBL,EAAiBK,GAAa,SAC1CF,GAA9BC,EAAgBC,KAAyBD,EAAgBC,GAAa,IAEzEiC,EAAgBjC,GAAhB,kBAAiCmB,EAAkBnB,KAAnD,OAAiEL,EAAiBK,KAAlF,OAAgGD,EAAgBC,KAChHiC,EAAgBjC,IAAhB,OAAiC,IAAImC,IAAIF,EAAgBjC,KACzDkC,EAAkBlC,GAA6D,GAA/CC,EAAYgC,EAAgBjC,GAAWoC,aAEzCtC,GAA3B4B,EAAa1B,KAAyB0B,EAAa1B,GAAa,QAC9BF,GAAlC6B,EAAoB3B,KAAyB2B,EAAoB3B,GAAa,QAChDF,GAA9BS,EAAgBP,KAAyBO,EAAgBP,GAAa,GAEtE0B,EAAa1B,GAAW,CACzB,IAAIqC,EAAcC,WAAkC,GAAvB1B,EAAME,iBAAoB,IAAI,GACvDyB,EAAgBD,WAAkC,GAAvB1B,EAAME,iBAAoB,IAAI,GACzD0B,EAAeF,WAAkB,GAAPzB,EAAU,KAExC,GAAGqB,EAAkBlC,GAAa0B,EAAa1B,GAE3C,CACF,IAAIyC,EAAWf,EAAa1B,GAAakC,EAAkBlC,GACvD0C,EAAkB,OAEe5C,GAAlC6B,EAAoB3B,KAClByC,GAAYd,EAAoB3B,IACjC0C,EAAkBD,EAClBA,EAAW,IAEXA,GAAYd,EAAoB3B,GAChC0C,EAAkBf,EAAoB3B,KAG1Ca,GAAU8B,SAASN,EAAYI,EAASF,EAAcG,EACvD,CAED,GAAGvG,GAAWwG,SAAS/B,EAAMhE,KAAKiD,MAAM,EAAE,IAAI,CAC5C,IAAI+C,EAAShC,EAAMhE,KAChBoB,EAAWgC,GAAa4C,EAAO/C,MAAM,EAAE,GACxCgB,EAAS,EACF7C,EAAWgC,IAAc4C,EAAO/C,MAAM,EAAE,KAC/CgB,GAAkB8B,SAASH,GAAcG,SAASC,EAAO/C,MAAM,EAAE,KAAK,IAEzE,MAAQ1D,EAAUwG,SAAS/B,EAAMhE,KAAKiD,MAAM,EAAE,MAC7CgB,EAAS,GAIbN,EAAgBP,IAAca,EAG3B7C,EAAWgC,IAAcvD,IACxBgE,EAAcG,EAAMoB,KAAOM,WAAWzB,EAAOa,EAAa1B,IAE/D,CACA,CACF,IAEArD,EAAW,CACZ,IAAIkG,EAAe,EACfC,EAAe,EACnB/E,EAAMgF,SAAStE,KAAI,SAAAW,GACjB,IAAI1B,EAAU,EACV6B,EAAU,EASd,IAAI,IAAIvC,KARR0D,EAAU,CACR,CAAEsC,MAAO,UAAW7F,IAAK,WACzB,CAAE6F,MAAO,QAAS7F,IAAK,SACvB,CAAE6F,MAAO,UAAW7F,IAAK,WACzB,CAAE6F,MAAO,UAAW7F,IAAK,WACzB,CAAE6F,MAAO,cAAe7F,IAAK,QAGdiC,EAAQ1B,QACpBV,EAAM6C,MAAM,EAAE,IAAM1D,EAAQ,KAAO6B,EAAWhB,EAAM6C,MAAM,EAAE,KAAOpD,IACpEiB,EAAU0B,EAAQ1B,QAAQV,GAC1B6F,GAAgBnF,GAGpB,QAAqCoC,GAAlCU,EAAkBpB,EAAQ4C,KAC3BzC,EAAU,MACP,CAEH,IAAI,IAAI0D,KAAazC,EAAkBpB,EAAQ4C,KAC7CzC,GAAW+C,WAAW9B,EAAkBpB,EAAQ4C,KAAKiB,GAAaxC,EAAcwC,IAElFH,GAAgBvD,CACjB,CAEDX,EAASC,KAAK,CACZO,QAAQA,EAAQN,KAChBO,MAAMD,EAAQC,MACd3B,QAAQiF,SAASjF,GACjB6B,QAAQoD,SAASpD,GACjBC,IAAI9B,EAAQiF,SAASpD,IAGxB,IAED,IAAIhC,EAAI,CACN6B,QAAQ,SACR1B,QAAQmF,EACRtD,QAAQoD,SAASG,GACjBtD,IAAIqD,EAAaF,SAASG,IAE5BlE,EAASC,KAAKtB,EACf,KAAI,CACHmD,EAAU,CACR,CAAEsC,MAAO,QAAS7F,IAAK,SACvB,CAAE6F,MAAO,UAAW7F,IAAK,WACzB,CAAE6F,MAAO,UAAW7F,IAAK,WACzB,CAAE6F,MAAO,cAAe7F,IAAK,QAE/B,IAAIO,EAAU,GAcd,IAAI,IAAIV,KAbRe,EAAMgF,SAAStE,KAAI,SAAAW,GACf,IAAI,IAAIpC,KAASoC,EAAQ1B,QACvB,GAAGV,EAAM6C,MAAM,EAAE,IAAM1D,EAAQ,IAAI,CACjC,IAAI+G,EAAIlG,EAAM6C,MAAM,EAAE,QACRC,GAAdpC,EAAQwF,GAERxF,EAAQwF,GAAK9D,EAAQ1B,QAAQV,GAE7BU,EAAQwF,IAAM9D,EAAQ1B,QAAQV,EAC/B,CAEN,IAEgBgB,OACM8B,GAAlBpC,EAAQV,KAAqBU,EAAQV,GAAS,QACpB8C,GAA1BS,EAAgBvD,KAAqBuD,EAAgBvD,GAAS,GACjE4B,EAASC,KAAK,CACZ7B,MAAMA,EACNU,QAAQA,EAAQV,GAChBuC,QAAQgB,EAAgBvD,GACxBwC,IAAI9B,EAAQV,GAAOuD,EAAgBvD,KAIvC,IAAIO,EAAI,CAAC,EACTG,EAAUU,OAAOG,OAAOb,GAASyF,QAAO,SAACC,EAAEC,GAAH,OAASD,EAAEC,CAAX,GAAa,GACrD,IAAI9D,EAAUnB,OAAOG,OAAOgC,GAAiB4C,QAAO,SAACC,EAAEC,GAAH,OAASD,EAAEC,CAAX,GAAa,GAC7D7D,EAAM9B,EAAU6B,EACpBhC,EAAIP,MAAQ,QACZO,EAAIG,QAAUA,EACdH,EAAIgC,QAAUA,EACdhC,EAAIiC,IAAMA,EAEVZ,EAASC,KAAKtB,EACf,CAWD,OACE,UAAC,KAAD,YACI,gBAAK+F,UAAU,6BAAf,UACE,eAAIA,UAAU,OAAd,8BAEF,UAAC,KAAD,CAAQA,UAAU,6CAAlB,WACE,SAAC,KAAD,CAAQC,GAAG,IAAX,UACE,SAAC,UAAD,WACE,SAAC,YAAD,CAAcC,KAAK,SAASnH,MAAOF,EAASsH,YAAY,OAAOC,SAAY,SAAC1H,GAAD,OAAM,EAAKD,aAAaC,EAAxB,QAG9EW,IACD,SAAC,KAAD,CAAQ4G,GAAG,IAAX,UACI,SAAC,UAAD,WACE,SAAC,WAAD,CAAa,aAAW,SAASlH,MAAOI,EAAUiH,SAAY,SAAC1H,GAAD,OAAM,EAAKQ,cAAcR,EAAzB,EAA9D,SAEIwC,SAMV,SAAC,KAAD,CAAQ+E,GAAG,IAAID,UAAU,OAAzB,UACE,SAAC,UAAD,CACEK,QAAUhH,EACV6G,KAAK,WACLI,SAAS,EACTZ,MAAM,cACNU,SAAY,SAAC1H,GAAD,OAAO,EAAKU,eAAeV,EAA3B,OAIf,SAAC,KAAD,CAAQuH,GAAG,IAAID,UAAU,cAAzB,UACC,UAAC,EAAAO,QAAD,CACEnD,QAASA,EACTxD,KAAM0B,EACNkF,SAAU,UACVR,UAAU,mBACVlH,OAAO,SALT,WAOE,SAAC,MAAD,IAPF,kBAWN,SAAC,KAAD,CAAQkH,UAAU,OAAlB,UACI,SAAC,KAAD,CACIS,QAASpF,EACTzB,KAAM0B,EACNoF,QAAQ,EACRC,aAAW,EACXC,SAAO,EACPC,qBA5DiB,CACzB,CACEC,KAAM,SAAC7G,GAAD,MAAsB,SAAbA,EAAIP,OAAmC,SAAfO,EAAI6B,OAArC,EACNiF,MAAO,SAAA9G,GAAG,MAAK,CACb+G,gBAAiB,mBADT,IA0DJC,wBAAyB,aAUtC,OAtbG1I,CAAY2I,EAAAA,WA6blB,WAAeC,EAAAA,EAAAA,KAJS,SAACC,GAAD,MAAgB,CACtC3G,MAAM2G,EAAUA,UADM,GAIe,KAAvC,CAA6C7I,E,oECpc9B,SAAS8I,EAA2BC,EAAGC,GACpD,IAAIC,EAAuB,qBAAXC,QAA0BH,EAAEG,OAAOC,WAAaJ,EAAE,cAElE,IAAKE,EAAI,CACP,GAAIG,MAAMC,QAAQN,KAAOE,GAAK,OAA2BF,KAAOC,GAAkBD,GAAyB,kBAAbA,EAAExC,OAAqB,CAC/G0C,IAAIF,EAAIE,GACZ,IAAIK,EAAI,EAEJC,EAAI,WAAc,EAEtB,MAAO,CACLC,EAAGD,EACHE,EAAG,WACD,OAAIH,GAAKP,EAAExC,OAAe,CACxBmD,MAAM,GAED,CACLA,MAAM,EACNlJ,MAAOuI,EAAEO,KAEb,EACAnJ,EAAG,SAAWwJ,GACZ,MAAMA,CACR,EACAC,EAAGL,EAEP,CAEA,MAAM,IAAIM,UAAU,wIACtB,CAEA,IAEIC,EAFAC,GAAmB,EACnBC,GAAS,EAEb,MAAO,CACLR,EAAG,WACDP,EAAKA,EAAGgB,KAAKlB,EACf,EACAU,EAAG,WACD,IAAIS,EAAOjB,EAAGkB,OAEd,OADAJ,EAAmBG,EAAKR,KACjBQ,CACT,EACA/J,EAAG,SAAWiK,GACZJ,GAAS,EACTF,EAAMM,CACR,EACAR,EAAG,WACD,IACOG,GAAoC,MAAhBd,EAAW,QAAWA,EAAW,QAG5D,CAFE,QACA,GAAIe,EAAQ,MAAMF,CACpB,CACF,EAEJ,C","sources":["pages/pnl.js","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport {connect} from 'react-redux'\r\nimport DataTable from 'react-data-table-component';\r\nimport {MDBCol,MDBContainer,MDBRow } from 'mdb-react-ui-kit';\r\nimport { CSVLink } from \"react-csv\";\r\nimport {IoMdDownload} from 'react-icons/io'\r\nimport {Form} from 'react-bootstrap';\r\n\r\nclass PNL extends Component {\r\n  constructor(props) {\r\n      super(props); \r\n\r\n  let date = new Date();\r\n  let year = date.getFullYear();\r\n  let month = date.getMonth()+1>9?date.getMonth()+1:'0'+(date.getMonth()+1);\r\n\r\n  \r\n  this.state = {\r\n    selYear:year,\r\n    selMonth:month,\r\n    perPatient:false,\r\n  };     \r\n}\r\n\r\nonChangeYear = (e) =>{\r\nthis.setState({\r\n  ...this.state,\r\n  selYear:e.target.value,\r\n});\r\n}\r\n\r\nlevelModalChange = (e) =>{\r\n    this.setState({\r\n      ...this.state,\r\n      selLevel:e.target.value,\r\n    });\r\n\r\n}\r\n\r\nonChangeMonth = (e) =>{\r\nthis.setState({\r\n  ...this.state,\r\n  selMonth:e.target.value,\r\n});\r\n}\r\n \r\n  viewPerPatient = (e) =>{\r\n    this.setState({\r\n      ...this.state,\r\n      perPatient:!this.state.perPatient\r\n    });\r\n  }\r\n\r\n  getTotals(data, key){\r\n    let total = 0;\r\n    data.forEach(item => {\r\n      total += item[key];\r\n    });\r\n    return total;\r\n  }\r\n  getPercentage(row) {\r\n    let percentage = 0;\r\n    if(row.netProfit>0) {\r\n      percentage = (row.netProfit/row.revenue)*100;\r\n    }\r\n    row.percentage = percentage.toFixed(2)+\"%\";\r\n    return row.percentage;\r\n  }\r\n\r\n  swap(json){\r\n    let ret = [];\r\n    for(var key in json){\r\n      ret[json[key]] = key;\r\n    }\r\n    return ret;\r\n  }\r\n  \r\n  render() {\r\n    const {selYear,selMonth,perPatient, selLevel} = this.state;\r\n    const {basic} =this.props;\r\n\r\n    let monthNames = basic.monthNames;\r\n    let monthNumbers = this.swap(monthNames);\r\n    \r\n    let Mon = Object.keys(monthNames);\r\n    let NoMon = Object.values(monthNames);\r\n    \r\n    const MonthSelect = Mon.map((month,index) =>\r\n      <option value={NoMon[index]}>{month}</option>\r\n    );\r\n\r\n    let pnlColumns = [];\r\n    let pnlDatas = [];\r\n\r\n    if(perPatient){\r\n      pnlColumns.push({\r\n        name: \"Patient\",\r\n        center:true,\r\n        wrap:true,\r\n        sortable:true,\r\n        filterable: true,\r\n        selector: (row) => row.patient\r\n      },{\r\n        name: \"Level\",\r\n        center:true,\r\n        wrap:true,\r\n        sortable:true,\r\n        selector: (row) => row.level,\r\n      });\r\n    }else{\r\n      pnlColumns.push({\r\n        name: \"Month\",\r\n        center:true,\r\n        wrap:true,\r\n        selector: (row) => row.month,\r\n      });\r\n    }\r\n    pnlColumns.push({\r\n      name: \"Revenue\",\r\n      center:true,\r\n      wrap:true,\r\n      selector: (row) => row.revenue?row.revenue.toLocaleString('en'):0,\r\n    },{\r\n      name: \"Payroll\",\r\n      center:true,\r\n      wrap:true,\r\n      selector: (row) => row.payroll?row.payroll.toLocaleString('en'):0,\r\n    },{\r\n      name: \"Profit/Loss\",\r\n      center:true,\r\n      wrap:true,\r\n      selector: (row) => row.pnl?row.pnl.toLocaleString('en'):0,\r\n    },\r\n    {\r\n      name: \"Percentage\",\r\n      center:true,\r\n      wrap:true,\r\n      selector: (row) => this.getPercentage(row),\r\n    }\r\n    );\r\n\r\n      //get holidays per month\r\n      let holidays = basic.holidays;\r\n      let holidaysPerMonth = [];\r\n      holidays.map(holiday =>{\r\n        let key = monthNumbers[holiday.slice(0,2)];\r\n        if(holidaysPerMonth[key] == undefined){holidaysPerMonth[key] = [];}\r\n        holidaysPerMonth[key].push(selYear+'-'+holiday);\r\n      });\r\n      //get sundays per month\r\n      let sundaysPerMonth = [];\r\n      for(let loopMonth in monthNumbers){\r\n        let daysInMonth = new Date(selYear, loopMonth, 0).getDate();\r\n        let date = selYear+'-'+loopMonth+'-01';\r\n        let firstDate = new Date(date).getDay();\r\n        if(firstDate == 0){firstDate = 1}else{firstDate = 7-firstDate+1}\r\n        for(let selDay = firstDate;selDay < daysInMonth;selDay+=7){\r\n          let day = selDay > 9?selDay:'0'+selDay;\r\n          let key = monthNumbers[loopMonth];\r\n          if(sundaysPerMonth[key] == undefined){sundaysPerMonth[key] = [];}\r\n          sundaysPerMonth[key].push(selYear+'-'+loopMonth+'-'+day);\r\n        }\r\n      }\r\n      //get payroll\r\n      let payrollPerMonth = []; \r\n      let payrollPerPatient = [];\r\n      let payrollHourly = [];\r\n      let headers = [];\r\n\r\n      basic.nurses.map((nurse) =>{\r\n        let salary = nurse.basic_allowances+nurse.housing_allowances+nurse.other_allowances;\r\n  \r\n        //leave days\r\n        let leaves = nurse.leave?nurse.leave:[];\r\n        let leavedaysPerMonth = [];\r\n        for(let leave of leaves){\r\n          let from = new Date(leave.from);\r\n          let to = new Date(leave.to);\r\n          for(let betweenDay = from;betweenDay <= to;){\r\n            let year = betweenDay.getFullYear();\r\n            let month = betweenDay.getMonth()+1>9?betweenDay.getMonth()+1:'0'+(betweenDay.getMonth()+1);\r\n            let day = betweenDay.getDate()>9?betweenDay.getDate():'0'+betweenDay.getDate();\r\n            if(year == selYear){\r\n              let key = monthNumbers[month];\r\n              if(leavedaysPerMonth[key] == undefined){leavedaysPerMonth[key] = [];}\r\n              leavedaysPerMonth[key].push(year+'-'+month+'-'+day);\r\n            }\r\n            betweenDay.setDate(betweenDay.getDate() + 1);\r\n          }\r\n        }\r\n        //rota hours per month\r\n        let rotas = nurse.rota;\r\n        let rotaPerMonth = [];\r\n        let rotaHolidayPerMonth = [];\r\n        rotas.map(rota =>{\r\n          if(rota.date.startsWith(selYear)){\r\n            let month = monthNumbers[[rota.date.slice(5,7)]];\r\n            if(rotaPerMonth[month] == undefined){\r\n              rotaPerMonth[month] = rota.hour;\r\n            }else{\r\n              rotaPerMonth[month] += rota.hour;\r\n            }\r\n            if(holidaysPerMonth[month] && holidaysPerMonth[month].includes(rota.date)){\r\n              if(rotaHolidayPerMonth[month] == undefined){\r\n                rotaHolidayPerMonth[month] = rota.hour;\r\n              }else{\r\n                rotaHolidayPerMonth[month] += rota.hour;\r\n              }\r\n            }\r\n\r\n            if(rota.date.slice(5,7) == selMonth){\r\n              if(payrollPerPatient[rota.patient_id] == undefined){payrollPerPatient[rota.patient_id] = []}\r\n              if(payrollPerPatient[rota.patient_id][nurse._id] == undefined){\r\n                payrollPerPatient[rota.patient_id][nurse._id] = rota.hour\r\n              }else{\r\n                payrollPerPatient[rota.patient_id][nurse._id] += rota.hour\r\n              }\r\n            }\r\n          }\r\n        });\r\n\r\n        //datatable set\r\n        let offDaysPerMonth = [];\r\n        let dutyHoursPerMonth = [];\r\n\r\n        for(let loopMonth in monthNames){\r\n          let daysInMonth = new Date(selYear, monthNames[loopMonth], 0).getDate();\r\n          if(leavedaysPerMonth[loopMonth] == undefined){leavedaysPerMonth[loopMonth] = [];}\r\n          if(holidaysPerMonth[loopMonth] == undefined){holidaysPerMonth[loopMonth] = [];}\r\n          if(sundaysPerMonth[loopMonth] == undefined){sundaysPerMonth[loopMonth] = [];}\r\n          \r\n          offDaysPerMonth[loopMonth] = [...leavedaysPerMonth[loopMonth],...holidaysPerMonth[loopMonth],...sundaysPerMonth[loopMonth]];\r\n          offDaysPerMonth[loopMonth] = [...new Set(offDaysPerMonth[loopMonth])];\r\n          dutyHoursPerMonth[loopMonth] = (daysInMonth-offDaysPerMonth[loopMonth].length)*8;\r\n  \r\n          if(rotaPerMonth[loopMonth] == undefined){rotaPerMonth[loopMonth] = 0;}\r\n          if(rotaHolidayPerMonth[loopMonth] == undefined){rotaHolidayPerMonth[loopMonth] = 0;}\r\n          if(payrollPerMonth[loopMonth] == undefined){payrollPerMonth[loopMonth] = 0;}\r\n          \r\n          if(rotaPerMonth[loopMonth]){\r\n            let basicPerDay = parseFloat(nurse.basic_allowances*15/365/8);\r\n            let holidayPerDay = parseFloat(nurse.basic_allowances*18/365/8);\r\n            let reducePerDay = parseFloat(salary*12/365);\r\n\r\n            if(dutyHoursPerMonth[loopMonth] < rotaPerMonth[loopMonth] \r\n              //  && rotaPerMonth[loopMonth] >= 192\r\n               ){\r\n              let overtime = rotaPerMonth[loopMonth] - dutyHoursPerMonth[loopMonth];\r\n              let holidayovertime = 0;\r\n\r\n              if(rotaHolidayPerMonth[loopMonth] != undefined){\r\n                if(overtime <= rotaHolidayPerMonth[loopMonth]){\r\n                  holidayovertime = overtime;\r\n                  overtime = 0;\r\n                }else{\r\n                  overtime -= rotaHolidayPerMonth[loopMonth];\r\n                  holidayovertime = rotaHolidayPerMonth[loopMonth];\r\n                }\r\n              }\r\n              salary += parseInt(basicPerDay*overtime+holidayPerDay*holidayovertime);\r\n            }\r\n            \r\n            if(selYear == parseInt(nurse.date.slice(0,4))){\r\n              let joined = nurse.date;\r\n              if(monthNames[loopMonth] < joined.slice(5,7)){\r\n                salary = 0;\r\n              }else if(monthNames[loopMonth] == joined.slice(5,7)){\r\n                salary = salary - parseInt(reducePerDay*(parseInt(joined.slice(8,10))-1));\r\n              }\r\n            }else if(selYear < parseInt(nurse.date.slice(0,4))){\r\n              salary = 0;\r\n            }\r\n\r\n          \r\n          payrollPerMonth[loopMonth] += salary;\r\n          \r\n          \r\n          if(monthNames[loopMonth] == selMonth){\r\n              payrollHourly[nurse._id] = parseFloat(salary/rotaPerMonth[loopMonth]);\r\n          }\r\n        }\r\n        }\r\n      });\r\n\r\n    if(perPatient){\r\n      let revenueTotal = 0;\r\n      let payrollTotal = 0;\r\n      basic.patients.map(patient =>{\r\n        let revenue = 0;\r\n        let payroll = 0;\r\n        headers = [\r\n          { label: \"Patient\", key: \"patient\" },\r\n          { label: \"Level\", key: \"level\" },\r\n          { label: \"Revenue\", key: \"revenue\" },\r\n          { label: \"Payroll\", key: \"payroll\" },\r\n          { label: \"Profit/Loss\", key: \"pnl\" },\r\n        ];\r\n\r\n        for(let month in patient.revenue){\r\n          if(month.slice(4,6) == selYear%100 && monthNames[month.slice(0,3)] == selMonth){\r\n            revenue = patient.revenue[month];\r\n            revenueTotal += revenue;\r\n          }\r\n        }\r\n        if(payrollPerPatient[patient._id] == undefined){\r\n          payroll = 0;\r\n        }else{\r\n  \r\n          for(let loopNurse in payrollPerPatient[patient._id]){\r\n            payroll += parseFloat(payrollPerPatient[patient._id][loopNurse] * payrollHourly[loopNurse]);\r\n          }\r\n          payrollTotal += payroll;\r\n        }\r\n          \r\n        pnlDatas.push({\r\n          patient:patient.name,\r\n          level:patient.level,\r\n          revenue:parseInt(revenue),\r\n          payroll:parseInt(payroll),\r\n          pnl:revenue-parseInt(payroll)\r\n        });\r\n        \r\n      });\r\n\r\n      let row={\r\n        patient:\" Total\",\r\n        revenue:revenueTotal,\r\n        payroll:parseInt(payrollTotal),\r\n        pnl:revenueTotal-parseInt(payrollTotal)\r\n      };\r\n      pnlDatas.push(row);\r\n    }else{\r\n      headers = [\r\n        { label: \"Month\", key: \"month\" },\r\n        { label: \"Revenue\", key: \"revenue\" },\r\n        { label: \"Payroll\", key: \"payroll\" },\r\n        { label: \"Profit/Loss\", key: \"pnl\" },\r\n      ];\r\n      let revenue = [];\r\n      basic.patients.map(patient =>{\r\n          for(let month in patient.revenue){\r\n            if(month.slice(4,6) == selYear%100){\r\n              let m = month.slice(0,3);\r\n              revenue[m] == undefined \r\n              ?\r\n              revenue[m] = patient.revenue[month]\r\n              :\r\n              revenue[m] += patient.revenue[month];\r\n            }\r\n          }\r\n      });\r\n      \r\n      for(let month in monthNames){\r\n        if(revenue[month] == undefined){revenue[month] = 0}\r\n        if(payrollPerMonth[month] == undefined){payrollPerMonth[month] = 0}\r\n        pnlDatas.push({\r\n          month:month,\r\n          revenue:revenue[month],\r\n          payroll:payrollPerMonth[month],\r\n          pnl:revenue[month]-payrollPerMonth[month],\r\n        });\r\n      }\r\n\r\n      let row={};\r\n      revenue = Object.values(revenue).reduce((a,b) => a+b,0)\r\n      let payroll = Object.values(payrollPerMonth).reduce((a,b) => a+b,0);\r\n      let pnl = revenue - payroll\r\n      row.month = 'Total';\r\n      row.revenue = revenue;\r\n      row.payroll = payroll;\r\n      row.pnl = pnl;\r\n      \r\n      pnlDatas.push(row);\r\n    }\r\n\r\n    const conditionalRowStyles = [\r\n        {\r\n          when: (row) => row.month == 'Total' || row.patient == 'Total',\r\n          style: row => ({\r\n            backgroundColor: 'rgb(160,160,160)',\r\n          }),\r\n        }\r\n    ];\r\n\r\n    return (\r\n      <MDBContainer>\r\n          <div className=\"pt-5 text-center text-dark\">\r\n            <h1 className=\"mt-3\">PROFIT & LOSS</h1>\r\n          </div>\r\n          <MDBRow className=\" align-items-center justify-content-center\">\r\n            <MDBCol md=\"2\">\r\n              <Form.Group>\r\n                <Form.Control type=\"number\" value={selYear} placeholder=\"Year\" onChange = {(e) =>this.onChangeYear(e)}/>\r\n              </Form.Group>\r\n            </MDBCol>\r\n            {perPatient &&\r\n            <MDBCol md=\"2\">\r\n                <Form.Group>\r\n                  <Form.Select aria-label=\"select\" value={selMonth} onChange = {(e) =>this.onChangeMonth(e)}>\r\n                    {\r\n                      MonthSelect\r\n                    }\r\n                  </Form.Select>\r\n                </Form.Group>\r\n                </MDBCol>\r\n                }          \r\n            <MDBCol md=\"2\" className='pt-3'>\r\n              <Form.Check \r\n                checked ={perPatient}\r\n                type=\"checkbox\"\r\n                isValid={true}\r\n                label=\"Per Patient\"\r\n                onChange = {(e) => this.viewPerPatient(e)}\r\n              />\r\n           \r\n            </MDBCol>\r\n             <MDBCol md=\"2\" className=\"float-right\" >\r\n              <CSVLink \r\n                headers={headers}\r\n                data={pnlDatas}\r\n                filename={\"pnl.csv\"}\r\n                className=\"btn btn-success \"\r\n                target=\"_blank\"\r\n                >\r\n                <IoMdDownload />Export \r\n              </CSVLink>\r\n           </MDBCol>\r\n          </MDBRow>\r\n        <MDBRow className='mt-2'>  \r\n            <DataTable\r\n                columns={pnlColumns} \r\n                data={pnlDatas}\r\n                filter={true}\r\n                fixedHeader\r\n                striped\r\n                conditionalRowStyles={conditionalRowStyles}\r\n                fixedHeaderScrollHeight={'60vh'}\r\n                // pagination\r\n            />\r\n\r\n                  \r\n          </MDBRow>\r\n    \r\n      </MDBContainer>\r\n       \r\n    );\r\n  };\r\n}\r\n\r\nconst mapStateToProps = (BasicData) => ({\r\n  basic:BasicData.BasicData\r\n});\r\n\r\nexport default connect(mapStateToProps,null)(PNL)","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}"],"names":["PNL","props","onChangeYear","e","setState","state","selYear","target","value","levelModalChange","selLevel","onChangeMonth","selMonth","viewPerPatient","perPatient","date","Date","year","getFullYear","month","getMonth","data","key","total","forEach","item","row","percentage","netProfit","revenue","toFixed","json","ret","this","basic","monthNames","monthNumbers","swap","Mon","Object","keys","NoMon","values","MonthSelect","map","index","pnlColumns","pnlDatas","push","name","center","wrap","sortable","filterable","selector","patient","level","toLocaleString","payroll","pnl","getPercentage","holidays","holidaysPerMonth","holiday","slice","undefined","sundaysPerMonth","loopMonth","daysInMonth","getDate","firstDate","getDay","selDay","day","payrollPerMonth","payrollPerPatient","payrollHourly","headers","nurses","nurse","salary","basic_allowances","housing_allowances","other_allowances","leaves","leave","leavedaysPerMonth","from","to","betweenDay","setDate","rotas","rota","rotaPerMonth","rotaHolidayPerMonth","startsWith","hour","includes","patient_id","_id","offDaysPerMonth","dutyHoursPerMonth","Set","length","basicPerDay","parseFloat","holidayPerDay","reducePerDay","overtime","holidayovertime","parseInt","joined","revenueTotal","payrollTotal","patients","label","loopNurse","m","reduce","a","b","className","md","type","placeholder","onChange","checked","isValid","CSVLink","filename","columns","filter","fixedHeader","striped","conditionalRowStyles","when","style","backgroundColor","fixedHeaderScrollHeight","Component","connect","BasicData","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","i","F","s","n","done","_e","f","TypeError","err","normalCompletion","didErr","call","step","next","_e2"],"sourceRoot":""}