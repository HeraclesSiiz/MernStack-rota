{"version":3,"file":"static/js/900.19455e41.chunk.js","mappings":"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","sources":["pages/dashboard.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./../css/App.css\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  MDBCol,\r\n  MDBContainer,\r\n  MDBRow,\r\n  MDBCard,\r\n  MDBCardBody,\r\n  MDBCardImage,\r\n  MDBCardTitle,\r\n  MDBProgress,\r\n  MDBProgressBar,\r\n} from \"mdb-react-ui-kit\";\r\nimport { Form } from \"react-bootstrap\";\r\n\r\nimport { CChart } from \"@coreui/react-chartjs\";\r\n\r\nclass DashBoard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let date = new Date();\r\n    let year = date.getFullYear();\r\n    let month =\r\n      date.getMonth() + 1 > 9\r\n        ? date.getMonth() + 1\r\n        : \"0\" + (date.getMonth() + 1);\r\n\r\n    this.state = {\r\n      selYear: year,\r\n      selMonth: month,\r\n    };\r\n  }\r\n  componentDidMount() {}\r\n\r\n  onChangeYear = (e) => {\r\n    this.setState({\r\n      ...this.state,\r\n      selYear: e.target.value,\r\n    });\r\n  };\r\n\r\n  onChangeMonth = (e) => {\r\n    this.setState({\r\n      ...this.state,\r\n      selMonth: e.target.value,\r\n    });\r\n  };\r\n\r\n  swap(json) {\r\n    let ret = [];\r\n    for (var key in json) {\r\n      ret[json[key]] = key;\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  render() {\r\n    const { selYear, selMonth } = this.state;\r\n    const { basic } = this.props;\r\n\r\n    let nurseDatas = [\r\n      {\r\n        members: 0,\r\n        available: 0,\r\n        assigned: 0,\r\n        overtime: 0,\r\n        utilization: 0,\r\n      },\r\n      {\r\n        members: 0,\r\n        available: 0,\r\n        assigned: 0,\r\n        overtime: 0,\r\n        utilization: 0,\r\n      },\r\n      {\r\n        members: 0,\r\n        available: 0,\r\n        assigned: 0,\r\n        overtime: 0,\r\n        utilization: 0,\r\n      },\r\n    ];\r\n\r\n    let monthNames = basic.monthNames;\r\n    let monthNumbers = this.swap(monthNames);\r\n    const monthName = monthNumbers[selMonth];\r\n\r\n    let Mon = Object.keys(monthNames);\r\n    let NoMon = Object.values(monthNames);\r\n\r\n    const MonthSelect = Mon.map((month, index) => (\r\n      <option key={index} value={NoMon[index]}>{month}</option>\r\n    ));\r\n\r\n    let daysInMonth = new Date(selYear, selMonth, 0).getDate();\r\n    let from = selYear + \"-\" + selMonth + \"-01\";\r\n    let to = selYear + \"-\" + selMonth + \"-\" + daysInMonth;\r\n\r\n    //get holidays per month\r\n    let holidays = basic.holidays;\r\n    let holidaysInMonth = [];\r\n    let holidaysPerMonth = [];\r\n\r\n    holidays.map((holiday) => {//holiday loop\r\n      let key = monthNumbers[holiday.slice(0, 2)];\r\n      if (holidaysPerMonth[key] == undefined) {\r\n        holidaysPerMonth[key] = [];\r\n      }\r\n      holidaysPerMonth[key].push(selYear + \"-\" + holiday);\r\n\r\n      if (parseInt(holiday.slice(0, 2)) == selMonth) {\r\n        holidaysInMonth.push(selYear + \"-\" + holiday);\r\n      }\r\n    });\r\n\r\n    //get sundays per month\r\n    let sundaysPerMonth = [];\r\n    for (let loopMonth in monthNumbers) {//12*4\r\n      let daysInMonth = new Date(selYear, loopMonth, 0).getDate();\r\n      let date = selYear + \"-\" + loopMonth + \"-01\";\r\n      let firstDate = new Date(date).getDay();\r\n      if (firstDate == 0) {\r\n        firstDate = 1;\r\n      } else {\r\n        firstDate = 7 - firstDate + 1;\r\n      }\r\n      for (let selDay = firstDate; selDay < daysInMonth; selDay += 7) {//4\r\n        let day = selDay > 9 ? selDay : \"0\" + selDay;\r\n        let key = monthNumbers[loopMonth];\r\n        if (sundaysPerMonth[key] == undefined) {\r\n          sundaysPerMonth[key] = [];\r\n        }\r\n        sundaysPerMonth[key].push(selYear + \"-\" + loopMonth + \"-\" + day);\r\n      }\r\n    }\r\n\r\n    //get payroll\r\n    let payrollPerMonth = [];\r\n    let payrollPerPatient = [];\r\n    let payrollHourly = [];\r\n\r\n    //get average duty hour\r\n    let rotaHourPerMonth = [];\r\n    let rotaHourPerDay = [];\r\n\r\n    rotaHourPerMonth[0] = [];\r\n    rotaHourPerMonth[1] = [];\r\n    rotaHourPerMonth[2] = [];\r\n    rotaHourPerDay[0] = [];\r\n    rotaHourPerDay[1] = [];\r\n    rotaHourPerDay[2] = [];\r\n\r\n    basic.nurses.map((nurse) => {//nurse count * rota count\r\n      let salary =\r\n        nurse.basic_allowances +\r\n        nurse.housing_allowances +\r\n        nurse.other_allowances;\r\n      let nurseLevel = nurse.level;\r\n\r\n      nurseDatas[nurseLevel].members++;\r\n      nurseDatas[2].members++;\r\n\r\n      let rotas = nurse.rota;\r\n      let rotaPerMonth = [];\r\n      let rotaHolidayPerMonth = [];\r\n\r\n      rotas = rotas.filter(rota => \r\n        (rota.date >= from && rota.date <= to ) || rota.date.startsWith(selYear)\r\n      );\r\n\r\n      rotas.map((rota) => {//rota count\r\n        if (rota.date >= from && rota.date <= to) {\r\n          nurseDatas[nurseLevel].assigned += rota.hour * 1;\r\n          nurseDatas[2].assigned += rota.hour * 1;\r\n        }\r\n        if (rota.date.startsWith(selYear)) {\r\n          let monthnum = parseInt(rota.date.slice(5, 7));\r\n          let month = monthNumbers[[rota.date.slice(5, 7)]];\r\n          let day = parseInt(rota.date.slice(8, 10));\r\n          if (rotaPerMonth[month] == undefined) {\r\n            rotaPerMonth[month] = rota.hour;\r\n          } else {\r\n            rotaPerMonth[month] += rota.hour;\r\n          }\r\n\r\n          if (rotaHourPerMonth[nurseLevel][monthnum] == undefined) {\r\n            rotaHourPerMonth[nurseLevel][monthnum] = rota.hour;\r\n          } else {\r\n            rotaHourPerMonth[nurseLevel][monthnum] += rota.hour;\r\n          }\r\n          if (rotaHourPerMonth[2][monthnum] == undefined) {\r\n            rotaHourPerMonth[2][monthnum] = rota.hour;\r\n          } else {\r\n            rotaHourPerMonth[2][monthnum] += rota.hour;\r\n          }\r\n\r\n          if (rota.date.startsWith(selYear + \"-\" + selMonth)) {\r\n            if (rotaHourPerDay[nurseLevel][day] == undefined) {\r\n              rotaHourPerDay[nurseLevel][day] = rota.hour;\r\n            } else {\r\n              rotaHourPerDay[nurseLevel][day] += rota.hour;\r\n            }\r\n            if (rotaHourPerDay[2][day] == undefined) {\r\n              rotaHourPerDay[2][day] = rota.hour;\r\n            } else {\r\n              rotaHourPerDay[2][day] += rota.hour;\r\n            }\r\n          }\r\n\r\n          if (\r\n            holidaysPerMonth[month] != undefined &&\r\n            holidaysPerMonth[month].includes(rota.date)\r\n          ) {\r\n            if (rotaHolidayPerMonth[month] == undefined) {\r\n              rotaHolidayPerMonth[month] = rota.hour;\r\n            } else {\r\n              rotaHolidayPerMonth[month] += rota.hour;\r\n            }\r\n          }\r\n\r\n          if (rota.date.slice(5, 7) == selMonth) {\r\n            if (payrollPerPatient[rota.patient_id] == undefined) {\r\n              payrollPerPatient[rota.patient_id] = [];\r\n            }\r\n            if (payrollPerPatient[rota.patient_id][nurse._id] == undefined) {\r\n              payrollPerPatient[rota.patient_id][nurse._id] = rota.hour;\r\n            } else {\r\n              payrollPerPatient[rota.patient_id][nurse._id] += rota.hour;\r\n            }\r\n          }\r\n        }\r\n      });\r\n      \r\n      //get leavedays per month\r\n      let leaves = nurse.leave;\r\n      let leavedaysPerMonth = [];\r\n\r\n      for (let leave of leaves) {\r\n        let from = new Date(leave.from);\r\n        let to = new Date(leave.to);\r\n        for (let betweenDay = from; betweenDay <= to; ) {\r\n          let year = betweenDay.getFullYear();\r\n          let month =\r\n            betweenDay.getMonth() + 1 > 9\r\n              ? betweenDay.getMonth() + 1\r\n              : \"0\" + (betweenDay.getMonth() + 1);\r\n          let day =\r\n            betweenDay.getDate() > 9\r\n              ? betweenDay.getDate()\r\n              : \"0\" + betweenDay.getDate();\r\n          if (year == selYear && month == selMonth) {\r\n            leavedaysPerMonth.push(year + \"-\" + month + \"-\" + day);\r\n          }\r\n          if (year == selYear) {\r\n            let key = monthNumbers[month];\r\n            if (leavedaysPerMonth[key] == undefined) {\r\n              leavedaysPerMonth[key] = [];\r\n            }\r\n            leavedaysPerMonth[key].push(year + \"-\" + month + \"-\" + day);\r\n          }\r\n\r\n          betweenDay.setDate(betweenDay.getDate() + 1);\r\n        }\r\n      }\r\n\r\n      let offdays = [\r\n        ...leavedaysPerMonth,\r\n        ...holidaysInMonth,\r\n        ...sundaysPerMonth[monthName],\r\n      ];\r\n      offdays = [...new Set(offdays)];\r\n      nurseDatas[nurseLevel].available += (daysInMonth - offdays.length) * 8;\r\n      nurseDatas[2].available += (daysInMonth - offdays.length) * 8;\r\n\r\n      //datatable set\r\n      let offDaysPerMonth = [];\r\n      let dutyHoursPerMonth = [];\r\n      for (let loopMonth in monthNames) {\r\n        let daysInMonth = new Date(selYear, monthNames[loopMonth], 0).getDate();\r\n        if (leavedaysPerMonth[loopMonth] == undefined) {\r\n          leavedaysPerMonth[loopMonth] = [];\r\n        }\r\n        if (holidaysPerMonth[loopMonth] == undefined) {\r\n          holidaysPerMonth[loopMonth] = [];\r\n        }\r\n        if (sundaysPerMonth[loopMonth] == undefined) {\r\n          sundaysPerMonth[loopMonth] = [];\r\n        }\r\n\r\n        offDaysPerMonth[loopMonth] = [\r\n          ...leavedaysPerMonth[loopMonth],\r\n          ...holidaysPerMonth[loopMonth],\r\n          ...sundaysPerMonth[loopMonth],\r\n        ];\r\n        offDaysPerMonth[loopMonth] = [...new Set(offDaysPerMonth[loopMonth])];\r\n        dutyHoursPerMonth[loopMonth] =\r\n          (daysInMonth - offDaysPerMonth[loopMonth].length) * 8;\r\n\r\n        if (rotaPerMonth[loopMonth] == undefined) {\r\n          rotaPerMonth[loopMonth] = 0;\r\n        }\r\n        if (rotaHolidayPerMonth[loopMonth] == undefined) {\r\n          rotaHolidayPerMonth[loopMonth] = 0;\r\n        }\r\n        if (payrollPerMonth[loopMonth] == undefined) {\r\n          payrollPerMonth[loopMonth] = 0;\r\n        }\r\n\r\n        if (rotaPerMonth[loopMonth]) {\r\n          let basicPerDay = parseFloat((nurse.basic_allowances * 15) / 365 / 8);\r\n          let holidayPerDay = parseFloat(\r\n            (nurse.basic_allowances * 18) / 365 / 8\r\n          );\r\n          let reducePerDay = parseFloat((salary * 12) / 365);\r\n\r\n          if (\r\n            dutyHoursPerMonth[loopMonth] < rotaPerMonth[loopMonth]\r\n            //  && rotaPerMonth[loopMonth] >= 192\r\n          ) {\r\n            let overtime =\r\n              rotaPerMonth[loopMonth] - dutyHoursPerMonth[loopMonth];\r\n            let holidayovertime = 0;\r\n\r\n            if (rotaHolidayPerMonth[loopMonth] != undefined) {\r\n              if (overtime <= rotaHolidayPerMonth[loopMonth]) {\r\n                holidayovertime = overtime;\r\n                overtime = 0;\r\n              } else {\r\n                overtime -= rotaHolidayPerMonth[loopMonth];\r\n                holidayovertime = rotaHolidayPerMonth[loopMonth];\r\n              }\r\n            }\r\n            salary += parseInt(\r\n              basicPerDay * overtime + holidayPerDay * holidayovertime\r\n            );\r\n          }\r\n\r\n          if (selYear == parseInt(nurse.date.slice(0, 4))) {\r\n            let joined = nurse.date;\r\n            if (monthNames[loopMonth] < joined.slice(5, 7)) {\r\n              salary = 0;\r\n            } else if (monthNames[loopMonth] == joined.slice(5, 7)) {\r\n              salary =\r\n                salary -\r\n                parseInt(reducePerDay * (parseInt(joined.slice(8, 10)) - 1));\r\n            }\r\n          } else if (selYear < parseInt(nurse.date.slice(0, 4))) {\r\n            salary = 0;\r\n          }\r\n          payrollPerMonth[loopMonth] += salary;\r\n          if (monthNames[loopMonth] == selMonth) {\r\n            payrollHourly[nurse._id] = parseFloat(\r\n              salary / rotaPerMonth[loopMonth]\r\n            );\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    nurseDatas.map((nurseData) => {\r\n      nurseData.overtime = nurseData.assigned * 1 - nurseData.available * 1;\r\n      if (nurseData.available * 1 == 0) {\r\n        nurseData.utilization = 0;\r\n      } else {\r\n        nurseData.utilization = parseInt(\r\n          ((nurseData.assigned * 1) / nurseData.available) * 1 * 100\r\n        );\r\n      }\r\n    });\r\n\r\n    let revenue = [];\r\n    basic.patients.map((patient) => {//patient count * revenue\r\n      for (let month in patient.revenue) {\r\n        if (month.slice(4, 6) == selYear % 100) {\r\n          let m = month.slice(0, 3);\r\n          revenue[m] == undefined\r\n            ? (revenue[m] = patient.revenue[month])\r\n            : (revenue[m] += patient.revenue[month]);\r\n        }\r\n      }\r\n    });\r\n\r\n    let pnlDatas = [],\r\n      revenueDatas = [],\r\n      payrollDatas = [];\r\n    for (let month in monthNames) {//12\r\n      if (revenue[month] == undefined) {\r\n        revenue[month] = 0;\r\n      }\r\n      if (payrollPerMonth[month] == undefined) {\r\n        payrollPerMonth[month] = 0;\r\n      }\r\n\r\n      revenueDatas.push(revenue[month]);\r\n      payrollDatas.push(payrollPerMonth[month]);\r\n      pnlDatas.push(revenue[month] - payrollPerMonth[month]);\r\n    }\r\n\r\n    let days = [];\r\n    for (let j = 0; j < 3; j++) {//3 * 30\r\n      for (let i = 1; i <= daysInMonth; i++) {\r\n        if (j == 0) {\r\n          days.push(i);\r\n        }\r\n        if (rotaHourPerDay[j][i] == undefined) {\r\n          rotaHourPerDay[j][i] = 0;\r\n        }\r\n        rotaHourPerDay[j][i] = parseFloat(\r\n          rotaHourPerDay[j][i] / nurseDatas[j].members\r\n        ).toFixed(2);\r\n      }\r\n      for (let i = 1; i <= 12; i++) {\r\n        if (rotaHourPerMonth[j][i] == undefined) {\r\n          rotaHourPerMonth[j][i] = 0;\r\n        }\r\n        rotaHourPerMonth[j][i] = parseFloat(\r\n          rotaHourPerMonth[j][i] / nurseDatas[j].members\r\n        ).toFixed(2);\r\n      }\r\n      rotaHourPerDay[j].splice(0, 1);\r\n      rotaHourPerMonth[j].splice(0, 1);\r\n    }\r\n\r\n    return (\r\n      <MDBContainer>\r\n        <MDBRow className=\"pt-5 mt-3 align-items-center justify-content-center\">\r\n          <MDBCol md=\"2\">\r\n            <Form.Group>\r\n              <Form.Control\r\n                type=\"number\"\r\n                value={selYear}\r\n                placeholder=\"Year\"\r\n                min={2022}\r\n                max={new Date().getFullYear() + 1}\r\n                onChange={(e) => this.onChangeYear(e)}\r\n              />\r\n            </Form.Group>\r\n          </MDBCol>\r\n          <MDBCol md=\"2\">\r\n            <Form.Group>\r\n              <Form.Select\r\n                aria-label=\"select\"\r\n                value={selMonth}\r\n                onChange={(e) => this.onChangeMonth(e)}\r\n              >\r\n                {MonthSelect}\r\n              </Form.Select>\r\n            </Form.Group>\r\n          </MDBCol>\r\n        </MDBRow>\r\n\r\n        <MDBRow className=\"mt-3\">\r\n          <MDBCol>\r\n            <MDBCard>\r\n              <MDBCardImage\r\n                src=\"1.webp\"\r\n                alt=\"...\"\r\n                position=\"top\"\r\n              />\r\n              <MDBCardBody>\r\n                <MDBCardTitle>Members</MDBCardTitle>\r\n                <MDBProgress className=\"mb-1\" height=\"15\">\r\n                  <MDBProgressBar width=\"100\" valuemin={0} valuemax={100}>\r\n                    {nurseDatas[2].members}\r\n                  </MDBProgressBar>\r\n                </MDBProgress>\r\n                <MDBProgress height=\"15\">\r\n                  <MDBProgressBar\r\n                    bgColor=\"success\"\r\n                    width={\r\n                      nurseDatas[2].members == 0\r\n                        ? 0\r\n                        : (nurseDatas[0].members / nurseDatas[2].members) * 100\r\n                    }\r\n                    valuemin={0}\r\n                    valuemax={100}\r\n                  >\r\n                    {nurseDatas[0].members}\r\n                  </MDBProgressBar>\r\n                  <MDBProgressBar\r\n                    bgColor=\"info\"\r\n                    width={\r\n                      nurseDatas[2].members == 0\r\n                        ? 0\r\n                        : (nurseDatas[1].members / nurseDatas[2].members) * 100\r\n                    }\r\n                    valuemin={0}\r\n                    valuemax={100}\r\n                  >\r\n                    {nurseDatas[1].members}\r\n                  </MDBProgressBar>\r\n                </MDBProgress>\r\n              </MDBCardBody>\r\n            </MDBCard>\r\n          </MDBCol>\r\n          <MDBCol>\r\n            <MDBCard>\r\n              <MDBCardImage\r\n                src=\"2.webp\"\r\n                alt=\"...\"\r\n                position=\"top\"\r\n              />\r\n              <MDBCardBody>\r\n                <MDBCardTitle>Available</MDBCardTitle>\r\n                <MDBProgress className=\"mb-1\" height=\"15\">\r\n                  <MDBProgressBar width=\"100\" valuemin={0} valuemax={100}>\r\n                    {nurseDatas[2].available}\r\n                  </MDBProgressBar>\r\n                </MDBProgress>\r\n                <MDBProgress height=\"15\">\r\n                  <MDBProgressBar\r\n                    bgColor=\"success\"\r\n                    width={\r\n                      nurseDatas[2].available == 0\r\n                        ? 0\r\n                        : (nurseDatas[0].available / nurseDatas[2].available) *\r\n                          100\r\n                    }\r\n                    valuemin={0}\r\n                    valuemax={100}\r\n                  >\r\n                    {nurseDatas[0].available}\r\n                  </MDBProgressBar>\r\n                  <MDBProgressBar\r\n                    bgColor=\"info\"\r\n                    width={\r\n                      nurseDatas[2].available == 0\r\n                        ? 0\r\n                        : (nurseDatas[1].available / nurseDatas[2].available) *\r\n                          100\r\n                    }\r\n                    valuemin={0}\r\n                    valuemax={100}\r\n                  >\r\n                    {nurseDatas[1].available}\r\n                  </MDBProgressBar>\r\n                </MDBProgress>\r\n              </MDBCardBody>\r\n            </MDBCard>\r\n          </MDBCol>\r\n          <MDBCol>\r\n            <MDBCard>\r\n              <MDBCardImage\r\n                src=\"3.webp\"\r\n                alt=\"...\"\r\n                position=\"top\"\r\n              />\r\n              <MDBCardBody>\r\n                <MDBCardTitle>Assigned</MDBCardTitle>\r\n                <MDBProgress className=\"mb-1\" height=\"15\">\r\n                  <MDBProgressBar width=\"100\" valuemin={0} valuemax={100}>\r\n                    {nurseDatas[2].assigned}\r\n                  </MDBProgressBar>\r\n                </MDBProgress>\r\n                <MDBProgress height=\"15\">\r\n                  <MDBProgressBar\r\n                    bgColor=\"success\"\r\n                    width={\r\n                      nurseDatas[2].assigned == 0\r\n                        ? 0\r\n                        : (nurseDatas[0].assigned / nurseDatas[2].assigned) *\r\n                          100\r\n                    }\r\n                    valuemin={0}\r\n                    valuemax={100}\r\n                  >\r\n                    {nurseDatas[0].assigned}\r\n                  </MDBProgressBar>\r\n                  <MDBProgressBar\r\n                    bgColor=\"info\"\r\n                    width={\r\n                      nurseDatas[2].assigned == 0\r\n                        ? 0\r\n                        : (nurseDatas[1].assigned / nurseDatas[2].assigned) *\r\n                          100\r\n                    }\r\n                    valuemin={0}\r\n                    valuemax={100}\r\n                  >\r\n                    {nurseDatas[1].assigned}\r\n                  </MDBProgressBar>\r\n                </MDBProgress>\r\n              </MDBCardBody>\r\n            </MDBCard>\r\n          </MDBCol>\r\n          <MDBCol>\r\n            <MDBCard>\r\n              <MDBCardImage\r\n                src=\"4.webp\"\r\n                alt=\"...\"\r\n                position=\"top\"\r\n              />\r\n              <MDBCardBody>\r\n                <MDBCardTitle>Overtime</MDBCardTitle>\r\n                <MDBProgress className=\"mb-1\" height=\"15\">\r\n                  <MDBProgressBar width=\"100\" valuemin={0} valuemax={100}>\r\n                    {nurseDatas[2].overtime}\r\n                  </MDBProgressBar>\r\n                </MDBProgress>\r\n                <MDBProgress height=\"15\">\r\n                  <MDBProgressBar\r\n                    bgColor=\"success\"\r\n                    width={\r\n                      nurseDatas[2].overtime == 0\r\n                        ? 0\r\n                        : (nurseDatas[0].overtime / nurseDatas[2].overtime) *\r\n                          100\r\n                    }\r\n                    valuemin={0}\r\n                    valuemax={100}\r\n                  >\r\n                    {nurseDatas[0].overtime}\r\n                  </MDBProgressBar>\r\n                  <MDBProgressBar\r\n                    bgColor=\"info\"\r\n                    width={\r\n                      nurseDatas[2].overtime == 0\r\n                        ? 0\r\n                        : (nurseDatas[1].overtime / nurseDatas[2].overtime) *\r\n                          100\r\n                    }\r\n                    valuemin={0}\r\n                    valuemax={100}\r\n                  >\r\n                    {nurseDatas[1].overtime}\r\n                  </MDBProgressBar>\r\n                </MDBProgress>\r\n              </MDBCardBody>\r\n            </MDBCard>\r\n          </MDBCol>\r\n          <MDBCol>\r\n            <MDBCard>\r\n              <MDBCardImage\r\n                src=\"5.jpg\"\r\n                alt=\"...\"\r\n                position=\"top\"\r\n              />\r\n              <MDBCardBody>\r\n                <MDBCardTitle>Utilization</MDBCardTitle>\r\n                <MDBProgress className=\"mb-1\" height=\"15\">\r\n                  <MDBProgressBar\r\n                    width={nurseDatas[2].utilization}\r\n                    valuemin={0}\r\n                    valuemax={100}\r\n                  >\r\n                    {nurseDatas[2].utilization + \"%\"}\r\n                  </MDBProgressBar>\r\n                </MDBProgress>\r\n                <MDBRow>\r\n                  <MDBCol>\r\n                    <MDBProgress>\r\n                      <MDBProgressBar\r\n                        bgColor=\"success\"\r\n                        width={nurseDatas[0].utilization}\r\n                        valuemin={0}\r\n                        valuemax={100}\r\n                      >\r\n                        {nurseDatas[0].utilization + \"%\"}\r\n                      </MDBProgressBar>\r\n                    </MDBProgress>\r\n                  </MDBCol>\r\n                  <MDBCol>\r\n                    <MDBProgress>\r\n                      <MDBProgressBar\r\n                        bgColor=\"info\"\r\n                        width={nurseDatas[1].utilization}\r\n                        valuemin={0}\r\n                        valuemax={100}\r\n                      >\r\n                        {nurseDatas[1].utilization + \"%\"}\r\n                      </MDBProgressBar>\r\n                    </MDBProgress>\r\n                  </MDBCol>\r\n                </MDBRow>\r\n              </MDBCardBody>\r\n            </MDBCard>\r\n          </MDBCol>\r\n        </MDBRow>\r\n\r\n        <MDBRow className=\"mt-2\">\r\n          <MDBCol>\r\n            <MDBProgress height=\"15\">\r\n              <MDBProgressBar\r\n                bgColor=\"primary\"\r\n                width=\"100\"\r\n                valuemin={0}\r\n                valuemax={100}\r\n              >\r\n                Total/Average\r\n              </MDBProgressBar>\r\n            </MDBProgress>\r\n          </MDBCol>\r\n          <MDBCol>\r\n            <MDBProgress height=\"15\">\r\n              <MDBProgressBar\r\n                bgColor=\"success\"\r\n                width=\"100\"\r\n                valuemin={0}\r\n                valuemax={100}\r\n              >\r\n                Registered\r\n              </MDBProgressBar>\r\n            </MDBProgress>\r\n          </MDBCol>\r\n          <MDBCol>\r\n            <MDBProgress height=\"15\">\r\n              <MDBProgressBar\r\n                bgColor=\"info\"\r\n                width=\"100\"\r\n                valuemin={0}\r\n                valuemax={100}\r\n              >\r\n                Assistant\r\n              </MDBProgressBar>\r\n            </MDBProgress>\r\n          </MDBCol>\r\n        </MDBRow>\r\n        <MDBRow>\r\n          <MDBCol>\r\n            <CChart\r\n              type=\"line\"\r\n              data={{\r\n                labels: Mon,\r\n                datasets: [\r\n                  {\r\n                    label: \"Average\",\r\n                    backgroundColor: \"#00f\",\r\n                    borderColor: \"#00f\",\r\n                    pointBackgroundColor: \"#00f\",\r\n                    pointBorderColor: \"#f00\",\r\n                    data: rotaHourPerMonth[2],\r\n                  },\r\n                  {\r\n                    label: \"Registered\",\r\n                    backgroundColor: \"#0f0\",\r\n                    borderColor: \"#0f0\",\r\n                    pointBackgroundColor: \"#0f0\",\r\n                    pointBorderColor: \"#f00\",\r\n                    data: rotaHourPerMonth[0],\r\n                  },\r\n                  {\r\n                    label: \"Assistant\",\r\n                    backgroundColor: \"#0dcaf0\",\r\n                    borderColor: \"#0dcaf0\",\r\n                    pointBackgroundColor: \"#0dcaf0\",\r\n                    pointBorderColor: \"#f00\",\r\n                    data: rotaHourPerMonth[1],\r\n                  },\r\n                ],\r\n              }}\r\n              options={{\r\n                maintainAspectRatio: true,\r\n                plugins: {\r\n                  legend: {\r\n                    display: true,\r\n                  },\r\n                },\r\n                elements: {\r\n                  line: {\r\n                    tension: 0.5,\r\n                  },\r\n                  point: {\r\n                    radius: 3,\r\n                    hitRadius: 10,\r\n                    hoverRadius: 5,\r\n                    hoverBorderWidth: 3,\r\n                  },\r\n                },\r\n              }}\r\n            />\r\n          </MDBCol>\r\n          <MDBCol>\r\n            <CChart\r\n              type=\"line\"\r\n              data={{\r\n                labels: Mon,\r\n                datasets: [\r\n                  {\r\n                    label: \"Revenue\",\r\n                    backgroundColor: \"#00f\",\r\n                    borderColor: \"#00f\",\r\n                    pointBackgroundColor: \"#00f\",\r\n                    pointBorderColor: \"#f00\",\r\n                    data: revenueDatas,\r\n                  },\r\n                  {\r\n                    label: \"Payroll\",\r\n                    backgroundColor: \"#0f0\",\r\n                    borderColor: \"#0f0\",\r\n                    pointBackgroundColor: \"#0f0\",\r\n                    pointBorderColor: \"#f00\",\r\n                    data: payrollDatas,\r\n                  },\r\n                  {\r\n                    label: \"PNL\",\r\n                    backgroundColor: \"#0dcaf0\",\r\n                    borderColor: \"#0dcaf0\",\r\n                    pointBackgroundColor: \"#0dcaf0\",\r\n                    pointBorderColor: \"#f00\",\r\n                    data: pnlDatas,\r\n                  },\r\n                ],\r\n              }}\r\n              options={{\r\n                maintainAspectRatio: true,\r\n                plugins: {\r\n                  legend: {\r\n                    display: true,\r\n                  },\r\n                },\r\n                elements: {\r\n                  line: {\r\n                    tension: 0.5,\r\n                  },\r\n                  point: {\r\n                    radius: 3,\r\n                    hitRadius: 10,\r\n                    hoverRadius: 5,\r\n                    hoverBorderWidth: 3,\r\n                  },\r\n                },\r\n              }}\r\n            />\r\n          </MDBCol>\r\n        </MDBRow>\r\n        {/* <CChart\r\n          type=\"bar\"\r\n          data={{\r\n            labels: days,\r\n            datasets: [\r\n              {\r\n                label: \"Average\",\r\n                backgroundColor: \"#00f\",\r\n                borderColor: \"#00f\",\r\n                pointBackgroundColor: \"#00f\",\r\n                pointBorderColor: \"#f00\",\r\n                data: rotaHourPerDay[2],\r\n              },\r\n              {\r\n                label: \"Registered\",\r\n                backgroundColor: \"#0f0\",\r\n                borderColor: \"#0f0\",\r\n                pointBackgroundColor: \"#0f0\",\r\n                pointBorderColor: \"#f00\",\r\n                data: rotaHourPerDay[0],\r\n              },\r\n              {\r\n                label: \"Assistant\",\r\n                backgroundColor: \"#0dcaf0\",\r\n                borderColor: \"#0dcaf0\",\r\n                pointBackgroundColor: \"#0dcaf0\",\r\n                pointBorderColor: \"#f00\",\r\n                data: rotaHourPerDay[1],\r\n              },\r\n            ],\r\n          }}\r\n          options={{\r\n            maintainAspectRatio: true,\r\n            plugins: {\r\n              legend: {\r\n                display: true,\r\n              },\r\n            },\r\n            elements: {\r\n              line: {\r\n                tension: 0.5,\r\n              },\r\n              point: {\r\n                radius: 3,\r\n                hitRadius: 10,\r\n                hoverRadius: 5,\r\n                hoverBorderWidth: 3,\r\n              },\r\n            },\r\n          }}\r\n        /> */}\r\n      </MDBContainer>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (BasicData) => ({\r\n  basic: BasicData.BasicData,\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(DashBoard);\r\n"],"names":["DashBoard","props","onChangeYear","e","setState","state","selYear","target","value","onChangeMonth","selMonth","date","Date","year","getFullYear","month","getMonth","json","ret","key","this","basic","nurseDatas","members","available","assigned","overtime","utilization","monthNames","monthNumbers","swap","monthName","Mon","Object","keys","NoMon","values","MonthSelect","map","index","daysInMonth","getDate","from","to","holidays","holidaysInMonth","holidaysPerMonth","holiday","slice","undefined","push","parseInt","sundaysPerMonth","loopMonth","firstDate","getDay","selDay","day","payrollPerMonth","payrollPerPatient","payrollHourly","rotaHourPerMonth","rotaHourPerDay","nurses","nurse","salary","basic_allowances","housing_allowances","other_allowances","nurseLevel","level","rotas","rota","rotaPerMonth","rotaHolidayPerMonth","filter","startsWith","hour","monthnum","includes","patient_id","_id","leaves","leave","leavedaysPerMonth","betweenDay","setDate","offdays","Set","length","offDaysPerMonth","dutyHoursPerMonth","basicPerDay","parseFloat","holidayPerDay","reducePerDay","holidayovertime","joined","nurseData","revenue","patients","patient","m","pnlDatas","revenueDatas","payrollDatas","days","j","i","toFixed","splice","className","md","type","placeholder","min","max","onChange","src","alt","position","height","width","valuemin","valuemax","bgColor","data","labels","datasets","label","backgroundColor","borderColor","pointBackgroundColor","pointBorderColor","options","maintainAspectRatio","plugins","legend","display","elements","line","tension","point","radius","hitRadius","hoverRadius","hoverBorderWidth","Component","connect","BasicData"],"sourceRoot":""}