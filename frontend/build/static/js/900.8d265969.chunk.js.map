{"version":3,"file":"static/js/900.8d265969.chunk.js","mappings":"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","sources":["pages/dashboard.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport './../css/App.css';\r\nimport {connect} from 'react-redux'\r\nimport {\r\n  MDBCol,MDBContainer,MDBRow,MDBCard,MDBCardBody,MDBCardImage,MDBCardTitle,MDBProgress,MDBProgressBar\r\n} from 'mdb-react-ui-kit';\r\nimport {Form} from 'react-bootstrap';\r\nimport {CWidgetStatsB\r\n} from '@coreui/react';\r\n\r\nimport { CChart } from '@coreui/react-chartjs';\r\n\r\n\r\nclass DashBoard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    let date = new Date();\r\n    let year = date.getFullYear();\r\n    let month = date.getMonth()+1>9?date.getMonth()+1:'0'+(date.getMonth()+1);\r\n    \r\n    this.state = {\r\n      selYear:year,\r\n      selMonth:month\r\n    };\r\n  }\r\n  componentDidMount() {\r\n  }\r\n  \r\n  onChangeYear = (e) =>{\r\n    this.setState({\r\n      ...this.state,\r\n      selYear:e.target.value,\r\n    });\r\n  }\r\n\r\n  onChangeMonth = (e) =>{\r\n    this.setState({\r\n      ...this.state,\r\n      selMonth:e.target.value,\r\n    });\r\n  }\r\n  \r\n  swap(json){\r\n    let ret = [];\r\n    for(var key in json){\r\n      ret[json[key]] = key;\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  render() {\r\n    const {selYear,selMonth} = this.state;\r\n    const {basic} =this.props;\r\n\r\n    let nurseDatas = [{\r\n      members:0,\r\n      available:0,\r\n      assigned:0,\r\n      overtime:0,\r\n      utilization:0\r\n    },\r\n    {\r\n      members:0,\r\n      available:0,\r\n      assigned:0,\r\n      overtime:0,\r\n      utilization:0\r\n    },\r\n    {\r\n      members:0,\r\n      available:0,\r\n      assigned:0,\r\n      overtime:0,\r\n      utilization:0\r\n    }];\r\n\r\n    let monthNames = basic.monthNames;\r\n    let monthNumbers = this.swap(monthNames);\r\n    \r\n    let Mon = Object.keys(monthNames);\r\n    let NoMon = Object.values(monthNames);\r\n    \r\n    const MonthSelect = Mon.map((month,index) =>\r\n      <option value={NoMon[index]}>{month}</option>\r\n    );\r\n\r\n    let daysInMonth = new Date(selYear, selMonth, 0). getDate();\r\n    let from = selYear+'-'+selMonth+'-01';\r\n    let to = selYear+'-'+selMonth+'-'+daysInMonth;\r\n\r\n    //get holidays per month\r\n    let holidays = basic.holidays;\r\n    let holidaysInMonth = [];\r\n    let holidaysPerMonth = [];\r\n\r\n    holidays.map(holiday =>{\r\n      let key = monthNumbers[holiday.slice(0,2)];\r\n      if(holidaysPerMonth[key] == undefined){holidaysPerMonth[key] = [];}\r\n      holidaysPerMonth[key].push(selYear+'-'+holiday);\r\n\r\n      if(parseInt(holiday.slice(0,2)) == selMonth){\r\n        holidaysInMonth.push(selYear+'-'+holiday);\r\n      }\r\n    });\r\n    \r\n    //get sundays in month\r\n    let SundaysInMonth = [];\r\n    \r\n    let date = selYear+'-'+selMonth+'-01';\r\n    let firstDate = new Date(date).getDay();\r\n    if(firstDate == 0){firstDate = 7}\r\n    for(let selDay = firstDate;selDay < daysInMonth;selDay+=7){\r\n      let day = selDay > 9?selDay:'0'+selDay;\r\n      SundaysInMonth.push(selYear+'-'+selMonth+'-'+day);\r\n    }\r\n    \r\n    //get sundays per month\r\n    let sundaysPerMonth = [];\r\n    for(let loopMonth in monthNumbers){\r\n      let daysInMonth = new Date(selYear, loopMonth, 0).getDate();\r\n      let date = selYear+'-'+loopMonth+'-01';\r\n      let firstDate = new Date(date).getDay();\r\n      if(firstDate == 0){firstDate = 1}else{firstDate = 7-firstDate+1}\r\n      for(let selDay = firstDate;selDay < daysInMonth;selDay+=7){\r\n        let day = selDay > 9?selDay:'0'+selDay;\r\n        let key = monthNumbers[loopMonth];\r\n        if(sundaysPerMonth[key] == undefined){sundaysPerMonth[key] = [];}\r\n        sundaysPerMonth[key].push(selYear+'-'+loopMonth+'-'+day);\r\n      }\r\n    }\r\n\r\n    //get payroll\r\n    let payrollPerMonth = []; \r\n    let payrollPerPatient = [];\r\n    let payrollHourly = [];\r\n    \r\n    //get average duty hour\r\n    let rotaHourPerMonth = [];\r\n    let rotaHourPerDay = [];\r\n\r\n    rotaHourPerMonth[0] = [];\r\n    rotaHourPerMonth[1] = [];\r\n    rotaHourPerMonth[2] = [];\r\n    rotaHourPerDay[0] = [];\r\n    rotaHourPerDay[1] = [];\r\n    rotaHourPerDay[2] = [];\r\n\r\n    basic.nurses.map((nurse) =>{\r\n      let salary = nurse.basic_allowances+nurse.housing_allowances+nurse.other_allowances;\r\n      let nurseLevel = nurse.level;\r\n\r\n        nurseDatas[nurseLevel].members++;\r\n        nurseDatas[2].members++;\r\n        \r\n        let rotas = nurse.rota;\r\n        let rotaPerMonth = [];\r\n        let rotaHolidayPerMonth = [];\r\n\r\n        rotas.map((rota) =>{\r\n          if(rota.date >= from && rota.date <= to){\r\n            nurseDatas[nurseLevel].assigned += rota.hour*1;\r\n            nurseDatas[2].assigned += rota.hour*1;\r\n          }\r\n          if(rota.date.startsWith(selYear)){\r\n            let monthnum = parseInt(rota.date.slice(5,7));\r\n            let month = monthNumbers[[rota.date.slice(5,7)]];\r\n            let day = parseInt(rota.date.slice(8,10));\r\n            if(rotaPerMonth[month] == undefined){\r\n              rotaPerMonth[month] = rota.hour;\r\n            }else{\r\n              rotaPerMonth[month] += rota.hour;\r\n            }\r\n\r\n            if(rotaHourPerMonth[nurseLevel][monthnum] == undefined){\r\n              rotaHourPerMonth[nurseLevel][monthnum] = rota.hour;\r\n            }else{\r\n              rotaHourPerMonth[nurseLevel][monthnum] += rota.hour;\r\n            }\r\n            if(rotaHourPerMonth[2][monthnum] == undefined){\r\n              rotaHourPerMonth[2][monthnum] = rota.hour;\r\n            }else{\r\n              rotaHourPerMonth[2][monthnum] += rota.hour;\r\n            }\r\n\r\n            if(rota.date.startsWith(selYear+'-'+selMonth)){\r\n              if(rotaHourPerDay[nurseLevel][day] == undefined){\r\n                rotaHourPerDay[nurseLevel][day] = rota.hour;\r\n              }else{\r\n                rotaHourPerDay[nurseLevel][day] += rota.hour;\r\n              }\r\n              if(rotaHourPerDay[2][day] == undefined){\r\n                rotaHourPerDay[2][day] = rota.hour;\r\n              }else{\r\n                rotaHourPerDay[2][day] += rota.hour;\r\n              }\r\n            }\r\n\r\n            if(holidaysPerMonth[month] && holidaysPerMonth[month].includes(rota.date)){\r\n              if(rotaHolidayPerMonth[month] == undefined){\r\n                rotaHolidayPerMonth[month] = rota.hour;\r\n              }else{\r\n                rotaHolidayPerMonth[month] += rota.hour;\r\n              }\r\n            }\r\n\r\n            if(rota.date.slice(5,7) == selMonth){\r\n              if(payrollPerPatient[rota.patient_id] == undefined){payrollPerPatient[rota.patient_id] = []}\r\n              if(payrollPerPatient[rota.patient_id][nurse._id] == undefined){\r\n                payrollPerPatient[rota.patient_id][nurse._id] = rota.hour\r\n              }else{\r\n                payrollPerPatient[rota.patient_id][nurse._id] += rota.hour\r\n              }\r\n            }\r\n          }\r\n        });\r\n\r\n        //get leavedays per month\r\n        let leaves = nurse.leave;\r\n        let leavedaysPerMonth = [];\r\n\r\n        for(let leave of leaves){\r\n          let from = new Date(leave.from);\r\n          let to = new Date(leave.to);\r\n          for(let betweenDay = from;betweenDay <= to;){\r\n            let year = betweenDay.getFullYear();\r\n            let month = betweenDay.getMonth()+1>9?betweenDay.getMonth()+1:'0'+(betweenDay.getMonth()+1);\r\n            let day = betweenDay.getDate()>9?betweenDay.getDate():'0'+betweenDay.getDate();\r\n            if(year == selYear && month == selMonth){\r\n              leavedaysPerMonth.push(year+'-'+month+'-'+day);\r\n            }\r\n            if(year == selYear){\r\n              let key = monthNumbers[month];\r\n              if(leavedaysPerMonth[key] == undefined){leavedaysPerMonth[key] = [];}\r\n              leavedaysPerMonth[key].push(year+'-'+month+'-'+day);\r\n            }\r\n\r\n            betweenDay.setDate(betweenDay.getDate() + 1);\r\n          }\r\n        }\r\n\r\n        let offdays = [...leavedaysPerMonth,...holidaysInMonth,...SundaysInMonth];\r\n        offdays = [...new Set(offdays)];\r\n        nurseDatas[nurseLevel].available += (daysInMonth-offdays.length)*8;\r\n        nurseDatas[2].available += (daysInMonth-offdays.length)*8;\r\n\r\n        //datatable set\r\n        let offDaysPerMonth = [];\r\n        let dutyHoursPerMonth = [];\r\n        for(let loopMonth in monthNames){\r\n          let daysInMonth = new Date(selYear, monthNames[loopMonth], 0).getDate();\r\n          if(leavedaysPerMonth[loopMonth] == undefined){leavedaysPerMonth[loopMonth] = [];}\r\n          if(holidaysPerMonth[loopMonth] == undefined){holidaysPerMonth[loopMonth] = [];}\r\n          if(sundaysPerMonth[loopMonth] == undefined){sundaysPerMonth[loopMonth] = [];}\r\n          \r\n          offDaysPerMonth[loopMonth] = [...leavedaysPerMonth[loopMonth],...holidaysPerMonth[loopMonth],...sundaysPerMonth[loopMonth]];\r\n          offDaysPerMonth[loopMonth] = [...new Set(offDaysPerMonth[loopMonth])];\r\n          dutyHoursPerMonth[loopMonth] = (daysInMonth-offDaysPerMonth[loopMonth].length)*8;\r\n  \r\n          if(rotaPerMonth[loopMonth] == undefined){rotaPerMonth[loopMonth] = 0;}\r\n          if(rotaHolidayPerMonth[loopMonth] == undefined){rotaHolidayPerMonth[loopMonth] = 0;}\r\n          if(payrollPerMonth[loopMonth] == undefined){payrollPerMonth[loopMonth] = 0;}\r\n          \r\n          if(rotaPerMonth[loopMonth]){\r\n            let basicPerDay = parseFloat(nurse.basic_allowances*15/365/8);\r\n            let holidayPerDay = parseFloat(nurse.basic_allowances*18/365/8);\r\n            let reducePerDay = parseFloat(salary*12/365);\r\n\r\n            if(dutyHoursPerMonth[loopMonth] < rotaPerMonth[loopMonth] \r\n              //  && rotaPerMonth[loopMonth] >= 192\r\n               ){\r\n              let overtime = rotaPerMonth[loopMonth] - dutyHoursPerMonth[loopMonth];\r\n              let holidayovertime = 0;\r\n\r\n              if(rotaHolidayPerMonth[loopMonth] != undefined){\r\n                if(overtime <= rotaHolidayPerMonth[loopMonth]){\r\n                  holidayovertime = overtime;\r\n                  overtime = 0;\r\n                }else{\r\n                  overtime -= rotaHolidayPerMonth[loopMonth];\r\n                  holidayovertime = rotaHolidayPerMonth[loopMonth];\r\n                }\r\n              }\r\n              salary += parseInt(basicPerDay*overtime+holidayPerDay*holidayovertime);\r\n            }\r\n            \r\n            if(selYear == parseInt(nurse.date.slice(0,4))){\r\n              let joined = nurse.date;\r\n              if(monthNames[loopMonth] < joined.slice(5,7)){\r\n                salary = 0;\r\n              }else if(monthNames[loopMonth] == joined.slice(5,7)){\r\n                salary = salary - parseInt(reducePerDay*(parseInt(joined.slice(8,10))-1));\r\n              }\r\n            }else if(selYear < parseInt(nurse.date.slice(0,4))){\r\n              salary = 0;\r\n            }         \r\n            payrollPerMonth[loopMonth] += salary;                      \r\n            if(monthNames[loopMonth] == selMonth){\r\n                payrollHourly[nurse._id] = parseFloat(salary/rotaPerMonth[loopMonth]);\r\n            }\r\n          }\r\n        }\r\n      });\r\n      \r\n      nurseDatas.map((nurseData) =>{\r\n        nurseData.overtime = nurseData.assigned*1 - nurseData.available*1;\r\n        if(nurseData.available*1 == 0){\r\n          nurseData.utilization = 0;\r\n        }else{\r\n          nurseData.utilization = parseInt(nurseData.assigned*1 / nurseData.available*1 * 100);\r\n        }\r\n    });\r\n      \r\n    let revenue = [];\r\n    basic.patients.map(patient =>{\r\n        for(let month in patient.revenue){\r\n          if(month.slice(4,6) == selYear%100){\r\n            let m = month.slice(0,3);\r\n            revenue[m] == undefined \r\n            ?\r\n            revenue[m] = patient.revenue[month]\r\n            :\r\n            revenue[m] += patient.revenue[month];\r\n          }\r\n        }\r\n    });\r\n    \r\n    let pnlDatas = [],revenueDatas=[],payrollDatas=[];\r\n    for(let month in monthNames){\r\n      if(revenue[month] == undefined){revenue[month] = 0}\r\n      if(payrollPerMonth[month] == undefined){payrollPerMonth[month] = 0}\r\n\r\n      revenueDatas.push(revenue[month]);\r\n      payrollDatas.push(payrollPerMonth[month]);\r\n      pnlDatas.push(revenue[month]-payrollPerMonth[month]);\r\n    }\r\n\r\n    let days =[];\r\n    for(let j = 0;j < 3;j++){\r\n      for(let i = 1;i <= daysInMonth;i++){\r\n        if(j == 0){\r\n          days.push(i);\r\n        }\r\n        if(rotaHourPerDay[j][i] == undefined){rotaHourPerDay[j][i] = 0;}\r\n        rotaHourPerDay[j][i] = parseFloat(rotaHourPerDay[j][i]/nurseDatas[j].members).toFixed(2);\r\n      }\r\n      for(let i = 1;i <= 12;i++){\r\n        if(rotaHourPerMonth[j][i] == undefined){rotaHourPerMonth[j][i] = 0}\r\n        rotaHourPerMonth[j][i] = parseFloat(rotaHourPerMonth[j][i]/nurseDatas[j].members).toFixed(2);\r\n      }\r\n      rotaHourPerDay[j].splice(0,1);\r\n      rotaHourPerMonth[j].splice(0,1);\r\n    }\r\n\r\n    return (\r\n      <MDBContainer>\r\n          <MDBRow className=\"pt-5 mt-3 align-items-center justify-content-center\">\r\n            <MDBCol md=\"2\">\r\n              <Form.Group>\r\n                <Form.Control type=\"number\" value={selYear} placeholder=\"Year\"  min={2022} max={new Date().getFullYear()+1} onChange = {(e) =>this.onChangeYear(e)}/>\r\n              </Form.Group>\r\n            </MDBCol>\r\n            <MDBCol md=\"2\">\r\n                <Form.Group>\r\n                  <Form.Select aria-label=\"select\" value={selMonth} onChange = {(e) =>this.onChangeMonth(e)}>\r\n                    {\r\n                      MonthSelect\r\n                    }\r\n                  </Form.Select>\r\n                </Form.Group>\r\n            </MDBCol>\r\n          </MDBRow>\r\n\r\n          <MDBRow className=\"mt-3\">\r\n            <MDBCol>\r\n              <MDBCard>\r\n                  <MDBCardImage src='https://884863.smushcdn.com/2024606/wp-content/uploads/2006/10/outfit_nurse_clothes_attire_work.jpg?lossy=1&strip=1&webp=1' alt='...' position='top' />\r\n                  <MDBCardBody>\r\n                    <MDBCardTitle>Members</MDBCardTitle>\r\n                    <MDBProgress className='mb-1' height='15'>\r\n                        <MDBProgressBar width='100' valuemin={0} valuemax={100}>\r\n                          {nurseDatas[2].members}\r\n                        </MDBProgressBar>\r\n                    </MDBProgress>\r\n                    <MDBProgress height='15'>\r\n                      <MDBProgressBar \r\n                        bgColor='success' \r\n                        width={nurseDatas[2].members == 0?0:(nurseDatas[0].members/nurseDatas[2].members)*100} valuemin={0} valuemax={100}>{nurseDatas[0].members}\r\n                      </MDBProgressBar>\r\n                      <MDBProgressBar \r\n                        bgColor='info'\r\n                        width={nurseDatas[2].members == 0?0:(nurseDatas[1].members/nurseDatas[2].members)*100} \r\n                        valuemin={0} valuemax={100}>\r\n                          {nurseDatas[1].members}\r\n                      </MDBProgressBar>\r\n                    </MDBProgress>\r\n                  </MDBCardBody>\r\n              </MDBCard>\r\n            </MDBCol>\r\n            <MDBCol>\r\n              <MDBCard>\r\n                  <MDBCardImage src='https://upload.wikimedia.org/wikipedia/commons/c/cd/180726-time-al-1252.webp' alt='...' position='top' />\r\n                  <MDBCardBody>\r\n                    <MDBCardTitle>Available</MDBCardTitle>\r\n                    <MDBProgress className='mb-1' height='15'>\r\n                        <MDBProgressBar width='100' valuemin={0} valuemax={100}>\r\n                          {nurseDatas[2].available}\r\n                        </MDBProgressBar>\r\n                    </MDBProgress>\r\n                    <MDBProgress height='15'>\r\n                      <MDBProgressBar \r\n                        bgColor='success' \r\n                        width={nurseDatas[2].available == 0?0:(nurseDatas[0].available/nurseDatas[2].available)*100} valuemin={0} valuemax={100}>{nurseDatas[0].available}\r\n                      </MDBProgressBar>\r\n                      <MDBProgressBar \r\n                        bgColor='info'\r\n                        width={nurseDatas[2].available == 0?0:(nurseDatas[1].available/nurseDatas[2].available)*100} \r\n                        valuemin={0} valuemax={100}>\r\n                          {nurseDatas[1].available}\r\n                      </MDBProgressBar>\r\n                    </MDBProgress>\r\n                  </MDBCardBody>\r\n              </MDBCard>\r\n            </MDBCol>\r\n            <MDBCol>\r\n              <MDBCard>\r\n                  <MDBCardImage src='https://www.gannett-cdn.com/authoring/2019/02/08/NOKL/ghnewsok-OK-5622432-19aacf4d.jpeg?width=649&height=432&fit=crop&format=pjpg&auto=webp' alt='...' position='top' />\r\n                  <MDBCardBody>\r\n                    <MDBCardTitle>Assigned</MDBCardTitle>\r\n                    <MDBProgress className='mb-1' height='15'>\r\n                        <MDBProgressBar width='100' valuemin={0} valuemax={100}>\r\n                          {nurseDatas[2].assigned}\r\n                        </MDBProgressBar>\r\n                    </MDBProgress>\r\n                    <MDBProgress height='15'>\r\n                      <MDBProgressBar \r\n                        bgColor='success' \r\n                        width={nurseDatas[2].assigned == 0?0:(nurseDatas[0].assigned/nurseDatas[2].assigned)*100} valuemin={0} valuemax={100}>{nurseDatas[0].assigned}\r\n                      </MDBProgressBar>\r\n                      <MDBProgressBar \r\n                        bgColor='info'\r\n                        width={nurseDatas[2].assigned == 0?0:(nurseDatas[1].assigned/nurseDatas[2].assigned)*100} \r\n                        valuemin={0} valuemax={100}>\r\n                          {nurseDatas[1].assigned}\r\n                      </MDBProgressBar>\r\n                    </MDBProgress>\r\n                  </MDBCardBody>\r\n              </MDBCard>\r\n            </MDBCol>\r\n            <MDBCol>\r\n              <MDBCard>\r\n                  <MDBCardImage src='https://blog.axcethr.com/hubfs/flsa-overtime-basics-for-employers%20(1).webp' alt='...' position='top' />\r\n                  <MDBCardBody>\r\n                    <MDBCardTitle>Overtime</MDBCardTitle>\r\n                    <MDBProgress className='mb-1' height='15'>\r\n                        <MDBProgressBar width='100' valuemin={0} valuemax={100}>\r\n                          {nurseDatas[2].overtime}\r\n                        </MDBProgressBar>\r\n                    </MDBProgress>\r\n                    <MDBProgress height='15'>\r\n                      <MDBProgressBar \r\n                        bgColor='success' \r\n                        width={nurseDatas[2].overtime == 0?0:(nurseDatas[0].overtime/nurseDatas[2].overtime)*100} valuemin={0} valuemax={100}>{nurseDatas[0].overtime}\r\n                      </MDBProgressBar>\r\n                      <MDBProgressBar \r\n                        bgColor='info'\r\n                        width={nurseDatas[2].overtime == 0?0:(nurseDatas[1].overtime/nurseDatas[2].overtime)*100} \r\n                        valuemin={0} valuemax={100}>\r\n                          {nurseDatas[1].overtime}\r\n                      </MDBProgressBar>\r\n                    </MDBProgress>\r\n                  </MDBCardBody>\r\n              </MDBCard>\r\n            </MDBCol>\r\n            <MDBCol>\r\n              <MDBCard>\r\n                  <MDBCardImage src='https://russianvagabond.com/wp-content/uploads/2020/03/Webp.net-resizeimage-207.jpg' alt='...' position='top' />\r\n                  <MDBCardBody>\r\n                    <MDBCardTitle>Utilization</MDBCardTitle>\r\n                    <MDBProgress className='mb-1' height='15'>\r\n                        <MDBProgressBar width={nurseDatas[2].utilization} valuemin={0} valuemax={100}>\r\n                          {nurseDatas[2].utilization+'%'}\r\n                        </MDBProgressBar>\r\n                    </MDBProgress>\r\n                    <MDBRow>\r\n                      <MDBCol>\r\n                        <MDBProgress>\r\n                          <MDBProgressBar \r\n                            bgColor='success' \r\n                            width={nurseDatas[0].utilization} valuemin={0} valuemax={100}>{nurseDatas[0].utilization+'%'}\r\n                          </MDBProgressBar>\r\n                        </MDBProgress>\r\n                      </MDBCol>\r\n                      <MDBCol>\r\n                        <MDBProgress>\r\n                          <MDBProgressBar \r\n                            bgColor='info'\r\n                            width={nurseDatas[1].utilization} valuemin={0} valuemax={100}>{nurseDatas[1].utilization+'%'}\r\n                          </MDBProgressBar>\r\n                        </MDBProgress>\r\n                      </MDBCol>\r\n                    </MDBRow>\r\n                  </MDBCardBody>\r\n              </MDBCard>\r\n            </MDBCol>\r\n          </MDBRow>\r\n\r\n          <MDBRow className='mt-2'>\r\n            <MDBCol>\r\n              <MDBProgress height='15'>\r\n                <MDBProgressBar bgColor='primary' width='100' valuemin={0} valuemax={100}>Total/Average</MDBProgressBar>\r\n              </MDBProgress>\r\n            </MDBCol>\r\n            <MDBCol>\r\n              <MDBProgress height='15'>\r\n                <MDBProgressBar bgColor='success' width='100' valuemin={0} valuemax={100}>Registered</MDBProgressBar>\r\n              </MDBProgress>\r\n            </MDBCol>\r\n            <MDBCol>\r\n              <MDBProgress height='15'>\r\n                <MDBProgressBar bgColor='info' width='100' valuemin={0} valuemax={100}>Assistant</MDBProgressBar>\r\n              </MDBProgress>\r\n            </MDBCol>\r\n          </MDBRow>\r\n          <MDBRow>\r\n            <MDBCol>\r\n              <CChart\r\n                type=\"line\" \r\n                data={{\r\n                  labels: Mon,\r\n                  datasets: [\r\n                    {\r\n                      label: \"Average\",\r\n                      backgroundColor: \"#00f\",\r\n                      borderColor: \"#00f\",\r\n                      pointBackgroundColor: \"#00f\",\r\n                      pointBorderColor: \"#f00\",\r\n                      data: rotaHourPerMonth[2]\r\n                    },\r\n                    {\r\n                      label: \"Registered\",\r\n                      backgroundColor: \"#0f0\",\r\n                      borderColor: \"#0f0\",\r\n                      pointBackgroundColor: \"#0f0\",\r\n                      pointBorderColor: \"#f00\",\r\n                      data: rotaHourPerMonth[0]\r\n                    },\r\n                    {\r\n                      label: \"Assistant\",\r\n                      backgroundColor: \"#0dcaf0\",\r\n                      borderColor: \"#0dcaf0\",\r\n                      pointBackgroundColor: \"#0dcaf0\",\r\n                      pointBorderColor: \"#f00\",\r\n                      data: rotaHourPerMonth[1]\r\n                    }\r\n                  ],\r\n                }}\r\n                options={{\r\n                  maintainAspectRatio: true,\r\n                  plugins: {\r\n                    legend: {\r\n                      display: true,\r\n                    },\r\n                  },\r\n                  elements: {\r\n                    line: {\r\n                      tension: 0.5,\r\n                    },\r\n                    point: {\r\n                      radius: 3,\r\n                      hitRadius: 10,\r\n                      hoverRadius: 5,\r\n                      hoverBorderWidth: 3,\r\n                    },\r\n                  },\r\n                }}\r\n              />\r\n            </MDBCol>\r\n            <MDBCol>\r\n              <CChart\r\n                type=\"line\" \r\n                data={{\r\n                  labels: Mon,\r\n                  datasets: [\r\n                    {\r\n                      label: \"Revenue\",\r\n                      backgroundColor: \"#00f\",\r\n                      borderColor: \"#00f\",\r\n                      pointBackgroundColor: \"#00f\",\r\n                      pointBorderColor: \"#f00\",\r\n                      data: revenueDatas\r\n                    },\r\n                    {\r\n                      label: \"Payroll\",\r\n                      backgroundColor: \"#0f0\",\r\n                      borderColor: \"#0f0\",\r\n                      pointBackgroundColor: \"#0f0\",\r\n                      pointBorderColor: \"#f00\",\r\n                      data: payrollDatas\r\n                    },\r\n                    {\r\n                      label: \"PNL\",\r\n                      backgroundColor: \"#0dcaf0\",\r\n                      borderColor: \"#0dcaf0\",\r\n                      pointBackgroundColor: \"#0dcaf0\",\r\n                      pointBorderColor: \"#f00\",\r\n                      data: pnlDatas\r\n                    }\r\n                  ],\r\n                }}\r\n                options={{\r\n                  maintainAspectRatio: true,\r\n                  plugins: {\r\n                    legend: {\r\n                      display: true,\r\n                    },\r\n                  },\r\n                  elements: {\r\n                    line: {\r\n                      tension: 0.5,\r\n                    },\r\n                    point: {\r\n                      radius: 3,\r\n                      hitRadius: 10,\r\n                      hoverRadius: 5,\r\n                      hoverBorderWidth: 3,\r\n                    },\r\n                  },\r\n                }}\r\n              />\r\n            </MDBCol>\r\n          </MDBRow>\r\n          <CChart\r\n            type=\"bar\" \r\n            data={{\r\n              labels: days,\r\n              datasets: [\r\n                {\r\n                  label: \"Average\",\r\n                  backgroundColor: \"#00f\",\r\n                  borderColor: \"#00f\",\r\n                  pointBackgroundColor: \"#00f\",\r\n                  pointBorderColor: \"#f00\",\r\n                  data: rotaHourPerDay[2]\r\n                },\r\n                {\r\n                  label: \"Registered\",\r\n                  backgroundColor: \"#0f0\",\r\n                  borderColor: \"#0f0\",\r\n                  pointBackgroundColor: \"#0f0\",\r\n                  pointBorderColor: \"#f00\",\r\n                  data: rotaHourPerDay[0]\r\n                },\r\n                {\r\n                  label: \"Assistant\",\r\n                  backgroundColor: \"#0dcaf0\",\r\n                  borderColor: \"#0dcaf0\",\r\n                  pointBackgroundColor: \"#0dcaf0\",\r\n                  pointBorderColor: \"#f00\",\r\n                  data: rotaHourPerDay[1]\r\n                }\r\n              ],\r\n            }}\r\n            options={{\r\n              maintainAspectRatio: true,\r\n              plugins: {\r\n                legend: {\r\n                  display: true,\r\n                },\r\n              },\r\n              elements: {\r\n                line: {\r\n                  tension: 0.5,\r\n                },\r\n                point: {\r\n                  radius: 3,\r\n                  hitRadius: 10,\r\n                  hoverRadius: 5,\r\n                  hoverBorderWidth: 3,\r\n                },\r\n              },\r\n            }}\r\n          />\r\n          {/* <CWidgetStatsB\r\n              className=\"mb-3\"\r\n              color=\"primary\"\r\n              inverse\r\n              progress={{ color: 'white',value: 75 }}\r\n              text=\"Widget helper text\"\r\n              title=\"Widget title\"\r\n              value=\"89.9%\"\r\n            /> */}\r\n\r\n          {/* <MDBRow className='mt-2'>\r\n            <MDBCol>\r\n              <MDBCard background='primary' className='text-white text-center mb-3'>\r\n                <MDBCardBody className='m-auto'>\r\n                  <NavLink to=\"basic\">Registeration</NavLink>\r\n                </MDBCardBody>\r\n              </MDBCard>\r\n            </MDBCol>\r\n            <MDBCol>\r\n              <MDBCard background='success' className='text-white mb-3'>\r\n                <MDBCardBody className='m-auto'>\r\n                  <NavLink to=\"working\">Working Days</NavLink>\r\n                </MDBCardBody>\r\n              </MDBCard>\r\n            </MDBCol>\r\n            <MDBCol>\r\n              <MDBCard background='success' className='text-white mb-3'>\r\n                <MDBCardBody className='m-auto'>\r\n                  <NavLink to=\"leave\">Leave Days</NavLink>\r\n                </MDBCardBody>\r\n              </MDBCard>\r\n            </MDBCol>\r\n            <MDBCol>\r\n              <MDBCard background='danger' className='text-white mb-3'>\r\n                <MDBCardBody className='m-auto'>\r\n                  <NavLink to=\"roaster\">Duty Roaster</NavLink>\r\n                </MDBCardBody>\r\n              </MDBCard>\r\n            </MDBCol>\r\n          </MDBRow>\r\n          <MDBRow className=\"mt-2\">\r\n            <MDBCol>\r\n              <MDBCard background='primary' className='text-white mb-3'>\r\n                <MDBCardBody className='m-auto'>\r\n                  <NavLink to=\"total\">Daily Time Record</NavLink>\r\n                </MDBCardBody>\r\n              </MDBCard>\r\n            </MDBCol>\r\n            <MDBCol>\r\n              <MDBCard background='warning' className='text-white mb-3'>\r\n                <MDBCardBody className='m-auto'>\r\n                  <NavLink to=\"payroll\">Payroll</NavLink>\r\n                </MDBCardBody>\r\n              </MDBCard>\r\n            </MDBCol>\r\n            <MDBCol>\r\n              <MDBCard background='warning' className='text-white mb-3'>\r\n                <MDBCardBody className='m-auto'>\r\n                  <NavLink to=\"revenue\">Revenue</NavLink>\r\n                </MDBCardBody>\r\n              </MDBCard>\r\n            </MDBCol>\r\n            <MDBCol>\r\n              <MDBCard background='danger' className='text-white text-center mb-3'>\r\n                <MDBCardBody className='m-auto'>\r\n                  <NavLink to=\"pnl\">PNL</NavLink>\r\n                </MDBCardBody>\r\n              </MDBCard>\r\n            </MDBCol>\r\n          </MDBRow> */}\r\n      </MDBContainer>\r\n    );\r\n  };\r\n}\r\n\r\nconst mapStateToProps = (BasicData) => ({\r\n  basic:BasicData.BasicData\r\n});\r\n\r\nexport default connect(mapStateToProps,null)(DashBoard)"],"names":["DashBoard","props","onChangeYear","e","setState","state","selYear","target","value","onChangeMonth","selMonth","date","Date","year","getFullYear","month","getMonth","json","ret","key","this","basic","nurseDatas","members","available","assigned","overtime","utilization","monthNames","monthNumbers","swap","Mon","Object","keys","NoMon","values","MonthSelect","map","index","daysInMonth","getDate","from","to","holidays","holidaysInMonth","holidaysPerMonth","holiday","slice","undefined","push","parseInt","SundaysInMonth","firstDate","getDay","selDay","day","sundaysPerMonth","loopMonth","payrollPerMonth","payrollPerPatient","payrollHourly","rotaHourPerMonth","rotaHourPerDay","nurses","nurse","salary","basic_allowances","housing_allowances","other_allowances","nurseLevel","level","rotas","rota","rotaPerMonth","rotaHolidayPerMonth","hour","startsWith","monthnum","includes","patient_id","_id","leaves","leave","leavedaysPerMonth","betweenDay","setDate","offdays","Set","length","offDaysPerMonth","dutyHoursPerMonth","basicPerDay","parseFloat","holidayPerDay","reducePerDay","holidayovertime","joined","nurseData","revenue","patients","patient","m","pnlDatas","revenueDatas","payrollDatas","days","j","i","toFixed","splice","className","md","type","placeholder","min","max","onChange","src","alt","position","height","width","valuemin","valuemax","bgColor","data","labels","datasets","label","backgroundColor","borderColor","pointBackgroundColor","pointBorderColor","options","maintainAspectRatio","plugins","legend","display","elements","line","tension","point","radius","hitRadius","hoverRadius","hoverBorderWidth","Component","connect","BasicData"],"sourceRoot":""}