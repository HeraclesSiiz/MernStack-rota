{"version":3,"file":"static/js/600.982ca5ee.chunk.js","mappings":"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","sources":["pages/fte.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport { MDBCol, MDBContainer, MDBRow } from \"mdb-react-ui-kit\";\r\nimport { IoMdDownload } from \"react-icons/io\";\r\nimport { CSVLink } from \"react-csv\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport \"../css/App.css\";\r\nimport Autocomplete from \"react-autocomplete\";\r\nclass FTE extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let date = new Date();\r\n    let year = date.getFullYear();\r\n\r\n    this.state = {\r\n      selYear: year,\r\n      selNurse: 0,\r\n      selNurseValue: \"\",\r\n      selMonth: \"00\",\r\n      selDesignation: -1,\r\n    };\r\n  }\r\n  onChangeYear = (e) => {\r\n    this.setState({\r\n      ...this.state,\r\n      selYear: e.target.value,\r\n    });\r\n  };\r\n  onChangeDesignation = (e) => {\r\n    this.setState({\r\n      ...this.state,\r\n      selDesignation: e.target.value,\r\n    });\r\n  };\r\n  onChangeNurse = (e) => {\r\n    this.setState({\r\n      ...this.state,\r\n      selNurse: 0,\r\n      selNurseValue: e.target.value,\r\n    });\r\n  };\r\n  OnSelectNurse = (val, item) => {\r\n    this.setState({\r\n      ...this.state,\r\n      selNurse: item.key,\r\n      selNurseValue: val,\r\n    });\r\n  };\r\n  onChangeMonth = (e) => {\r\n    this.setState({\r\n      ...this.state,\r\n      selMonth: e.target.value,\r\n    });\r\n  };\r\n  getTotals(data, key) {\r\n    let total = 0;\r\n    data.forEach((item) => {\r\n      total += item[key] ? item[key] : 0;\r\n    });\r\n    return total;\r\n  }\r\n\r\n  swap(json) {\r\n    let ret = [];\r\n    for (var key in json) {\r\n      ret[json[key]] = key;\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  render() {\r\n    const { selYear, selMonth, selDesignation, selNurseValue, selNurse } =\r\n      this.state;\r\n\r\n    const { basic } = this.props;\r\n\r\n    let monthNames = basic.monthNames;\r\n    let monthNumbers = this.swap(monthNames);\r\n    let Mon = Object.keys(monthNames);\r\n    let NoMon = Object.values(monthNames);\r\n    const MonthSelect = Mon.map((month, index) => (\r\n      <option key={index} value={NoMon[index]}>{month}</option>\r\n    ));\r\n\r\n    const FTEColumns = [\r\n      {\r\n        name: \"Emp Code\",\r\n        center: true,\r\n        wrap: true,\r\n        width: \"120px\",\r\n        selector: (row) => row.code,\r\n      },\r\n      {\r\n        name: \"Name\",\r\n        center: true,\r\n        wrap: true,\r\n        width: \"120px\",\r\n        selector: (row) => row.name,\r\n      },\r\n      {\r\n        name: \"Designation\",\r\n        center: true,\r\n        wrap: true,\r\n        width: \"120px\",\r\n        selector: (row) => row.designation,\r\n      },\r\n      {\r\n        name: \"Month Days\",\r\n        center: true,\r\n        wrap: true,\r\n        width: \"100px\",\r\n        selector: (row) => row.days,\r\n      },\r\n      {\r\n        name: \"Sundays\",\r\n        center: true,\r\n        selector: (row) => row.sundays,\r\n      },\r\n      {\r\n        name: \"Leaves\",\r\n        center: true,\r\n        wrap: true,\r\n        selector: (row) => row.leaves,\r\n      },\r\n      {\r\n        name: \"Holidays\",\r\n        center: true,\r\n        wrap: true,\r\n        width: \"100px\",\r\n        selector: (row) => row.holidays,\r\n      },\r\n      {\r\n        name: \"Net Working Days\",\r\n        center: true,\r\n        width: \"150px\",\r\n        selector: (row) => row.workingdays,\r\n      },\r\n      {\r\n        name: \"Working Hours available\",\r\n        center: true,\r\n        wrap: true,\r\n        width: \"170px\",\r\n        selector: (row) => row.totalhours,\r\n      },\r\n      {\r\n        name: \"Hours Worked\",\r\n        center: true,\r\n        wrap: true,\r\n        selector: (row) => row.hour,\r\n      },\r\n      {\r\n        name: \"Overtime\",\r\n        center: true,\r\n        wrap: true,\r\n        selector: (row) => row.overtime,\r\n      },\r\n    ];\r\n\r\n    let FTEDatas = [];\r\n    let thour = 0;\r\n    let tohour = 0;\r\n    let otime = 0;\r\n    let headers = [\r\n      { label: \"Emp Code\", key: \"code\" },\r\n      { label: \"Name\", key: \"name\" },\r\n      { label: \"Designation\", key: \"designation\" },\r\n      { label: \"Month Days\", key: \"days\" },\r\n      { label: \"Sundays\", key: \"sundays\" },\r\n      { label: \"Leaves\", key: \"leaves\" },\r\n      { label: \"Holidays\", key: \"holidays\" },\r\n      { label: \"Net Working Days\", key: \"workingdays\" },\r\n      { label: \"Working Hours Available\", key: \"totalhours\" },\r\n      { label: \"Hours Worked\", key: \"hour\" },\r\n      { label: \"Overtime\", key: \"overtime\" },\r\n    ];\r\n\r\n    let nurseList = [];\r\n    let nurseAutoList = [];\r\n    basic.nurses.map((nurse) => {\r\n      nurseList[nurse._id] = nurse.name;\r\n      if (nurse.name?.includes(selNurseValue)) {\r\n        nurseAutoList.push({\r\n          label: nurse.name,\r\n          key: nurse._id,\r\n        });\r\n      }\r\n    });\r\n\r\n    let dataExistInYear = 0;\r\n\r\n    basic.nurses.map((nurse) => {\r\n      if (\r\n        (selDesignation == \"-1\" || parseInt(nurse.level) == selDesignation) &&\r\n        (nurse._id == selNurse || selNurse == 0)\r\n      ) {\r\n        nurse.rota.map((data) => {\r\n          if (selYear == new Date(data.date).getFullYear()) {\r\n            dataExistInYear = 1;\r\n          }\r\n        });\r\n\r\n        if (dataExistInYear == 1) {\r\n          //get holidays per month\r\n          let holidays = basic.holidays;\r\n          let holidaysPerMonth = [];\r\n          holidays.map((holiday) => {\r\n            let key = monthNumbers[holiday.slice(0, 2)];\r\n            if (holidaysPerMonth[key] == undefined) {\r\n              holidaysPerMonth[key] = [];\r\n            }\r\n            holidaysPerMonth[key].push(\r\n              selYear + \"-\" + selMonth + \"-\" + holiday\r\n            );\r\n          });\r\n          //get sundays per month\r\n          let sundaysPerMonth = [];\r\n          for (let selMonth in monthNumbers) {\r\n            let daysInMonth = new Date(selYear, selMonth, 0).getDate();\r\n            let date = selYear + \"-\" + selMonth + \"-01\";\r\n            let firstDate = new Date(date).getDay();\r\n            if (firstDate == 0) {\r\n              firstDate = 1;\r\n            } else {\r\n              firstDate = 7 - firstDate + 1;\r\n            }\r\n            for (let selDay = firstDate; selDay < daysInMonth; selDay += 7) {\r\n              let day = selDay > 9 ? selDay : \"0\" + selDay;\r\n              let key = monthNumbers[selMonth];\r\n              if (sundaysPerMonth[key] == undefined) {\r\n                sundaysPerMonth[key] = [];\r\n              }\r\n              sundaysPerMonth[key].push(selYear + \"-\" + selMonth + \"-\" + day);\r\n            }\r\n          }\r\n          //leave days\r\n          let leaves = nurse.leave ? nurse.leave : [];\r\n\r\n          let leavedaysPerMonth = [];\r\n          for (let leave of leaves) {\r\n            let from = new Date(leave.from);\r\n            let to = new Date(leave.to);\r\n            for (let betweenDay = from; betweenDay <= to; ) {\r\n              let year = betweenDay.getFullYear();\r\n              let month =\r\n                betweenDay.getMonth() + 1 > 9\r\n                  ? betweenDay.getMonth() + 1\r\n                  : \"0\" + (betweenDay.getMonth() + 1);\r\n              let day =\r\n                betweenDay.getDate() > 9\r\n                  ? betweenDay.getDate()\r\n                  : \"0\" + betweenDay.getDate();\r\n              if (year == selYear) {\r\n                let key = monthNumbers[month];\r\n                if (leavedaysPerMonth[key] == undefined) {\r\n                  leavedaysPerMonth[key] = [];\r\n                }\r\n                leavedaysPerMonth[key].push(year + \"-\" + month + \"-\" + day);\r\n              }\r\n              betweenDay.setDate(betweenDay.getDate() + 1);\r\n            }\r\n          }\r\n          //datatable set\r\n\r\n          let rotaPerMonth = [];\r\n          for (let monthValue in monthNames) {\r\n            if (monthNames[monthValue] == selMonth) {\r\n              let daysInMonth = new Date(\r\n                selYear,\r\n                monthNames[monthValue],\r\n                0\r\n              ).getDate();\r\n              if (leavedaysPerMonth[monthValue] == undefined) {\r\n                leavedaysPerMonth[monthValue] = [];\r\n              }\r\n              if (holidaysPerMonth[monthValue] == undefined) {\r\n                holidaysPerMonth[monthValue] = [];\r\n              }\r\n              if (sundaysPerMonth[monthValue] == undefined) {\r\n                sundaysPerMonth[monthValue] = [];\r\n              }\r\n\r\n              let offDays = [\r\n                ...leavedaysPerMonth[monthValue],\r\n                ...holidaysPerMonth[monthValue],\r\n                ...sundaysPerMonth[monthValue],\r\n              ];\r\n              offDays = [...new Set(offDays)];\r\n\r\n              //rota hours per month\r\n\r\n              let rotas = nurse.rota;\r\n              rotaPerMonth[monthValue] = 0;\r\n              //rota calculate\r\n\r\n              rotas.map((rota) => {\r\n                if (selYear == new Date(rota.date).getFullYear()) {\r\n                  let month = monthNumbers[[rota.date.slice(5, 7)]];\r\n\r\n                  if (rotaPerMonth[month] == undefined) {\r\n                  } else {\r\n                    rotaPerMonth[month] += rota.hour;\r\n                    thour += rota.hour;\r\n                  }\r\n                }\r\n              });\r\n\r\n              let row = {\r\n                month: monthValue,\r\n                days: daysInMonth,\r\n                code: nurse.code,\r\n                name: nurse.name,\r\n                leave: leaves,\r\n                designation: nurse.level == 0 ? \"Registered\" : \"Assistant\",\r\n                sundays: sundaysPerMonth[monthValue].length,\r\n                holidays: holidaysPerMonth[monthValue].length,\r\n                leavedays: leavedaysPerMonth[monthValue].length,\r\n                leaves: leavedaysPerMonth[monthValue].length,\r\n                workingdays: daysInMonth - offDays.length,\r\n                hour: rotaPerMonth[monthValue],\r\n\r\n                totalhours: 8 * (daysInMonth - offDays.length),\r\n                overtime:\r\n                  rotaPerMonth[monthValue] - 8 * (daysInMonth - offDays.length),\r\n              };\r\n              tohour += row.totalhours;\r\n              otime += row.overtime;\r\n              FTEDatas.push(row);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n    FTEDatas.sort((a, b) => (a.name > b.name ? 1 : b.name > a.name ? -1 : 0));\r\n\r\n    let total = {\r\n      code: \"Total\",\r\n      hour: thour,\r\n      totalhours: tohour,\r\n      overtime: otime,\r\n    };\r\n    FTEDatas.push(total);\r\n    const conditionalRowStyles = [\r\n      {\r\n        when: (row) => row.rotation == 1,\r\n        style: (row) => ({\r\n          backgroundColor:\r\n            row.day % 2 == 1 ? \"rgb(160,160,160)\" : \"rgb(192,192,192)\",\r\n        }),\r\n      },\r\n    ];\r\n\r\n    return (\r\n      <MDBContainer>\r\n        <div className=\"pt-5 text-center text-dark\">\r\n          <h1 className=\"mt-3\">Full Time Equivalent (FTE) </h1>\r\n        </div>\r\n        <MDBRow className=\" align-items-center justify-content-center\">\r\n          <MDBCol className=\"autocomplete col-md-3 ncard\">\r\n            <Autocomplete\r\n              getItemValue={(item) => item.label}\r\n              items={nurseAutoList}\r\n              inputProps={{ placeholder: \"Select Nurses\" }}\r\n              renderItem={(item, isHighlighted) => (\r\n                <div\r\n                  style={{\r\n                    background: isHighlighted ? \"#2E86C1\" : \"white\",\r\n                    color: isHighlighted ? \"white\" : \"black\",\r\n                    borderRadius: \"1px\",\r\n                    backgroundColor: \"white\",\r\n                    fontSize: \"15px\",\r\n                    fontFamily: \"Arial\",\r\n                  }}\r\n                >\r\n                  {item.label}\r\n                </div>\r\n              )}\r\n              value={selNurseValue}\r\n              onChange={(e) => this.onChangeNurse(e)}\r\n              onSelect={(val, item) => this.OnSelectNurse(val, item)}\r\n            />\r\n          </MDBCol>\r\n          <MDBCol md=\"2\">\r\n            <Form.Select\r\n              aria-label=\"select\"\r\n              value={selDesignation}\r\n              onChange={(e) => this.onChangeDesignation(e)}\r\n            >\r\n              <option value=\"-1\">Designation</option>\r\n              <option value=\"0\">Registered</option>\r\n              <option value=\"1\">Assistant</option>\r\n            </Form.Select>\r\n          </MDBCol>\r\n          <MDBCol md=\"2\">\r\n            <Form.Group>\r\n              <Form.Control\r\n                type=\"number\"\r\n                value={selYear}\r\n                placeholder=\"Year\"\r\n                onChange={(e) => this.onChangeYear(e)}\r\n              />\r\n            </Form.Group>\r\n          </MDBCol>\r\n          <MDBCol md=\"2\">\r\n            <Form.Select\r\n              aria-label=\"select\"\r\n              value={selMonth}\r\n              onChange={(e) => this.onChangeMonth(e)}\r\n            >\r\n              <option value=\"00\">Month</option>\r\n              {MonthSelect}\r\n            </Form.Select>\r\n          </MDBCol>\r\n          <MDBCol md=\"2\">\r\n            <CSVLink\r\n              headers={headers}\r\n              data={FTEDatas}\r\n              filename={\"FTE.csv\"}\r\n              className=\"btn btn-success \"\r\n              target=\"_blank\"\r\n            >\r\n              <IoMdDownload />\r\n              Export\r\n            </CSVLink>\r\n          </MDBCol>\r\n        </MDBRow>\r\n\r\n        <MDBRow className=\"mt-2 workingTable\">\r\n          <DataTable\r\n            columns={FTEColumns}\r\n            data={FTEDatas}\r\n            fixedHeader\r\n            striped\r\n            conditionalRowStyles={conditionalRowStyles}\r\n            fixedHeaderScrollHeight={\"60vh\"}\r\n            pagination\r\n          />\r\n        </MDBRow>\r\n      </MDBContainer>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (BasicData) => ({\r\n  basic: BasicData.BasicData,\r\n});\r\nexport default connect(mapStateToProps, null)(FTE);\r\n"],"names":["FTE","props","onChangeYear","e","setState","state","selYear","target","value","onChangeDesignation","selDesignation","onChangeNurse","selNurse","selNurseValue","OnSelectNurse","val","item","key","onChangeMonth","selMonth","year","Date","getFullYear","data","total","forEach","json","ret","this","basic","monthNames","monthNumbers","swap","Mon","Object","keys","NoMon","values","MonthSelect","map","month","index","FTEDatas","thour","tohour","otime","nurseList","nurseAutoList","nurses","nurse","_id","name","includes","push","label","dataExistInYear","parseInt","level","rota","date","holidays","holidaysPerMonth","holiday","slice","undefined","sundaysPerMonth","daysInMonth","getDate","firstDate","getDay","selDay","day","leaves","leave","leavedaysPerMonth","from","to","betweenDay","getMonth","setDate","rotaPerMonth","monthValue","offDays","Set","rotas","hour","row","days","code","designation","sundays","length","leavedays","workingdays","totalhours","overtime","sort","a","b","className","getItemValue","items","inputProps","placeholder","renderItem","isHighlighted","style","background","color","borderRadius","backgroundColor","fontSize","fontFamily","onChange","onSelect","md","type","CSVLink","headers","filename","columns","center","wrap","width","selector","fixedHeader","striped","conditionalRowStyles","when","rotation","fixedHeaderScrollHeight","pagination","Component","connect","BasicData"],"sourceRoot":""}