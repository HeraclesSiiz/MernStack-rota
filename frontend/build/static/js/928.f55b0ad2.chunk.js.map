{"version":3,"file":"static/js/928.f55b0ad2.chunk.js","mappings":"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","sources":["pages/payroll.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport { MDBCol, MDBContainer, MDBRow } from \"mdb-react-ui-kit\";\r\nimport { IoMdDownload } from \"react-icons/io\";\r\nimport { CSVLink } from \"react-csv\";\r\nimport { Form, OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\nimport history from \"../history\";\r\n\r\nclass PayRoll extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let date = new Date();\r\n    let year = date.getFullYear();\r\n\r\n    this.state = {\r\n      selYear: year,\r\n      selMonth: \"00\",\r\n      selDesignation: -1,\r\n    };\r\n  }\r\n  componentDidMount() {}\r\n\r\n  onChangeYear = (e) => {\r\n    this.setState({\r\n      ...this.state,\r\n      selYear: e.target.value,\r\n    });\r\n  };\r\n  onChangeMonth = (e) => {\r\n    this.setState({\r\n      ...this.state,\r\n      selMonth: e.target.value,\r\n    });\r\n  };\r\n  onChangeDesignation = (e) => {\r\n    this.setState({\r\n      ...this.state,\r\n      selDesignation: e.target.value,\r\n    });\r\n  };\r\n  swap(json) {\r\n    let ret = [];\r\n    for (var key in json) {\r\n      ret[json[key]] = key;\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  getTotals(data, key) {\r\n    let total = 0;\r\n    data.forEach((item) => {\r\n      total += item[key];\r\n    });\r\n    return total;\r\n  }\r\n\r\n  render() {\r\n    const { selYear, selMonth, selDesignation } = this.state;\r\n    const { basic } = this.props;\r\n    const { user } = this.props.basic;\r\n    \r\n    if(!user.role && user.role === 0){\r\n      history.push(\"/\");\r\n      history.go(\"/\");\r\n    }\r\n\r\n    let monthNames = basic.monthNames;\r\n    let monthNumbers = this.swap(monthNames);\r\n    let Mon = Object.keys(monthNames);\r\n    let NoMon = Object.values(monthNames);\r\n    const MonthSelect = Mon.map((month, index) => (\r\n      <option key={index} value={NoMon[index]}>{month}</option>\r\n    ));\r\n\r\n    let payrollColumns = [];\r\n\r\n    if (selMonth != \"00\") {\r\n      payrollColumns.push(\r\n        {\r\n          name: \"ID\",\r\n          center: true,\r\n          wrap: true,\r\n          width: \"80px\",\r\n          selector: (row) => row[\"code\"],\r\n        },\r\n        {\r\n          name: \"Name\",\r\n          center: true,\r\n          wrap: true,\r\n          width: \"120px\",\r\n          selector: (row) => row[\"name\"],\r\n        },\r\n        {\r\n          name: \"Designation\",\r\n          center: true,\r\n          wrap: true,\r\n          width: \"120px\",\r\n          selector: (row) => row[\"designation\"],\r\n        },\r\n        {\r\n          name: \"Month(d)\",\r\n          center: true,\r\n          wrap: true,\r\n          width: \"80px\",\r\n          selector: (row) => row[\"monthdays\"],\r\n        },\r\n        {\r\n          name: \"Worked(d)\",\r\n          center: true,\r\n          wrap: true,\r\n          width: \"80px\",\r\n          selector: (row) => row[\"workeddays\"],\r\n        },\r\n        {\r\n          name: \"Worked(h)\",\r\n          center: true,\r\n          wrap: true,\r\n          width: \"80px\",\r\n          selector: (row) => row[\"totalhoursworked\"],\r\n        },\r\n        {\r\n          name: \"NormalOver(h)\",\r\n          center: true,\r\n          wrap: true,\r\n          width: \"120px\",\r\n          selector: (row) => row[\"normalovertimehours\"],\r\n        },\r\n        {\r\n          name: \"HolidayOver(h)\",\r\n          center: true,\r\n          wrap: true,\r\n          width: \"120px\",\r\n          selector: (row) => row[\"holidayovertimehours\"],\r\n        },\r\n        {\r\n          name: \"GrossSalary\",\r\n          center: true,\r\n          wrap: true,\r\n          width: \"120px\",\r\n          selector: (row) => row[\"grosssalary\"],\r\n        },\r\n        {\r\n          name: \"NormalOvertime\",\r\n          center: true,\r\n          wrap: true,\r\n          width: \"120px\",\r\n          selector: (row) => row[\"normalovertime\"],\r\n        },\r\n        {\r\n          name: \"HolidayOvertime\",\r\n          center: true,\r\n          wrap: true,\r\n          width: \"150px\",\r\n          selector: (row) => row[\"holidayovertime\"],\r\n        }\r\n      );\r\n    } else {\r\n      payrollColumns.push({\r\n        name: \"Nurse\",\r\n        center: true,\r\n        wrap: true,\r\n        selector: (row) =>\r\n          row[\"nurse\"] ? row[\"nurse\"].toLocaleString(\"en\") : 0,\r\n      });\r\n      payrollColumns.push({\r\n        name: \"Designation\",\r\n        center: true,\r\n        wrap: true,\r\n        selector: (row) => row[\"designation\"],\r\n      });\r\n      for (let month in monthNames) {\r\n        payrollColumns.push({\r\n          name: month,\r\n          center: true,\r\n          wrap: true,\r\n          width: \"70px\",\r\n          cell: (row) => (\r\n            <OverlayTrigger\r\n              key={row._id}\r\n              placement=\"top\"\r\n              overlay={\r\n                <Tooltip\r\n                  className=\"display-linebreak\"\r\n                  style={{ position: \"fixed\" }}\r\n                >\r\n                  {row[month + \"comment\"]}\r\n                </Tooltip>\r\n              }\r\n            >\r\n              <p className=\"payroll hover\">\r\n                {row[month] ? row[month].toLocaleString(\"en\") : 0}\r\n              </p>\r\n            </OverlayTrigger>\r\n          ),\r\n        });\r\n      }\r\n    }\r\n\r\n    payrollColumns.push({\r\n      name: \"Total\",\r\n      center: true,\r\n      wrap: true,\r\n      width: \"80px\",\r\n      selector: (row) => row[\"total\"],\r\n    });\r\n\r\n    let payrollDatas = [];\r\n    let headers = [];\r\n    let thour = 0;\r\n    let totalhour = 0;\r\n    let normalhour = 0;\r\n    let holidayhour = 0;\r\n    let gsalary = 0;\r\n    let normalover = 0;\r\n    let holidayt = 0;\r\n    //get holidays per month\r\n    let holidays = basic.holidays;\r\n    let holidaysPerMonth = [];\r\n    holidays.map((holiday) => {\r\n      let key = monthNumbers[holiday.slice(0, 2)];\r\n      if (holidaysPerMonth[key] == undefined) {\r\n        holidaysPerMonth[key] = [];\r\n      }\r\n      holidaysPerMonth[key].push(selYear + \"-\" + holiday);\r\n    });\r\n    //get sundays per month\r\n    let sundaysPerMonth = [];\r\n    for (let selMonth in monthNumbers) {\r\n      let daysInMonth = new Date(selYear, selMonth, 0).getDate();\r\n      let date = selYear + \"-\" + selMonth + \"-01\";\r\n      let firstDate = new Date(date).getDay();\r\n      if (firstDate == 0) {\r\n        firstDate = 1;\r\n      } else {\r\n        firstDate = 7 - firstDate + 1;\r\n      }\r\n      for (let selDay = firstDate; selDay < daysInMonth; selDay += 7) {\r\n        let day = selDay > 9 ? selDay : \"0\" + selDay;\r\n        let key = monthNumbers[selMonth];\r\n        if (sundaysPerMonth[key] == undefined) {\r\n          sundaysPerMonth[key] = [];\r\n        }\r\n        sundaysPerMonth[key].push(selYear + \"-\" + selMonth + \"-\" + day);\r\n      }\r\n    }\r\n\r\n    if (selYear <= new Date().getFullYear()) {\r\n      basic.nurses.map((nurse) => {\r\n        let basicPerDay = parseFloat((nurse.basic_allowances * 15) / 365 / 8);\r\n        let holidayPerDay = parseFloat((nurse.basic_allowances * 18) / 365 / 8);\r\n        let reducePerDay;\r\n\r\n        if (selDesignation == \"-1\" || parseInt(nurse.level) == selDesignation) {\r\n          let salary =\r\n            nurse.basic_allowances +\r\n            nurse.housing_allowances +\r\n            nurse.other_allowances;\r\n          reducePerDay = parseFloat((salary * 12) / 365);\r\n          let comment =\r\n            \"basic:\" +\r\n            nurse.basic_allowances +\r\n            \"\\nhousing:\" +\r\n            nurse.housing_allowances +\r\n            \"\\nother:\" +\r\n            nurse.other_allowances;\r\n\r\n          //leave days\r\n          let leaves = nurse.leave ? nurse.leave : [];\r\n          let leavedaysPerMonth = [];\r\n          for (let leave of leaves) {\r\n            let from = new Date(leave.from);\r\n            let to = new Date(leave.to);\r\n            for (let betweenDay = from; betweenDay <= to; ) {\r\n              let year = betweenDay.getFullYear();\r\n              let month =\r\n                betweenDay.getMonth() + 1 > 9\r\n                  ? betweenDay.getMonth() + 1\r\n                  : \"0\" + (betweenDay.getMonth() + 1);\r\n              let day =\r\n                betweenDay.getDate() > 9\r\n                  ? betweenDay.getDate()\r\n                  : \"0\" + betweenDay.getDate();\r\n              if (year == selYear) {\r\n                let key = monthNumbers[month];\r\n                if (leavedaysPerMonth[key] == undefined) {\r\n                  leavedaysPerMonth[key] = [];\r\n                }\r\n                leavedaysPerMonth[key].push(year + \"-\" + month + \"-\" + day);\r\n              }\r\n              betweenDay.setDate(betweenDay.getDate() + 1);\r\n            }\r\n          }\r\n          //rota hours per month\r\n          let rotas = nurse.rota;\r\n          let rotaPerMonth = [],\r\n            rotaHolidayPerMonth = [];\r\n          let workeddays = [],\r\n            totalhoursworked = 0;\r\n\r\n          //rota calculate\r\n          rotas.map((rota) => {\r\n            if (rota.date.startsWith(selYear)) {\r\n              let month = monthNumbers[[rota.date.slice(5, 7)]];\r\n              if (monthNames[month] == selMonth) {\r\n                workeddays.push(rota.date);\r\n                totalhoursworked += rota.hour;\r\n              }\r\n\r\n              if (rotaPerMonth[month] == undefined) {\r\n                rotaPerMonth[month] = rota.hour;\r\n              } else {\r\n                rotaPerMonth[month] += rota.hour;\r\n              }\r\n              if (\r\n                holidaysPerMonth[month] &&\r\n                holidaysPerMonth[month].includes(rota.date)\r\n              ) {\r\n                if (rotaHolidayPerMonth[month] == undefined) {\r\n                  rotaHolidayPerMonth[month] = rota.hour;\r\n                } else {\r\n                  rotaHolidayPerMonth[month] += rota.hour;\r\n                }\r\n              }\r\n            }\r\n          });\r\n\r\n          //datatable set\r\n          let payrollPerMonth = [],\r\n            payrollCommentPerMonth = [],\r\n            offDaysPerMonth = [],\r\n            dutyHoursPerMonth = [];\r\n          let monthdays,\r\n            normalovertimehours,\r\n            holidayovertimehours,\r\n            grosssalary,\r\n            normalovertime,\r\n            holidayovertime,\r\n            totalsalary;\r\n\r\n          for (let loopMonth in monthNames) {\r\n            let daysInMonth = new Date(\r\n              selYear,\r\n              monthNames[loopMonth],\r\n              0\r\n            ).getDate();\r\n            if (monthNames[loopMonth] == selMonth) {\r\n              monthdays = daysInMonth;\r\n            }\r\n\r\n            if (leavedaysPerMonth[loopMonth] == undefined) {\r\n              leavedaysPerMonth[loopMonth] = [];\r\n            }\r\n            if (holidaysPerMonth[loopMonth] == undefined) {\r\n              holidaysPerMonth[loopMonth] = [];\r\n            }\r\n            if (sundaysPerMonth[loopMonth] == undefined) {\r\n              sundaysPerMonth[loopMonth] = [];\r\n            }\r\n\r\n            offDaysPerMonth[loopMonth] = [\r\n              ...leavedaysPerMonth[loopMonth],\r\n              ...holidaysPerMonth[loopMonth],\r\n              ...sundaysPerMonth[loopMonth],\r\n            ];\r\n            offDaysPerMonth[loopMonth] = [\r\n              ...new Set(offDaysPerMonth[loopMonth]),\r\n            ];\r\n            dutyHoursPerMonth[loopMonth] =\r\n              (daysInMonth - offDaysPerMonth[loopMonth].length) * 8;\r\n            if (rotaPerMonth[loopMonth] == undefined) {\r\n              rotaPerMonth[loopMonth] = 0;\r\n            }\r\n            //extra salary calculate\r\n            if (\r\n              dutyHoursPerMonth[loopMonth] < rotaPerMonth[loopMonth]\r\n              //  && rotaPerMonth[loopMonth] >= 192\r\n            ) {\r\n              let overtime =\r\n                rotaPerMonth[loopMonth] - dutyHoursPerMonth[loopMonth];\r\n              let hovertime = 0;\r\n\r\n              if (rotaHolidayPerMonth[loopMonth] != undefined) {\r\n                if (overtime <= rotaHolidayPerMonth[loopMonth]) {\r\n                  hovertime = overtime;\r\n                  overtime = 0;\r\n                } else {\r\n                  overtime -= rotaHolidayPerMonth[loopMonth];\r\n                  hovertime = rotaHolidayPerMonth[loopMonth];\r\n                }\r\n              }\r\n\r\n              payrollPerMonth[loopMonth] =\r\n                salary +\r\n                parseInt(basicPerDay * overtime + holidayPerDay * hovertime);\r\n              payrollCommentPerMonth[loopMonth] =\r\n                comment +\r\n                \"\\novertime:\" +\r\n                overtime +\r\n                \"hours\" +\r\n                \"\\nholiday overtime:\" +\r\n                hovertime +\r\n                \"hours\";\r\n\r\n              if (monthNames[loopMonth] == selMonth) {\r\n                normalovertimehours = overtime;\r\n                holidayovertimehours = hovertime;\r\n                normalovertime = basicPerDay * overtime;\r\n                holidayovertime = holidayPerDay * hovertime;\r\n                grosssalary = salary;\r\n                totalsalary = payrollPerMonth[loopMonth];\r\n              }\r\n              //commmon salary\r\n            } else {\r\n              payrollPerMonth[loopMonth] = salary;\r\n              payrollCommentPerMonth[loopMonth] = comment;\r\n\r\n              if (selYear == parseInt(nurse.date.slice(0, 4))) {\r\n                let joined = nurse.date;\r\n                if (monthNames[loopMonth] < joined.slice(5, 7)) {\r\n                  payrollPerMonth[loopMonth] = 0;\r\n                } else if (monthNames[loopMonth] == joined.slice(5, 7)) {\r\n                  payrollPerMonth[loopMonth] =\r\n                    salary -\r\n                    parseInt(reducePerDay * parseInt(joined.slice(8, 10) - 1));\r\n                }\r\n              } else if (selYear < parseInt(nurse.date.slice(0, 4))) {\r\n                payrollPerMonth[loopMonth] = 0;\r\n              }\r\n\r\n              if (monthNames[loopMonth] == selMonth) {\r\n                normalovertimehours = 0;\r\n                holidayovertimehours = 0;\r\n                normalovertime = 0;\r\n                holidayovertime = 0;\r\n                grosssalary = salary;\r\n                totalsalary = payrollPerMonth[loopMonth];\r\n              }\r\n            }\r\n          }\r\n\r\n          let row = {};\r\n          row.nurse = nurse.name;\r\n          row.designation = nurse.level == 0 ? \"Registered\" : \"Assistant\";\r\n          //all data\r\n          if (selMonth == \"00\") {\r\n            let grandTotal = 0;\r\n            for (let month in monthNames) {\r\n              if (selYear == new Date().getFullYear()) {\r\n                if (parseInt(monthNames[month]) <= new Date().getMonth() + 1) {\r\n                  row[month] = payrollPerMonth[month];\r\n                  row[month + \"comment\"] = payrollCommentPerMonth[month];\r\n                  grandTotal += row[month];\r\n                } else {\r\n                  row[month] = 0;\r\n                }\r\n              } else if (selYear < new Date().getFullYear()) {\r\n                row[month] = payrollPerMonth[month];\r\n                row[month + \"comment\"] = payrollCommentPerMonth[month];\r\n                grandTotal += row[month];\r\n              }\r\n            }\r\n            row.total = grandTotal;\r\n            payrollDatas.push(row);\r\n            //detail month data\r\n          } else {\r\n            workeddays = [...new Set(workeddays)];\r\n\r\n            row.code = nurse.code;\r\n            row.name = nurse.name;\r\n            row.designation = nurse.level == 0 ? \"Registered\" : \"Assistant\";\r\n            row.monthdays = monthdays;\r\n            row.workeddays = workeddays.length;\r\n            row.totalhoursworked = totalhoursworked;\r\n            row.normalovertimehours = normalovertimehours;\r\n            row.holidayovertimehours = holidayovertimehours;\r\n            row.grosssalary = grosssalary;\r\n            row.normalovertime = parseInt(normalovertime);\r\n            row.holidayovertime = parseInt(holidayovertime);\r\n            row.total = totalsalary;\r\n            thour += workeddays.length;\r\n            totalhour += totalhoursworked;\r\n            normalhour += normalovertimehours;\r\n            holidayhour += holidayovertimehours;\r\n            gsalary += grosssalary;\r\n            normalover += parseInt(normalovertime);\r\n            holidayt += parseInt(holidayovertime);\r\n\r\n            payrollDatas.push(row);\r\n          }\r\n        }\r\n      });\r\n      let total = {\r\n        nurse: \"Total\",\r\n        code: \"Total\",\r\n      };\r\n      // payrollDatas.push(total);\r\n      if (selMonth != \"00\") {\r\n        headers = [\r\n          { label: \"ID\", key: \"code\" },\r\n          { label: \"Name\", key: \"name\" },\r\n          { label: \"Designation\", key: \"designation\" },\r\n          { label: \"Worked Days\", key: \"workeddays\" },\r\n          { label: \"Worked Hours\", key: \"totalhoursworked\" },\r\n          { label: \"NormalOver(h)\", key: \"normalovertimehours\" },\r\n          { label: \"HolidayOver(h)\", key: \"holidayovertimehours\" },\r\n          { label: \"GrossSalary\", key: \"grosssalary\" },\r\n          { label: \"NormalOvertime\", key: \"normalovertime\" },\r\n          { label: \"HolidayOvertime\", key: \"holidayovertime\" },\r\n          { label: \"Total\", key: \"total\" },\r\n        ];\r\n        for (let month in monthNames) {\r\n        }\r\n      } else {\r\n        for (let month in monthNames) {\r\n          total[month] = this.getTotals(payrollDatas, month);\r\n          total[\"total\"] = this.getTotals(payrollDatas, \"total\");\r\n          headers = [\r\n            { label: \"Nurse\", key: \"nurse\" },\r\n            { label: \"Designation\", key: \"designation\" },\r\n            { label: \"Jan\", key: \"Jan\" },\r\n            { label: \"Feb\", key: \"Feb\" },\r\n            { label: \"Mar\", key: \"Mar\" },\r\n            { label: \"Apr\", key: \"Apr\" },\r\n            { label: \"May\", key: \"May\" },\r\n            { label: \"Jun\", key: \"Jun\" },\r\n            { label: \"Jul\", key: \"Jul\" },\r\n            { label: \"Aug\", key: \"Aug\" },\r\n            { label: \"Sep\", key: \"Sep\" },\r\n            { label: \"Oct\", key: \"Oct\" },\r\n            { label: \"Nov\", key: \"Nov\" },\r\n            { label: \"Dec\", key: \"Dec\" },\r\n            { label: \"Total\", key: \"total\" },\r\n          ];\r\n        }\r\n      }\r\n    }\r\n    let total = {\r\n      nurse: \"Total\",\r\n      code: \"Total\",\r\n      workeddays: thour,\r\n      totalhoursworked: totalhour,\r\n      normalovertimehours: normalhour,\r\n      holidayovertimehours: holidayhour,\r\n      grosssalary: gsalary,\r\n      normalovertime: normalover,\r\n      holidayovertime: holidayt,\r\n    };\r\n    for (let month in monthNames) {\r\n      total[month] = this.getTotals(payrollDatas, month);\r\n    }\r\n    total[\"total\"] = this.getTotals(payrollDatas, \"total\");\r\n    payrollDatas.push(total);\r\n\r\n    const conditionalRowStyles = [\r\n      {\r\n        when: (row) => row.designation == \"Total\",\r\n        style: (row) => ({\r\n          backgroundColor: \"rgb(160,160,160)\",\r\n        }),\r\n      },\r\n    ];\r\n    payrollDatas.sort((a, b) =>\r\n      a.name > b.name ? 1 : b.name > a.name ? -1 : 0\r\n    );\r\n    return (\r\n      <MDBContainer>\r\n        <div className=\"pt-5 text-center text-dark\">\r\n          <h1 className=\"mt-3\">PAY ROLL</h1>\r\n        </div>\r\n        <MDBRow className=\" align-items-center justify-content-center\">\r\n          <MDBCol md=\"2\">\r\n            <Form.Select\r\n              aria-label=\"select\"\r\n              value={selDesignation}\r\n              onChange={(e) => this.onChangeDesignation(e)}\r\n            >\r\n              <option value=\"-1\">All</option>\r\n              <option value=\"0\">Registered</option>\r\n              <option value=\"1\">Assistant</option>\r\n            </Form.Select>\r\n          </MDBCol>\r\n          <MDBCol md=\"2\">\r\n            <Form.Group>\r\n              <Form.Control\r\n                type=\"number\"\r\n                value={selYear}\r\n                placeholder=\"Year\"\r\n                onChange={(e) => this.onChangeYear(e)}\r\n              />\r\n            </Form.Group>\r\n          </MDBCol>\r\n          <MDBCol md=\"2\">\r\n            <Form.Select\r\n              aria-label=\"select\"\r\n              value={selMonth}\r\n              onChange={(e) => this.onChangeMonth(e)}\r\n            >\r\n              <option value=\"00\">Month</option>\r\n              {MonthSelect}\r\n            </Form.Select>\r\n          </MDBCol>\r\n          <MDBCol md=\"2\">\r\n            <CSVLink\r\n              data={payrollDatas}\r\n              headers={headers}\r\n              filename={\"payroll.csv\"}\r\n              className=\"btn btn-success \"\r\n              target=\"_blank\"\r\n            >\r\n              <IoMdDownload />\r\n              Export\r\n            </CSVLink>\r\n          </MDBCol>\r\n        </MDBRow>\r\n        <MDBRow className=\"mt-2\">\r\n          <DataTable\r\n            columns={payrollColumns}\r\n            data={payrollDatas}\r\n            fixedHeader\r\n            striped\r\n            conditionalRowStyles={conditionalRowStyles}\r\n            fixedHeaderScrollHeight={\"60vh\"}\r\n            pagination\r\n          />\r\n        </MDBRow>\r\n      </MDBContainer>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (BasicData) => ({\r\n  basic: BasicData.BasicData,\r\n});\r\nexport default connect(mapStateToProps, null)(PayRoll);\r\n"],"names":["PayRoll","props","onChangeYear","e","setState","state","selYear","target","value","onChangeMonth","selMonth","onChangeDesignation","selDesignation","year","Date","getFullYear","json","ret","key","data","total","forEach","item","this","basic","user","role","history","monthNames","monthNumbers","swap","Mon","Object","keys","NoMon","values","MonthSelect","map","month","index","payrollColumns","push","name","center","wrap","width","selector","row","toLocaleString","cell","placement","overlay","className","style","position","_id","payrollDatas","headers","thour","totalhour","normalhour","holidayhour","gsalary","normalover","holidayt","holidays","holidaysPerMonth","holiday","slice","undefined","sundaysPerMonth","daysInMonth","getDate","firstDate","getDay","selDay","day","nurses","nurse","reducePerDay","basicPerDay","parseFloat","basic_allowances","holidayPerDay","parseInt","level","salary","housing_allowances","other_allowances","comment","leaves","leave","leavedaysPerMonth","from","to","betweenDay","getMonth","setDate","rotas","rota","rotaPerMonth","rotaHolidayPerMonth","workeddays","totalhoursworked","date","startsWith","hour","includes","monthdays","normalovertimehours","holidayovertimehours","grosssalary","normalovertime","holidayovertime","totalsalary","payrollPerMonth","payrollCommentPerMonth","offDaysPerMonth","dutyHoursPerMonth","loopMonth","Set","length","overtime","hovertime","joined","designation","grandTotal","code","label","getTotals","sort","a","b","md","onChange","type","placeholder","CSVLink","filename","columns","fixedHeader","striped","conditionalRowStyles","when","backgroundColor","fixedHeaderScrollHeight","pagination","Component","connect","BasicData"],"sourceRoot":""}