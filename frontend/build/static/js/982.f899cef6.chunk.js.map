{"version":3,"file":"static/js/982.f899cef6.chunk.js","mappings":"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","sources":["pages/revenue.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport {connect} from 'react-redux'\r\nimport DataTable from 'react-data-table-component';\r\nimport {\r\n  MDBCol,MDBContainer,MDBRow,MDBBtn\r\n} from 'mdb-react-ui-kit';\r\nimport {Form} from 'react-bootstrap';\r\nimport toastr from 'toastr'\r\nimport 'toastr/build/toastr.min.css'\r\nimport { read, utils } from 'xlsx';\r\nimport axios from '../config/server.config'\r\nimport { pAllUpd } from '../store/Actions/BasicAction';\r\n\r\n\r\nclass Revenue extends Component {\r\n  constructor(props) {\r\n      super(props);\r\n\r\n      let date = new Date();\r\n      let year = date.getFullYear();\r\n      \r\n      this.state = {\r\n        selYear:year,\r\n        file:''\r\n      };\r\n  }\r\n  componentDidMount() {\r\n  }\r\n\r\n  onImportPatients = (e) =>{\r\n    const files = e.target.files;\r\n    if (files.length) {\r\n        const file = files[0];\r\n        this.setState({\r\n          ...this.state,\r\n          file:file\r\n        });\r\n    }\r\n  }\r\n  submit = () =>{\r\n    var _self = this;\r\n    if(this.state.file){\r\n      const reader = new FileReader();\r\n      reader.onload = (event) => {\r\n        const wb = read(event.target.result);\r\n        const sheets = wb.SheetNames;\r\n        let revenueSheet = sheets.indexOf('Revenue');\r\n        if(revenueSheet != -1){\r\n          const rows = utils.sheet_to_json(wb.Sheets[sheets[revenueSheet]]);\r\n          axios.post('patient/import',{\r\n            importData:rows\r\n          })\r\n          .then(function (response) {\r\n            let notFound = response.data.notFound;\r\n            let data = response.data;\r\n            if(notFound.length != 0){\r\n              toastr.warning(\"Not Found These Patients:\"+notFound.join(\",\"));\r\n            }\r\n            _self.props.getImportData(data);\r\n          })\r\n          .catch(function (error) {\r\n          });\r\n        }\r\n      }\r\n      reader.readAsArrayBuffer(this.state.file);\r\n    }\r\n    else{\r\n      toastr.info(\"Please select import file!\");\r\n    }\r\n  }\r\n  onChangeYear = (e) =>{\r\n    this.setState({\r\n      ...this.state,\r\n      selYear:e.target.value,\r\n    });\r\n  }\r\n  getTotals(data, key){\r\n    let total = 0;\r\n    data.forEach(item => {\r\n      total += item[key]?item[key]:0;\r\n    });\r\n    return total;\r\n  }\r\n\r\n  swap(json){\r\n    let ret = [];\r\n    for(var key in json){\r\n      ret[json[key]] = key;\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  render() {\r\n    const {selYear} = this.state;\r\n    const {basic} =this.props;\r\n\r\n    let monthNames = basic.monthNames;\r\n    let monthNumbers = this.swap(monthNames);\r\n    \r\n    let revenueColumns = [];\r\n    revenueColumns.push({\r\n      name: \"Revenue\",\r\n      center:true,\r\n      wrap:true,\r\n      selector: (row) => row.patient,\r\n    });\r\n    for(let month in monthNames){\r\n      revenueColumns.push({\r\n        name:month,\r\n        center:true,\r\n        wrap:true,\r\n        width:'75px',\r\n        selector: (row) => row[month]?row[month].toLocaleString('en'):'',\r\n      });\r\n    }\r\n    revenueColumns.push({\r\n      name: \"Total\",\r\n      center:true,\r\n      wrap:true,\r\n      selector: (row) => row.total?row.total.toLocaleString('en'):'',\r\n    });\r\n\r\n    let revenueDatas = [];\r\n\r\n    basic.patients.map(patient =>{\r\n      let row=[];\r\n      let total = 0;\r\n      row['patient'] = patient.name;\r\n      if(patient.revenue != undefined){\r\n        for(let month in patient.revenue){\r\n          if(month.slice(4,6) == selYear%100){\r\n            let monthName = month.slice(0,3);\r\n            row[monthName] = patient.revenue[month]\r\n            total += patient.revenue[month];\r\n          }\r\n        }\r\n      }\r\n      row['total'] = total;\r\n      revenueDatas.push(row);\r\n    });\r\n\r\n    let total = {\r\n      patient:'Total',\r\n    }\r\n    for(let month in monthNames){\r\n      total[month] = this.getTotals(revenueDatas,month);\r\n    }\r\n    total['total'] = this.getTotals(revenueDatas,'total');\r\n    revenueDatas.push(total);\r\n\r\n    const conditionalRowStyles = [\r\n        {\r\n          when: (row) => row.patient == 'total',\r\n          style: row => ({\r\n            backgroundColor: 'rgb(160,160,160)',\r\n          }),\r\n        }\r\n    ];\r\n\r\n    return (\r\n      <MDBContainer>\r\n          <div className=\"pt-5 text-center text-dark\">\r\n            <h1 className=\"mt-3\">REVENUE</h1>\r\n          </div>\r\n          <MDBRow className=\" align-items-center justify-content-center\">\r\n            <MDBCol md=\"2\">\r\n              <Form.Group>\r\n                <Form.Control type=\"number\" value={selYear} placeholder=\"Year\" onChange = {(e) =>this.onChangeYear(e)}/>\r\n              </Form.Group>\r\n            </MDBCol>\r\n            <MDBCol md=\"3\">\r\n                <Form.Group controlId=\"ImageInput\">\r\n                <Form.Control type=\"file\" accept=\".xlsx\" onChange={(e) =>this.onImportPatients(e,this)} />\r\n                </Form.Group>\r\n            </MDBCol>\r\n            <MDBCol md=\"2\">\r\n              <MDBBtn outline rounded  color='success' onClick={() =>this.submit()}>SUBMIT</MDBBtn>\r\n            </MDBCol>\r\n          </MDBRow>\r\n          <MDBRow className='mt-2'>   \r\n            <DataTable\r\n                columns={revenueColumns} \r\n                data={revenueDatas}\r\n                fixedHeader\r\n                striped\r\n                conditionalRowStyles={conditionalRowStyles}\r\n                fixedHeaderScrollHeight={'60vh'}\r\n                pagination\r\n            />\r\n          </MDBRow>\r\n      </MDBContainer>\r\n    );\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  getImportData:(data) =>dispatch(pAllUpd(data))\r\n});\r\n\r\nconst mapStateToProps = (BasicData) => ({\r\n  basic:BasicData.BasicData\r\n});\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Revenue)"],"names":["Revenue","props","onImportPatients","e","files","target","length","file","setState","state","submit","_self","reader","FileReader","onload","event","wb","read","result","sheets","SheetNames","revenueSheet","indexOf","rows","utils","Sheets","axios","importData","then","response","notFound","data","toastr","join","getImportData","catch","error","readAsArrayBuffer","onChangeYear","selYear","value","year","Date","getFullYear","key","total","forEach","item","json","ret","this","basic","monthNames","revenueColumns","swap","push","name","center","wrap","selector","row","patient","month","width","toLocaleString","revenueDatas","patients","map","undefined","revenue","slice","getTotals","className","md","type","placeholder","onChange","controlId","accept","outline","rounded","color","onClick","columns","fixedHeader","striped","conditionalRowStyles","when","style","backgroundColor","fixedHeaderScrollHeight","pagination","Component","connect","BasicData","dispatch","pAllUpd"],"sourceRoot":""}