{"version":3,"file":"static/js/312.4a7e078e.chunk.js","mappings":"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","sources":["pages/pnl.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport { MDBCol, MDBContainer, MDBRow } from \"mdb-react-ui-kit\";\r\nimport { CSVLink } from \"react-csv\";\r\nimport { IoMdDownload } from \"react-icons/io\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport history from \"../history\";\r\n\r\nclass PNL extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let date = new Date();\r\n    let year = date.getFullYear();\r\n    let month =\r\n      date.getMonth() + 1 > 9\r\n        ? date.getMonth() + 1\r\n        : \"0\" + (date.getMonth() + 1);\r\n\r\n    this.state = {\r\n      selYear: year,\r\n      selMonth: month,\r\n      perPatient: false,\r\n    };\r\n  }\r\n\r\n  onChangeYear = (e) => {\r\n    this.setState({\r\n      ...this.state,\r\n      selYear: e.target.value,\r\n    });\r\n  };\r\n\r\n  levelModalChange = (e) => {\r\n    this.setState({\r\n      ...this.state,\r\n      selLevel: e.target.value,\r\n    });\r\n  };\r\n\r\n  onChangeMonth = (e) => {\r\n    this.setState({\r\n      ...this.state,\r\n      selMonth: e.target.value,\r\n    });\r\n  };\r\n\r\n  viewPerPatient = (e) => {\r\n    this.setState({\r\n      ...this.state,\r\n      perPatient: !this.state.perPatient,\r\n    });\r\n  };\r\n\r\n  getTotals(data, key) {\r\n    let total = 0;\r\n    data.forEach((item) => {\r\n      total += item[key];\r\n    });\r\n    return total;\r\n  }\r\n  getPercentage(row) {\r\n    let percentage = 0;\r\n    if (row.netProfit > 0) {\r\n      percentage = (row.netProfit / row.revenue) * 100;\r\n    }\r\n    row.percentage = percentage.toFixed(2) + \"%\";\r\n    return row.percentage;\r\n  }\r\n\r\n  swap(json) {\r\n    let ret = [];\r\n    for (var key in json) {\r\n      ret[json[key]] = key;\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  render() {\r\n    const { selYear, selMonth, perPatient } = this.state;\r\n    const { basic } = this.props;\r\n    const { user } = this.props.basic;\r\n    \r\n    if(!user.role && user.role === 0){\r\n      history.push(\"/\");\r\n      history.go(\"/\");\r\n    }\r\n\r\n    let monthNames = basic.monthNames;\r\n    let monthNumbers = this.swap(monthNames);\r\n\r\n    let Mon = Object.keys(monthNames);\r\n    let NoMon = Object.values(monthNames);\r\n\r\n    const MonthSelect = Mon.map((month, index) => (\r\n      <option key={index} value={NoMon[index]}>{month}</option>\r\n    ));\r\n\r\n    let pnlColumns = [];\r\n    let pnlDatas = [];\r\n\r\n    if (perPatient) {\r\n      pnlColumns.push(\r\n        {\r\n          name: \"Patient\",\r\n          center: true,\r\n          wrap: true,\r\n          sortable: true,\r\n          filterable: true,\r\n          selector: (row) => row.patient,\r\n        },\r\n        {\r\n          name: \"Level\",\r\n          center: true,\r\n          wrap: true,\r\n          sortable: true,\r\n          selector: (row) => row.level,\r\n        }\r\n      );\r\n    } else {\r\n      pnlColumns.push({\r\n        name: \"Month\",\r\n        center: true,\r\n        wrap: true,\r\n        selector: (row) => row.month,\r\n      });\r\n    }\r\n    pnlColumns.push(\r\n      {\r\n        name: \"Revenue\",\r\n        center: true,\r\n        wrap: true,\r\n        selector: (row) => (row.revenue ? row.revenue.toLocaleString(\"en\") : 0),\r\n      },\r\n      {\r\n        name: \"Payroll\",\r\n        center: true,\r\n        wrap: true,\r\n        selector: (row) => (row.payroll ? row.payroll.toLocaleString(\"en\") : 0),\r\n      },\r\n      {\r\n        name: \"Profit/Loss\",\r\n        center: true,\r\n        wrap: true,\r\n        selector: (row) => (row.pnl ? row.pnl.toLocaleString(\"en\") : 0),\r\n      },\r\n      {\r\n        name: \"Percentage\",\r\n        center: true,\r\n        wrap: true,\r\n        selector: (row) =>\r\n          row.percentage ? row.percentage.toLocaleString(\"en\") : 0,\r\n      }\r\n    );\r\n\r\n    //get holidays per month\r\n    let holidays = basic.holidays;\r\n    let holidaysPerMonth = [];\r\n    holidays.map((holiday) => {\r\n      let key = monthNumbers[holiday.slice(0, 2)];\r\n      if (holidaysPerMonth[key] == undefined) {\r\n        holidaysPerMonth[key] = [];\r\n      }\r\n      holidaysPerMonth[key].push(selYear + \"-\" + holiday);\r\n    });\r\n    //get sundays per month\r\n    let sundaysPerMonth = [];\r\n    for (let loopMonth in monthNumbers) {\r\n      let daysInMonth = new Date(selYear, loopMonth, 0).getDate();\r\n      let date = selYear + \"-\" + loopMonth + \"-01\";\r\n      let firstDate = new Date(date).getDay();\r\n      if (firstDate == 0) {\r\n        firstDate = 1;\r\n      } else {\r\n        firstDate = 7 - firstDate + 1;\r\n      }\r\n      for (let selDay = firstDate; selDay < daysInMonth; selDay += 7) {\r\n        let day = selDay > 9 ? selDay : \"0\" + selDay;\r\n        let key = monthNumbers[loopMonth];\r\n        if (sundaysPerMonth[key] == undefined) {\r\n          sundaysPerMonth[key] = [];\r\n        }\r\n        sundaysPerMonth[key].push(selYear + \"-\" + loopMonth + \"-\" + day);\r\n      }\r\n    }\r\n    //get payroll\r\n    let payrollPerMonth = [];\r\n    let payrollPerPatient = [];\r\n    let payrollHourly = [];\r\n    let headers = [];\r\n\r\n    basic.nurses.map((nurse) => {\r\n      let salary =\r\n        nurse.basic_allowances +\r\n        nurse.housing_allowances +\r\n        nurse.other_allowances;\r\n\r\n      //leave days\r\n      let leaves = nurse.leave ? nurse.leave : [];\r\n      let leavedaysPerMonth = [];\r\n      for (let leave of leaves) {\r\n        let from = new Date(leave.from);\r\n        let to = new Date(leave.to);\r\n        for (let betweenDay = from; betweenDay <= to; ) {\r\n          let year = betweenDay.getFullYear();\r\n          let month =\r\n            betweenDay.getMonth() + 1 > 9\r\n              ? betweenDay.getMonth() + 1\r\n              : \"0\" + (betweenDay.getMonth() + 1);\r\n          let day =\r\n            betweenDay.getDate() > 9\r\n              ? betweenDay.getDate()\r\n              : \"0\" + betweenDay.getDate();\r\n          if (year == selYear) {\r\n            let key = monthNumbers[month];\r\n            if (leavedaysPerMonth[key] == undefined) {\r\n              leavedaysPerMonth[key] = [];\r\n            }\r\n            leavedaysPerMonth[key].push(year + \"-\" + month + \"-\" + day);\r\n          }\r\n          betweenDay.setDate(betweenDay.getDate() + 1);\r\n        }\r\n      }\r\n      //rota hours per month\r\n      let rotas = nurse.rota;\r\n      let rotaPerMonth = [];\r\n      let rotaHolidayPerMonth = [];\r\n      rotas.map((rota) => {\r\n        if (rota.date.startsWith(selYear)) {\r\n          let month = monthNumbers[[rota.date.slice(5, 7)]];\r\n          if (rotaPerMonth[month] == undefined) {\r\n            rotaPerMonth[month] = rota.hour;\r\n          } else {\r\n            rotaPerMonth[month] += rota.hour;\r\n          }\r\n          if (\r\n            holidaysPerMonth[month] &&\r\n            holidaysPerMonth[month].includes(rota.date)\r\n          ) {\r\n            if (rotaHolidayPerMonth[month] == undefined) {\r\n              rotaHolidayPerMonth[month] = rota.hour;\r\n            } else {\r\n              rotaHolidayPerMonth[month] += rota.hour;\r\n            }\r\n          }\r\n\r\n          if (rota.date.slice(5, 7) == selMonth) {\r\n            if (payrollPerPatient[rota.patient_id] == undefined) {\r\n              payrollPerPatient[rota.patient_id] = [];\r\n            }\r\n            if (payrollPerPatient[rota.patient_id][nurse._id] == undefined) {\r\n              payrollPerPatient[rota.patient_id][nurse._id] = rota.hour;\r\n            } else {\r\n              payrollPerPatient[rota.patient_id][nurse._id] += rota.hour;\r\n            }\r\n          }\r\n        }\r\n      });\r\n\r\n      //datatable set\r\n      let offDaysPerMonth = [];\r\n      let dutyHoursPerMonth = [];\r\n\r\n      for (let loopMonth in monthNames) {\r\n        let daysInMonth = new Date(selYear, monthNames[loopMonth], 0).getDate();\r\n        if (leavedaysPerMonth[loopMonth] == undefined) {\r\n          leavedaysPerMonth[loopMonth] = [];\r\n        }\r\n        if (holidaysPerMonth[loopMonth] == undefined) {\r\n          holidaysPerMonth[loopMonth] = [];\r\n        }\r\n        if (sundaysPerMonth[loopMonth] == undefined) {\r\n          sundaysPerMonth[loopMonth] = [];\r\n        }\r\n\r\n        offDaysPerMonth[loopMonth] = [\r\n          ...leavedaysPerMonth[loopMonth],\r\n          ...holidaysPerMonth[loopMonth],\r\n          ...sundaysPerMonth[loopMonth],\r\n        ];\r\n        offDaysPerMonth[loopMonth] = [...new Set(offDaysPerMonth[loopMonth])];\r\n        dutyHoursPerMonth[loopMonth] =\r\n          (daysInMonth - offDaysPerMonth[loopMonth].length) * 8;\r\n\r\n        if (rotaPerMonth[loopMonth] == undefined) {\r\n          rotaPerMonth[loopMonth] = 0;\r\n        }\r\n        if (rotaHolidayPerMonth[loopMonth] == undefined) {\r\n          rotaHolidayPerMonth[loopMonth] = 0;\r\n        }\r\n        if (payrollPerMonth[loopMonth] == undefined) {\r\n          payrollPerMonth[loopMonth] = 0;\r\n        }\r\n\r\n        if (rotaPerMonth[loopMonth]) {\r\n          let basicPerDay = parseFloat((nurse.basic_allowances * 15) / 365 / 8);\r\n          let holidayPerDay = parseFloat(\r\n            (nurse.basic_allowances * 18) / 365 / 8\r\n          );\r\n          let reducePerDay = parseFloat((salary * 12) / 365);\r\n\r\n          if (\r\n            dutyHoursPerMonth[loopMonth] < rotaPerMonth[loopMonth]\r\n            //  && rotaPerMonth[loopMonth] >= 192\r\n          ) {\r\n            let overtime =\r\n              rotaPerMonth[loopMonth] - dutyHoursPerMonth[loopMonth];\r\n            let holidayovertime = 0;\r\n\r\n            if (rotaHolidayPerMonth[loopMonth] != undefined) {\r\n              if (overtime <= rotaHolidayPerMonth[loopMonth]) {\r\n                holidayovertime = overtime;\r\n                overtime = 0;\r\n              } else {\r\n                overtime -= rotaHolidayPerMonth[loopMonth];\r\n                holidayovertime = rotaHolidayPerMonth[loopMonth];\r\n              }\r\n            }\r\n            salary += parseInt(\r\n              basicPerDay * overtime + holidayPerDay * holidayovertime\r\n            );\r\n          }\r\n\r\n          if (selYear == parseInt(nurse.date.slice(0, 4))) {\r\n            let joined = nurse.date;\r\n            if (monthNames[loopMonth] < joined.slice(5, 7)) {\r\n              salary = 0;\r\n            } else if (monthNames[loopMonth] == joined.slice(5, 7)) {\r\n              salary =\r\n                salary -\r\n                parseInt(reducePerDay * (parseInt(joined.slice(8, 10)) - 1));\r\n            }\r\n          } else if (selYear < parseInt(nurse.date.slice(0, 4))) {\r\n            salary = 0;\r\n          }\r\n\r\n          payrollPerMonth[loopMonth] += salary;\r\n\r\n          if (monthNames[loopMonth] == selMonth) {\r\n            payrollHourly[nurse._id] = parseFloat(\r\n              salary / rotaPerMonth[loopMonth]\r\n            );\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    if (perPatient) {\r\n      let revenueTotal = 0;\r\n      let payrollTotal = 0;\r\n      basic.patients.map((patient) => {\r\n        let revenue = 0;\r\n        let payroll = 0;\r\n        headers = [\r\n          { label: \"Patient\", key: \"patient\" },\r\n          { label: \"Level\", key: \"level\" },\r\n          { label: \"Revenue\", key: \"revenue\" },\r\n          { label: \"Payroll\", key: \"payroll\" },\r\n          { label: \"Profit/Loss\", key: \"pnl\" },\r\n          { label: \"Prcentage\", key: \"percentage\" },\r\n        ];\r\n\r\n        for (let month in patient.revenue) {\r\n          if (\r\n            month.slice(4, 6) == selYear % 100 &&\r\n            monthNames[month.slice(0, 3)] == selMonth\r\n          ) {\r\n            revenue = patient.revenue[month];\r\n            revenueTotal += revenue;\r\n          }\r\n        }\r\n        if (payrollPerPatient[patient._id] == undefined) {\r\n          payroll = 0;\r\n        } else {\r\n          for (let loopNurse in payrollPerPatient[patient._id]) {\r\n            payroll += parseFloat(\r\n              payrollPerPatient[patient._id][loopNurse] *\r\n                payrollHourly[loopNurse]\r\n            );\r\n          }\r\n          payrollTotal += payroll;\r\n        }\r\n\r\n        pnlDatas.push({\r\n          patient: patient.name,\r\n          level: patient.level,\r\n          revenue: parseInt(revenue),\r\n          payroll: parseInt(payroll),\r\n          pnl: revenue - parseInt(payroll),\r\n          percentage:\r\n            parseInt(\r\n              ((revenue - parseInt(payroll)) / parseInt(revenue)) * 100\r\n            ) + \"%\",\r\n        });\r\n      });\r\n      let row = {\r\n        patient: \" Total\",\r\n        revenue: revenueTotal,\r\n        payroll: parseInt(payrollTotal),\r\n        pnl: revenueTotal - parseInt(payrollTotal),\r\n        percentage:\r\n          parseInt(\r\n            ((revenueTotal - parseInt(payrollTotal)) / revenueTotal) * 100\r\n          ) + \"%\",\r\n      };\r\n      pnlDatas.push(row);\r\n    } else {\r\n      headers = [\r\n        { label: \"Month\", key: \"month\" },\r\n        { label: \"Revenue\", key: \"revenue\" },\r\n        { label: \"Payroll\", key: \"payroll\" },\r\n        { label: \"Profit/Loss\", key: \"pnl\" },\r\n        { label: \"Prcentage\", key: \"percentage\" },\r\n      ];\r\n      let revenue = [];\r\n      basic.patients.map((patient) => {\r\n        for (let month in patient.revenue) {\r\n          if (month.slice(4, 6) == selYear % 100) {\r\n            let m = month.slice(0, 3);\r\n            revenue[m] == undefined\r\n              ? (revenue[m] = patient.revenue[month])\r\n              : (revenue[m] += patient.revenue[month]);\r\n          }\r\n        }\r\n      });\r\n\r\n      for (let month in monthNames) {\r\n        if (revenue[month] == undefined) {\r\n          revenue[month] = 0;\r\n        }\r\n        if (payrollPerMonth[month] == undefined) {\r\n          payrollPerMonth[month] = 0;\r\n        }\r\n        pnlDatas.push({\r\n          month: month,\r\n          revenue: revenue[month],\r\n          payroll: payrollPerMonth[month],\r\n          pnl: revenue[month] - payrollPerMonth[month],\r\n          percentage:\r\n            parseInt(\r\n              ((revenue[month] - payrollPerMonth[month]) / revenue[month]) * 100\r\n            ) + \"%\",\r\n        });\r\n      }\r\n\r\n      let row = {};\r\n      revenue = Object.values(revenue).reduce((a, b) => a + b, 0);\r\n      let payroll = Object.values(payrollPerMonth).reduce((a, b) => a + b, 0);\r\n      let pnl = revenue - payroll;\r\n      row.month = \"Total\";\r\n      row.revenue = revenue;\r\n      row.payroll = payroll;\r\n      row.pnl = pnl;\r\n      row.percentage = parseInt((pnl / revenue) * 100) + \"%\";\r\n\r\n      pnlDatas.push(row);\r\n    }\r\n\r\n    const conditionalRowStyles = [\r\n      {\r\n        when: (row) => row.month == \"Total\" || row.patient == \"Total\",\r\n        style: (row) => ({\r\n          backgroundColor: \"rgb(160,160,160)\",\r\n        }),\r\n      },\r\n    ];\r\n\r\n    return (\r\n      <MDBContainer>\r\n        <div className=\"pt-5 text-center text-dark\">\r\n          <h1 className=\"mt-3\">PROFIT & LOSS</h1>\r\n        </div>\r\n        <MDBRow className=\" align-items-center justify-content-center\">\r\n          <MDBCol md=\"2\">\r\n            <Form.Group>\r\n              <Form.Control\r\n                type=\"number\"\r\n                value={selYear}\r\n                placeholder=\"Year\"\r\n                onChange={(e) => this.onChangeYear(e)}\r\n              />\r\n            </Form.Group>\r\n          </MDBCol>\r\n          {perPatient && (\r\n            <MDBCol md=\"2\">\r\n              <Form.Group>\r\n                <Form.Select\r\n                  aria-label=\"select\"\r\n                  value={selMonth}\r\n                  onChange={(e) => this.onChangeMonth(e)}\r\n                >\r\n                  {MonthSelect}\r\n                </Form.Select>\r\n              </Form.Group>\r\n            </MDBCol>\r\n          )}\r\n          <MDBCol md=\"2\" className=\"pt-3\">\r\n            <Form.Check\r\n              checked={perPatient}\r\n              type=\"checkbox\"\r\n              isValid={true}\r\n              label=\"Per Patient\"\r\n              onChange={(e) => this.viewPerPatient(e)}\r\n            />\r\n          </MDBCol>\r\n          <MDBCol md=\"2\" className=\"float-right\">\r\n            <CSVLink\r\n              headers={headers}\r\n              data={pnlDatas}\r\n              filename={\"pnl.csv\"}\r\n              className=\"btn btn-success \"\r\n              target=\"_blank\"\r\n            >\r\n              <IoMdDownload />\r\n              Export\r\n            </CSVLink>\r\n          </MDBCol>\r\n        </MDBRow>\r\n        <MDBRow className=\"mt-2\">\r\n          <DataTable\r\n            columns={pnlColumns}\r\n            data={pnlDatas}\r\n            filter={true}\r\n            fixedHeader\r\n            striped\r\n            conditionalRowStyles={conditionalRowStyles}\r\n            fixedHeaderScrollHeight={\"60vh\"}\r\n            // pagination\r\n          />\r\n        </MDBRow>\r\n      </MDBContainer>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (BasicData) => ({\r\n  basic: BasicData.BasicData,\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(PNL);\r\n"],"names":["PNL","props","onChangeYear","e","setState","state","selYear","target","value","levelModalChange","selLevel","onChangeMonth","selMonth","viewPerPatient","perPatient","date","Date","year","getFullYear","month","getMonth","data","key","total","forEach","item","row","percentage","netProfit","revenue","toFixed","json","ret","this","basic","user","role","history","monthNames","monthNumbers","swap","Mon","Object","keys","NoMon","values","MonthSelect","map","index","pnlColumns","pnlDatas","push","name","center","wrap","sortable","filterable","selector","patient","level","toLocaleString","payroll","pnl","holidays","holidaysPerMonth","holiday","slice","undefined","sundaysPerMonth","loopMonth","daysInMonth","getDate","firstDate","getDay","selDay","day","payrollPerMonth","payrollPerPatient","payrollHourly","headers","nurses","nurse","salary","basic_allowances","housing_allowances","other_allowances","leaves","leave","leavedaysPerMonth","from","to","betweenDay","setDate","rotas","rota","rotaPerMonth","rotaHolidayPerMonth","startsWith","hour","includes","patient_id","_id","offDaysPerMonth","dutyHoursPerMonth","Set","length","basicPerDay","parseFloat","holidayPerDay","reducePerDay","overtime","holidayovertime","parseInt","joined","revenueTotal","payrollTotal","patients","label","loopNurse","m","reduce","a","b","className","md","type","placeholder","onChange","checked","isValid","CSVLink","filename","columns","filter","fixedHeader","striped","conditionalRowStyles","when","style","backgroundColor","fixedHeaderScrollHeight","Component","connect","BasicData"],"sourceRoot":""}